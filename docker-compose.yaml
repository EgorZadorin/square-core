version: '3.1'

services:
  db:
    image: postgres
    restart: always
    ports:
      - 5432:5432
    environment:
      - POSTGRES_PASSWORD=dbpw
      - POSTGRES_USER=square
      - POSTGRES_DB=square
    volumes:
      - db-data:/var/lib/postgresql/data

  backend:
    image: ukpsquare/square-backend:latest
    restart: always
    ports:
      - 5000:5000
    depends_on:
      - db
    volumes:
      - migrations-data:/app/migrations

  frontend:
    build:
      context: .
      dockerfile: ./square-frontend/Dockerfile_production
    image: ukpsquare/square-frontend:latest
    restart: always
    ports:
      - 80:80

  ### Skills
  boolq_skill:
    image: ukpsquare/square-skills-boolq:latest
    build: ./skills/qa-boolq-skill/.
    ports:
      - 8003:8003
    env_file:
      - ./skills/qa-boolq-skill/.env
  squad_v2_skill:
    image: ukpsquare/square-skills-squad-v2:latest
    build: ./skills/qa-squad-v2-skill/.
    ports:
      - 8004:8004
    env_file:
      - ./skills/qa-squad-v2-skill/.env
  commonsense_qa_skill:
    image: ukpsquare/square-skills-commonsense-qa:latest
    build: ./skills/qa-commonsense-qa-skill/.
    ports:
      - 8005:8005
    env_file:
      - ./skills/qa-commonsense-qa-skill/.env
  extractive_qa_skill:
    image: ukpsquare/square-skills-extractive:latest
    build: ./skills/qa-extractive-qa-skill/.
    ports:
      - 8006:8006
    env_file:
      - ./skills/qa-extractive-qa-skill/.env
  multiple_choice_qa_skill:
    image: ukpsquare/square-skills-multiple-choice:latest
    build: ./skills/qa-multiple-choice-skill/.
    ports:
      - 8007:8007
    env_file:
      - ./skills/qa-multiple-choice-skill/.env
  naturalqa_retrieve_span_skill:
    image: ukpsquare/square-skills-retrieve-span:latest
    build: ./skills/qa-retrieve-span-skill/.
    ports:
      - 8002:8002
    env_file:
      - ./skills/qa-retrieve-span-skill/.env
  retrieve_bioasq_skill:
    image: ukpsquare/square-skills-retrieve-bioasq:latest
    build: ./skills/qa-retrieve-bioasq-skill/.
    ports:
      - 8009:8009
    env_file:
      - ./skills/qa-retrieve-bioasq-skill/.env

  ### MODEL API
  traefik:
    image: traefik:v2.5.6
    container_name: traefik
    command:
      - --providers.docker=true
      - --providers.file.filename=/config/traefik.yaml
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.http.middlewares=prefix-strip@file, auth@file, api-prefix@file
      - --entrypoints.web.address=:80
      - --accesslog=true
      - --accesslog.format=json
      - --accesslog.filepath=/var/log/traefik/access.log.json
      - --log.level=DEBUG
    ports:
      - 8989:80
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./square-model-inference-api/traefik/traefik.yaml:/config/traefik.yaml

  maintaining:
    image: ukpsquare/square-model-management:latest
#    build:
#      ./square-model-inference-api/management_server
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.maintaining.rule=PathPrefix(`/api/models`)"

  model_bert_adapter:
    image: ukpsquare/square-model-api-v1:latest
    env_file:
      - ./square-model-inference-api/inference_server/.env.bert_adapter
    volumes:
      - ./.cache/:/etc/huggingface/.cache/
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.bert.rule=PathPrefix(`/api/bert-base-uncased`)"

  model_dpr:
    image: ukpsquare/square-model-api-v1:latest
    env_file:
      - ./square-model-inference-api/inference_server/.env.dpr
    volumes:
      - ./.cache/:/etc/huggingface/.cache/
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dpr.rule=PathPrefix(`/api/facebook-dpr-question_encoder-single-nq-base`)"

  model_distilbert_st:
    image: ukpsquare/square-model-api-v1:latest
    env_file:
      - ./square-model-inference-api/inference_server/.env.distilbert_sentence_transformer
    volumes:
      - ./.cache/:/etc/sentence-transformers/.cache/
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.distilbert.rule=PathPrefix(`/api/msmarco-distilbert-base-tas-b`)"

  ### / MODEL API Finished

  skill_manager:
    image: ukpsquare/skill-manager:latest
    build: ./skill-manager
    ports:
      - 8008:8008
    env_file:
      - ./skill-manager/.env
    depends_on:
      - skill_manager_mongo

  skill_manager_mongo:
    image: mongo:5.0.4
    restart: always
    volumes:
      - skill-manager-mongo-data:/data/db
    ports:
      - 27017:27017
    env_file:
      - ./skill-manager/.env

  ### DATASTORE API

  datastore_es:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.16.1
    container_name: datastore_es01
    environment:
      - discovery.type=single-node
    volumes:
      - datastore-api-es:/usr/share/elasticsearch/data
    ports:
      - 7200:9200

  datastore_reverse-proxy:
      image: traefik:v2.5
      command:
        - "--providers.docker"
        - "--providers.docker.exposedbydefault=false"
        - "--providers.file.filename=/config/traefik.yaml"
        - "--entrypoints.web.address=:7010"
        - "--entrypoints.web.http.middlewares=prefix-strip@file"
        - "--providers.docker.defaultRule=PathPrefix(`{{ index .Labels \"square.datastore\"}}`)"
      ports:
        - "7010:7010"
      volumes:
        # The configuration file
        - ${PWD}/traefik.yaml:/config/traefik.yaml
        # So that Traefik can listen to the Docker events
        - /var/run/docker.sock:/var/run/docker.sock

##### BEGIN FAISS Service Containers #####

# Add one container per FAISS index below.
# Each container should be defined as follows:
  # faiss-<index_name>:
  #   image: kwang2049/faiss-instant:latest
  #   volumes:
  #     - <local_path>:/opt/faiss-instant/resources
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.services.faiss-<index_name>.loadbalancer.server.port=5000"
  #     - "square.datastore=<index_name>"

  faiss-nq-dpr:
    image: kwang2049/faiss-instant:latest
    volumes:
      - datastore-api-faiss-nq-dpr:/opt/faiss-instant/resources
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.faiss-nq-dpr.loadbalancer.server.port=5000"
      - "square.datastore=/nq/dpr"

  faiss-msmarco-distilbert:
    image: kwang2049/faiss-instant:latest
    volumes:
      - datastore-api-faiss-msmarco-distilbert:/opt/faiss-instant/resources
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.faiss-msmarco-distilbert.loadbalancer.server.port=5000"
      - "square.datastore=/msmarco/distilbert"

##### END FAISS Service Containers #####

  datastore_api:
    privileged: true
    build: ./datastore-api
    depends_on:
      - datastore_es
    ports:
      - "7000:7000"
    env_file:
      - ./.env.datastore_api

 ### END DATASTORE API

volumes:
  db-data:
    driver: local
  migrations-data:
    driver: local
  es01:
    driver: local
  skill-manager-mongo-data:
    driver: local
  datastore-api-es:
    driver: local
  datastore-api-faiss-nq-dpr:
    driver: local
  datastore-api-faiss-msmarco-distilbert:
    driver: local

