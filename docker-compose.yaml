version: '3.1'

services:
  db:
    image: postgres
    restart: always
    ports:
      - 5432:5432
    environment:
      - POSTGRES_PASSWORD=dbpw
      - POSTGRES_USER=square
      - POSTGRES_DB=square
    volumes:
      - db-data:/var/lib/postgresql/data

  backend:
    image: ukpsquare/square-backend:latest
    restart: always
    ports:
      - 5000:5000
    depends_on:
      - db
    volumes:
      - migrations-data:/app/migrations

  frontend:
    image: ukpsquare/square-frontend:latest
    restart: always
    ports:
      - 80:80

  ### Skills
  naturalqa_retrieve_span_skill:
    build: ./skills/qa-retrieve-span-skill/.
    ports:
      - 8777:8000
    env_file:
      - ./skills/qa-retrieve-span-skill/.env

  ### MODEL API
  model_auth:
    image: ukpsquare/square-model-api-auth:latest
    env_file:
      - ./square-model-inference-api/auth_server/.env

  model_nginx:
    image: nginx
    ports:
      - 8989:8080
    volumes:
      - ./square-model-inference-api/nginx/nginx.conf:/etc/nginx/nginx.conf:ro

  model_bert_adapter:
    image: ukpsquare/square-model-api:latest
    env_file:
      - ./square-model-inference-api/inference_server/.env.bert_adapter
    volumes:
      - ./.cache/:/etc/huggingface/.cache/

  model_dpr:
    image: ukpsquare/square-model-api:latest
    env_file:
      - ./square-model-inference-api/inference_server/.env.dpr
    volumes:
      - ./.cache/:/etc/huggingface/.cache/

  ### / MODEL API Finished

  #adminer:
  #  image: adminer
  #  restart: always
  #  ports:
  #    - 8080:8080

  # es:
  #   image: docker.elastic.co/elasticsearch/elasticsearch:7.5.0
  #   environment:
  #     - node.name=es01
  #     - cluster.name=es-docker-cluster
  #     - discovery.type=single-node
  #     - bootstrap.memory_lock=true
  #     - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
  #   ulimits:
  #     memlock:
  #       soft: -1
  #       hard: -1
  #   volumes:
  #     - es01:/usr/share/elasticsearch/data
  #   ports:
  #     - 9200:9200

 ### DATASTORE API
  datastore_es:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.16.1
    container_name: datastore_es01
    environment:
      - discovery.type=single-node
    volumes:
      - ./storage/es/data:/usr/share/elasticsearch/data
    ports:
      - 7200:9200

  datastore_reverse-proxy:
      image: traefik:v2.5
      command:
        - "--providers.docker"
        - "--providers.docker.exposedbydefault=false"
        - "--providers.file.filename=/config/traefik.yaml"
        - "--entrypoints.web.address=:7010"
        - "--entrypoints.web.http.middlewares=prefix-strip@file"
        - "--providers.docker.defaultRule=PathPrefix(`{{ index .Labels \"square.datastore\"}}`)"
      ports:
        - "7010:7010"
      volumes:
        # The configuration file
        - ./traefik.yaml:/config/traefik.yaml
        # So that Traefik can listen to the Docker events
        - /var/run/docker.sock:/var/run/docker.sock

##### BEGIN FAISS Service Containers #####

# Add one container per FAISS index below.
# Each container should be defined as follows:
  # faiss-<index_name>:
  #   image: kwang2049/faiss-instant:latest
  #   volumes:
  #     - <local_path>:/opt/faiss-instant/resources
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.services.faiss-<index_name>.loadbalancer.server.port=5000"
  #     - "square.datastore=<index_name>"

##### END FAISS Service Containers #####

  datastore_api:
    privileged: true
    build: ./datastore-api
    depends_on:
      - datastore_es
    ports:
      - "7000:7000"
    env_file:
      - ./.env.datastore_api

volumes:
  db-data:
    driver: local
  migrations-data:
    driver: local
  es01:
    driver: local
