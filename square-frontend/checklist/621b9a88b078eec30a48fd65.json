{
    "tests": [
        {
            "test_type": "MFT",
            "capability": "Vocabulary",
            "test_name": "A is COMP than B. Who is more / less COMP??",
            "test_name_description": "Compare person A and person B with different comparative adjective and test's models ability to understand the comparative words",
            "test_type_description": "MFT stands for Minimum Functionality Test. This testing type is inspired from unit testing of software engineering. For this type of testing precise and small testing datasets are created and the models are tested on that particular test set. MFTs are useful particularly for detecting when models use alternative approaches to handle complicated inputs without actually knowing the inside out of the capability. For MFT test cases, labeled test set is required.",
            "capability_description": "This capability tests whether a model has necessary vocabulary and whether it has the ability to handle the importance of different words.",
            "test_cases": [
                {
                    "context": "Marie is weaker than Susan.",
                    "question": "Who is less weak?",
                    "options": [
                        "Susan",
                        "Marie",
                        "None"
                    ],
                    "answer": "Susan",
                    "prediction": "Marie",
                    "success_failed": "failed"
                },
                {
                    "context": "Marie is weaker than Susan.",
                    "question": "Who is weaker?",
                    "options": [
                        "Marie",
                        "Susan",
                        "None"
                    ],
                    "answer": "Marie",
                    "prediction": "Marie",
                    "success_failed": "success"
                },
                {
                    "context": "Kelly is older than Dan.",
                    "question": "Who is less old?",
                    "options": [
                        "Dan",
                        "Kelly",
                        "None"
                    ],
                    "answer": "Dan",
                    "prediction": "Kelly",
                    "success_failed": "failed"
                },
                {
                    "context": "Kelly is older than Dan.",
                    "question": "Who is older?",
                    "options": [
                        "Kelly",
                        "Dan",
                        "None"
                    ],
                    "answer": "Kelly",
                    "prediction": "Kelly",
                    "success_failed": "success"
                },
                {
                    "context": "Alice is stranger than Victoria.",
                    "question": "Who is less strange?",
                    "options": [
                        "Victoria",
                        "Alice",
                        "None"
                    ],
                    "answer": "Victoria",
                    "prediction": "Alice",
                    "success_failed": "failed"
                },
                {
                    "context": "Alice is stranger than Victoria.",
                    "question": "Who is stranger?",
                    "options": [
                        "Alice",
                        "Victoria",
                        "None"
                    ],
                    "answer": "Alice",
                    "prediction": "Alice",
                    "success_failed": "success"
                },
                {
                    "context": "Jean is younger than Sophie.",
                    "question": "Who is less young?",
                    "options": [
                        "Sophie",
                        "Jean",
                        "None"
                    ],
                    "answer": "Sophie",
                    "prediction": "Jean",
                    "success_failed": "failed"
                },
                {
                    "context": "Jean is younger than Sophie.",
                    "question": "Who is younger?",
                    "options": [
                        "Jean",
                        "Sophie",
                        "None"
                    ],
                    "answer": "Jean",
                    "prediction": "Jean",
                    "success_failed": "success"
                },
                {
                    "context": "Eric is slower than Caroline.",
                    "question": "Who is less slow?",
                    "options": [
                        "Caroline",
                        "Eric",
                        "None"
                    ],
                    "answer": "Caroline",
                    "prediction": "Eric",
                    "success_failed": "failed"
                },
                {
                    "context": "Eric is slower than Caroline.",
                    "question": "Who is slower?",
                    "options": [
                        "Eric",
                        "Caroline",
                        "None"
                    ],
                    "answer": "Eric",
                    "prediction": "Eric",
                    "success_failed": "success"
                }
            ],
            "total_cases": 10,
            "failed_cases": 5,
            "success_cases": 5,
            "failure_rate": 50.0,
            "success_rate": 50.0
        },
        {
            "test_type": "MFT",
            "capability": "Vocabulary",
            "test_name": "Intensifiers (very, super, extremely) and reducers (somewhat, kinda)",
            "test_name_description": "Test's model's ability to understand intensifiers(very, super, extremely) and reducers(somewhat, kinda)",
            "test_type_description": "MFT stands for Minimum Functionality Test. This testing type is inspired from unit testing of software engineering. For this type of testing precise and small testing datasets are created and the models are tested on that particular test set. MFTs are useful particularly for detecting when models use alternative approaches to handle complicated inputs without actually knowing the inside out of the capability. For MFT test cases, labeled test set is required.",
            "capability_description": "This capability tests whether a model has necessary vocabulary and whether it has the ability to handle the importance of different words.",
            "test_cases": [
                {
                    "context": "Sandra is very bullish about the project. Jimmy is bullish about the project.",
                    "question": "Who is most bullish about the project?",
                    "options": [
                        "Sandra",
                        "Jimmy",
                        "None"
                    ],
                    "answer": "Sandra",
                    "prediction": "Sandra",
                    "success_failed": "success"
                },
                {
                    "context": "Sandra is very bullish about the project. Jimmy is bullish about the project.",
                    "question": "Who is least bullish about the project?",
                    "options": [
                        "Sandra",
                        "Jimmy",
                        "None"
                    ],
                    "answer": "Jimmy",
                    "prediction": "Jimmy",
                    "success_failed": "success"
                },
                {
                    "context": "Jimmy is bullish about the project. Sandra is very bullish about the project.",
                    "question": "Who is most bullish about the project?",
                    "options": [
                        "Sandra",
                        "Jimmy",
                        "None"
                    ],
                    "answer": "Sandra",
                    "prediction": "Jimmy",
                    "success_failed": "failed"
                },
                {
                    "context": "Jimmy is bullish about the project. Sandra is very bullish about the project.",
                    "question": "Who is least bullish about the project?",
                    "options": [
                        "Sandra",
                        "Jimmy",
                        "None"
                    ],
                    "answer": "Jimmy",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Sandra is bullish about the project. Jimmy is slightly bullish about the project.",
                    "question": "Who is most bullish about the project?",
                    "options": [
                        "Sandra",
                        "Jimmy",
                        "None"
                    ],
                    "answer": "Sandra",
                    "prediction": "Sandra",
                    "success_failed": "success"
                },
                {
                    "context": "Sandra is bullish about the project. Jimmy is slightly bullish about the project.",
                    "question": "Who is least bullish about the project?",
                    "options": [
                        "Sandra",
                        "Jimmy",
                        "None"
                    ],
                    "answer": "Jimmy",
                    "prediction": "Jimmy",
                    "success_failed": "success"
                },
                {
                    "context": "Jimmy is slightly bullish about the project. Sandra is bullish about the project.",
                    "question": "Who is most bullish about the project?",
                    "options": [
                        "Sandra",
                        "Jimmy",
                        "None"
                    ],
                    "answer": "Sandra",
                    "prediction": "Jimmy",
                    "success_failed": "failed"
                },
                {
                    "context": "Jimmy is slightly bullish about the project. Sandra is bullish about the project.",
                    "question": "Who is least bullish about the project?",
                    "options": [
                        "Sandra",
                        "Jimmy",
                        "None"
                    ],
                    "answer": "Jimmy",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Sandra is very bullish about the project. Jimmy is slightly bullish about the project.",
                    "question": "Who is most bullish about the project?",
                    "options": [
                        "Sandra",
                        "Jimmy",
                        "None"
                    ],
                    "answer": "Sandra",
                    "prediction": "Sandra",
                    "success_failed": "success"
                },
                {
                    "context": "Sandra is very bullish about the project. Jimmy is slightly bullish about the project.",
                    "question": "Who is least bullish about the project?",
                    "options": [
                        "Sandra",
                        "Jimmy",
                        "None"
                    ],
                    "answer": "Jimmy",
                    "prediction": "Jimmy",
                    "success_failed": "success"
                },
                {
                    "context": "Jimmy is slightly bullish about the project. Sandra is very bullish about the project.",
                    "question": "Who is most bullish about the project?",
                    "options": [
                        "Sandra",
                        "Jimmy",
                        "None"
                    ],
                    "answer": "Sandra",
                    "prediction": "Jimmy",
                    "success_failed": "failed"
                },
                {
                    "context": "Jimmy is slightly bullish about the project. Sandra is very bullish about the project.",
                    "question": "Who is least bullish about the project?",
                    "options": [
                        "Sandra",
                        "Jimmy",
                        "None"
                    ],
                    "answer": "Jimmy",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Evelyn is extremely serious about the project. Charlotte is serious about the project.",
                    "question": "Who is most serious about the project?",
                    "options": [
                        "Evelyn",
                        "Charlotte",
                        "None"
                    ],
                    "answer": "Evelyn",
                    "prediction": "Evelyn",
                    "success_failed": "success"
                },
                {
                    "context": "Evelyn is extremely serious about the project. Charlotte is serious about the project.",
                    "question": "Who is least serious about the project?",
                    "options": [
                        "Evelyn",
                        "Charlotte",
                        "None"
                    ],
                    "answer": "Charlotte",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Charlotte is serious about the project. Evelyn is extremely serious about the project.",
                    "question": "Who is most serious about the project?",
                    "options": [
                        "Evelyn",
                        "Charlotte",
                        "None"
                    ],
                    "answer": "Evelyn",
                    "prediction": "Charlotte",
                    "success_failed": "failed"
                },
                {
                    "context": "Charlotte is serious about the project. Evelyn is extremely serious about the project.",
                    "question": "Who is least serious about the project?",
                    "options": [
                        "Evelyn",
                        "Charlotte",
                        "None"
                    ],
                    "answer": "Charlotte",
                    "prediction": "Evelyn",
                    "success_failed": "failed"
                },
                {
                    "context": "Evelyn is serious about the project. Charlotte is a little serious about the project.",
                    "question": "Who is most serious about the project?",
                    "options": [
                        "Evelyn",
                        "Charlotte",
                        "None"
                    ],
                    "answer": "Evelyn",
                    "prediction": "Evelyn",
                    "success_failed": "success"
                },
                {
                    "context": "Evelyn is serious about the project. Charlotte is a little serious about the project.",
                    "question": "Who is least serious about the project?",
                    "options": [
                        "Evelyn",
                        "Charlotte",
                        "None"
                    ],
                    "answer": "Charlotte",
                    "prediction": "Charlotte",
                    "success_failed": "success"
                },
                {
                    "context": "Charlotte is a little serious about the project. Evelyn is serious about the project.",
                    "question": "Who is most serious about the project?",
                    "options": [
                        "Evelyn",
                        "Charlotte",
                        "None"
                    ],
                    "answer": "Evelyn",
                    "prediction": "Charlotte",
                    "success_failed": "failed"
                },
                {
                    "context": "Charlotte is a little serious about the project. Evelyn is serious about the project.",
                    "question": "Who is least serious about the project?",
                    "options": [
                        "Evelyn",
                        "Charlotte",
                        "None"
                    ],
                    "answer": "Charlotte",
                    "prediction": "Evelyn",
                    "success_failed": "failed"
                },
                {
                    "context": "Evelyn is extremely serious about the project. Charlotte is a little serious about the project.",
                    "question": "Who is most serious about the project?",
                    "options": [
                        "Evelyn",
                        "Charlotte",
                        "None"
                    ],
                    "answer": "Evelyn",
                    "prediction": "Evelyn",
                    "success_failed": "success"
                },
                {
                    "context": "Evelyn is extremely serious about the project. Charlotte is a little serious about the project.",
                    "question": "Who is least serious about the project?",
                    "options": [
                        "Evelyn",
                        "Charlotte",
                        "None"
                    ],
                    "answer": "Charlotte",
                    "prediction": "Charlotte",
                    "success_failed": "success"
                },
                {
                    "context": "Charlotte is a little serious about the project. Evelyn is extremely serious about the project.",
                    "question": "Who is most serious about the project?",
                    "options": [
                        "Evelyn",
                        "Charlotte",
                        "None"
                    ],
                    "answer": "Evelyn",
                    "prediction": "Charlotte",
                    "success_failed": "failed"
                },
                {
                    "context": "Charlotte is a little serious about the project. Evelyn is extremely serious about the project.",
                    "question": "Who is least serious about the project?",
                    "options": [
                        "Evelyn",
                        "Charlotte",
                        "None"
                    ],
                    "answer": "Charlotte",
                    "prediction": "Evelyn",
                    "success_failed": "failed"
                },
                {
                    "context": "Ian is extremely upbeat about the project. Andrew is upbeat about the project.",
                    "question": "Who is most upbeat about the project?",
                    "options": [
                        "Ian",
                        "Andrew",
                        "None"
                    ],
                    "answer": "Ian",
                    "prediction": "Andrew",
                    "success_failed": "failed"
                },
                {
                    "context": "Ian is extremely upbeat about the project. Andrew is upbeat about the project.",
                    "question": "Who is least upbeat about the project?",
                    "options": [
                        "Ian",
                        "Andrew",
                        "None"
                    ],
                    "answer": "Andrew",
                    "prediction": "Andrew",
                    "success_failed": "success"
                },
                {
                    "context": "Andrew is upbeat about the project. Ian is extremely upbeat about the project.",
                    "question": "Who is most upbeat about the project?",
                    "options": [
                        "Ian",
                        "Andrew",
                        "None"
                    ],
                    "answer": "Ian",
                    "prediction": "Andrew",
                    "success_failed": "failed"
                },
                {
                    "context": "Andrew is upbeat about the project. Ian is extremely upbeat about the project.",
                    "question": "Who is least upbeat about the project?",
                    "options": [
                        "Ian",
                        "Andrew",
                        "None"
                    ],
                    "answer": "Andrew",
                    "prediction": "Andrew",
                    "success_failed": "success"
                },
                {
                    "context": "Ian is upbeat about the project. Andrew is a little upbeat about the project.",
                    "question": "Who is most upbeat about the project?",
                    "options": [
                        "Ian",
                        "Andrew",
                        "None"
                    ],
                    "answer": "Ian",
                    "prediction": "Andrew",
                    "success_failed": "failed"
                },
                {
                    "context": "Ian is upbeat about the project. Andrew is a little upbeat about the project.",
                    "question": "Who is least upbeat about the project?",
                    "options": [
                        "Ian",
                        "Andrew",
                        "None"
                    ],
                    "answer": "Andrew",
                    "prediction": "Andrew",
                    "success_failed": "success"
                },
                {
                    "context": "Andrew is a little upbeat about the project. Ian is upbeat about the project.",
                    "question": "Who is most upbeat about the project?",
                    "options": [
                        "Ian",
                        "Andrew",
                        "None"
                    ],
                    "answer": "Ian",
                    "prediction": "Andrew",
                    "success_failed": "failed"
                },
                {
                    "context": "Andrew is a little upbeat about the project. Ian is upbeat about the project.",
                    "question": "Who is least upbeat about the project?",
                    "options": [
                        "Ian",
                        "Andrew",
                        "None"
                    ],
                    "answer": "Andrew",
                    "prediction": "Andrew",
                    "success_failed": "success"
                },
                {
                    "context": "Ian is extremely upbeat about the project. Andrew is a little upbeat about the project.",
                    "question": "Who is most upbeat about the project?",
                    "options": [
                        "Ian",
                        "Andrew",
                        "None"
                    ],
                    "answer": "Ian",
                    "prediction": "Ian",
                    "success_failed": "success"
                },
                {
                    "context": "Ian is extremely upbeat about the project. Andrew is a little upbeat about the project.",
                    "question": "Who is least upbeat about the project?",
                    "options": [
                        "Ian",
                        "Andrew",
                        "None"
                    ],
                    "answer": "Andrew",
                    "prediction": "Andrew",
                    "success_failed": "success"
                },
                {
                    "context": "Andrew is a little upbeat about the project. Ian is extremely upbeat about the project.",
                    "question": "Who is most upbeat about the project?",
                    "options": [
                        "Ian",
                        "Andrew",
                        "None"
                    ],
                    "answer": "Ian",
                    "prediction": "Andrew",
                    "success_failed": "failed"
                },
                {
                    "context": "Andrew is a little upbeat about the project. Ian is extremely upbeat about the project.",
                    "question": "Who is least upbeat about the project?",
                    "options": [
                        "Ian",
                        "Andrew",
                        "None"
                    ],
                    "answer": "Andrew",
                    "prediction": "Andrew",
                    "success_failed": "success"
                },
                {
                    "context": "Fiona is super curious about the project. Lawrence is curious about the project.",
                    "question": "Who is most curious about the project?",
                    "options": [
                        "Fiona",
                        "Lawrence",
                        "None"
                    ],
                    "answer": "Fiona",
                    "prediction": "Lawrence",
                    "success_failed": "failed"
                },
                {
                    "context": "Fiona is super curious about the project. Lawrence is curious about the project.",
                    "question": "Who is least curious about the project?",
                    "options": [
                        "Fiona",
                        "Lawrence",
                        "None"
                    ],
                    "answer": "Lawrence",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Lawrence is curious about the project. Fiona is super curious about the project.",
                    "question": "Who is most curious about the project?",
                    "options": [
                        "Fiona",
                        "Lawrence",
                        "None"
                    ],
                    "answer": "Fiona",
                    "prediction": "Lawrence",
                    "success_failed": "failed"
                },
                {
                    "context": "Lawrence is curious about the project. Fiona is super curious about the project.",
                    "question": "Who is least curious about the project?",
                    "options": [
                        "Fiona",
                        "Lawrence",
                        "None"
                    ],
                    "answer": "Lawrence",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Fiona is curious about the project. Lawrence is a little curious about the project.",
                    "question": "Who is most curious about the project?",
                    "options": [
                        "Fiona",
                        "Lawrence",
                        "None"
                    ],
                    "answer": "Fiona",
                    "prediction": "Lawrence",
                    "success_failed": "failed"
                },
                {
                    "context": "Fiona is curious about the project. Lawrence is a little curious about the project.",
                    "question": "Who is least curious about the project?",
                    "options": [
                        "Fiona",
                        "Lawrence",
                        "None"
                    ],
                    "answer": "Lawrence",
                    "prediction": "Fiona",
                    "success_failed": "failed"
                },
                {
                    "context": "Lawrence is a little curious about the project. Fiona is curious about the project.",
                    "question": "Who is most curious about the project?",
                    "options": [
                        "Fiona",
                        "Lawrence",
                        "None"
                    ],
                    "answer": "Fiona",
                    "prediction": "Lawrence",
                    "success_failed": "failed"
                },
                {
                    "context": "Lawrence is a little curious about the project. Fiona is curious about the project.",
                    "question": "Who is least curious about the project?",
                    "options": [
                        "Fiona",
                        "Lawrence",
                        "None"
                    ],
                    "answer": "Lawrence",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Fiona is super curious about the project. Lawrence is a little curious about the project.",
                    "question": "Who is most curious about the project?",
                    "options": [
                        "Fiona",
                        "Lawrence",
                        "None"
                    ],
                    "answer": "Fiona",
                    "prediction": "Lawrence",
                    "success_failed": "failed"
                },
                {
                    "context": "Fiona is super curious about the project. Lawrence is a little curious about the project.",
                    "question": "Who is least curious about the project?",
                    "options": [
                        "Fiona",
                        "Lawrence",
                        "None"
                    ],
                    "answer": "Lawrence",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Lawrence is a little curious about the project. Fiona is super curious about the project.",
                    "question": "Who is most curious about the project?",
                    "options": [
                        "Fiona",
                        "Lawrence",
                        "None"
                    ],
                    "answer": "Fiona",
                    "prediction": "Lawrence",
                    "success_failed": "failed"
                },
                {
                    "context": "Lawrence is a little curious about the project. Fiona is super curious about the project.",
                    "question": "Who is least curious about the project?",
                    "options": [
                        "Fiona",
                        "Lawrence",
                        "None"
                    ],
                    "answer": "Lawrence",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Edward is extremely particular about the project. Patricia is particular about the project.",
                    "question": "Who is most particular about the project?",
                    "options": [
                        "Edward",
                        "Patricia",
                        "None"
                    ],
                    "answer": "Edward",
                    "prediction": "Edward",
                    "success_failed": "success"
                },
                {
                    "context": "Edward is extremely particular about the project. Patricia is particular about the project.",
                    "question": "Who is least particular about the project?",
                    "options": [
                        "Edward",
                        "Patricia",
                        "None"
                    ],
                    "answer": "Patricia",
                    "prediction": "Patricia",
                    "success_failed": "success"
                },
                {
                    "context": "Patricia is particular about the project. Edward is extremely particular about the project.",
                    "question": "Who is most particular about the project?",
                    "options": [
                        "Edward",
                        "Patricia",
                        "None"
                    ],
                    "answer": "Edward",
                    "prediction": "Edward",
                    "success_failed": "success"
                },
                {
                    "context": "Patricia is particular about the project. Edward is extremely particular about the project.",
                    "question": "Who is least particular about the project?",
                    "options": [
                        "Edward",
                        "Patricia",
                        "None"
                    ],
                    "answer": "Patricia",
                    "prediction": "Patricia",
                    "success_failed": "success"
                },
                {
                    "context": "Edward is particular about the project. Patricia is somewhat particular about the project.",
                    "question": "Who is most particular about the project?",
                    "options": [
                        "Edward",
                        "Patricia",
                        "None"
                    ],
                    "answer": "Edward",
                    "prediction": "Edward",
                    "success_failed": "success"
                },
                {
                    "context": "Edward is particular about the project. Patricia is somewhat particular about the project.",
                    "question": "Who is least particular about the project?",
                    "options": [
                        "Edward",
                        "Patricia",
                        "None"
                    ],
                    "answer": "Patricia",
                    "prediction": "Patricia",
                    "success_failed": "success"
                },
                {
                    "context": "Patricia is somewhat particular about the project. Edward is particular about the project.",
                    "question": "Who is most particular about the project?",
                    "options": [
                        "Edward",
                        "Patricia",
                        "None"
                    ],
                    "answer": "Edward",
                    "prediction": "Patricia",
                    "success_failed": "failed"
                },
                {
                    "context": "Patricia is somewhat particular about the project. Edward is particular about the project.",
                    "question": "Who is least particular about the project?",
                    "options": [
                        "Edward",
                        "Patricia",
                        "None"
                    ],
                    "answer": "Patricia",
                    "prediction": "Patricia",
                    "success_failed": "success"
                },
                {
                    "context": "Edward is extremely particular about the project. Patricia is somewhat particular about the project.",
                    "question": "Who is most particular about the project?",
                    "options": [
                        "Edward",
                        "Patricia",
                        "None"
                    ],
                    "answer": "Edward",
                    "prediction": "Edward",
                    "success_failed": "success"
                },
                {
                    "context": "Edward is extremely particular about the project. Patricia is somewhat particular about the project.",
                    "question": "Who is least particular about the project?",
                    "options": [
                        "Edward",
                        "Patricia",
                        "None"
                    ],
                    "answer": "Patricia",
                    "prediction": "Patricia",
                    "success_failed": "success"
                },
                {
                    "context": "Patricia is somewhat particular about the project. Edward is extremely particular about the project.",
                    "question": "Who is most particular about the project?",
                    "options": [
                        "Edward",
                        "Patricia",
                        "None"
                    ],
                    "answer": "Edward",
                    "prediction": "Edward",
                    "success_failed": "success"
                },
                {
                    "context": "Patricia is somewhat particular about the project. Edward is extremely particular about the project.",
                    "question": "Who is least particular about the project?",
                    "options": [
                        "Edward",
                        "Patricia",
                        "None"
                    ],
                    "answer": "Patricia",
                    "prediction": "Patricia",
                    "success_failed": "success"
                }
            ],
            "total_cases": 60,
            "failed_cases": 31,
            "success_cases": 29,
            "failure_rate": 51.67,
            "success_rate": 48.33
        },
        {
            "test_type": "MFT",
            "capability": "Taxonomy",
            "test_name": "size, shape, age, color",
            "test_name_description": "Test's model's ability to understand size, shape, age, color",
            "test_type_description": "MFT stands for Minimum Functionality Test. This testing type is inspired from unit testing of software engineering. For this type of testing precise and small testing datasets are created and the models are tested on that particular test set. MFTs are useful particularly for detecting when models use alternative approaches to handle complicated inputs without actually knowing the inside out of the capability. For MFT test cases, labeled test set is required.",
            "capability_description": "This capability tests whether a model has the ability to handle synonyms, antonyms, object size, shape, profession etc.",
            "test_cases": [
                {
                    "context": "There is a new purple toy in the room.",
                    "question": "What age is the toy?",
                    "options": [
                        "new",
                        "purple",
                        "None"
                    ],
                    "answer": "new",
                    "prediction": "purple",
                    "success_failed": "failed"
                },
                {
                    "context": "There is a new purple toy in the room.",
                    "question": "What color is the toy?",
                    "options": [
                        "new",
                        "purple",
                        "None"
                    ],
                    "answer": "purple",
                    "prediction": "purple",
                    "success_failed": "success"
                },
                {
                    "context": "There is a toy in the room. The toy is new and purple.",
                    "question": "What age is the toy?",
                    "options": [
                        "new",
                        "purple",
                        "None"
                    ],
                    "answer": "new",
                    "prediction": "new",
                    "success_failed": "success"
                },
                {
                    "context": "There is a toy in the room. The toy is new and purple.",
                    "question": "What color is the toy?",
                    "options": [
                        "new",
                        "purple",
                        "None"
                    ],
                    "answer": "purple",
                    "prediction": "purple",
                    "success_failed": "success"
                },
                {
                    "context": "There is an old blue toy in the room.",
                    "question": "What age is the toy?",
                    "options": [
                        "old",
                        "blue",
                        "None"
                    ],
                    "answer": "old",
                    "prediction": "old",
                    "success_failed": "success"
                },
                {
                    "context": "There is an old blue toy in the room.",
                    "question": "What color is the toy?",
                    "options": [
                        "old",
                        "blue",
                        "None"
                    ],
                    "answer": "blue",
                    "prediction": "blue",
                    "success_failed": "success"
                },
                {
                    "context": "There is a toy in the room. The toy is old and blue.",
                    "question": "What age is the toy?",
                    "options": [
                        "old",
                        "blue",
                        "None"
                    ],
                    "answer": "old",
                    "prediction": "old",
                    "success_failed": "success"
                },
                {
                    "context": "There is a toy in the room. The toy is old and blue.",
                    "question": "What color is the toy?",
                    "options": [
                        "old",
                        "blue",
                        "None"
                    ],
                    "answer": "blue",
                    "prediction": "blue",
                    "success_failed": "success"
                },
                {
                    "context": "There is a round grey object in the room.",
                    "question": "What shape is the object?",
                    "options": [
                        "round",
                        "grey",
                        "None"
                    ],
                    "answer": "round",
                    "prediction": "grey",
                    "success_failed": "failed"
                },
                {
                    "context": "There is a round grey object in the room.",
                    "question": "What color is the object?",
                    "options": [
                        "round",
                        "grey",
                        "None"
                    ],
                    "answer": "grey",
                    "prediction": "grey",
                    "success_failed": "success"
                },
                {
                    "context": "There is an object in the room. The object is round and grey.",
                    "question": "What shape is the object?",
                    "options": [
                        "round",
                        "grey",
                        "None"
                    ],
                    "answer": "round",
                    "prediction": "grey",
                    "success_failed": "failed"
                },
                {
                    "context": "There is an object in the room. The object is round and grey.",
                    "question": "What color is the object?",
                    "options": [
                        "round",
                        "grey",
                        "None"
                    ],
                    "answer": "grey",
                    "prediction": "grey",
                    "success_failed": "success"
                },
                {
                    "context": "There is a round old toy in the room.",
                    "question": "What shape is the toy?",
                    "options": [
                        "round",
                        "old",
                        "None"
                    ],
                    "answer": "round",
                    "prediction": "round",
                    "success_failed": "success"
                },
                {
                    "context": "There is a round old toy in the room.",
                    "question": "What age is the toy?",
                    "options": [
                        "round",
                        "old",
                        "None"
                    ],
                    "answer": "old",
                    "prediction": "old",
                    "success_failed": "success"
                },
                {
                    "context": "There is a toy in the room. The toy is round and old.",
                    "question": "What shape is the toy?",
                    "options": [
                        "round",
                        "old",
                        "None"
                    ],
                    "answer": "round",
                    "prediction": "old",
                    "success_failed": "failed"
                },
                {
                    "context": "There is a toy in the room. The toy is round and old.",
                    "question": "What age is the toy?",
                    "options": [
                        "round",
                        "old",
                        "None"
                    ],
                    "answer": "old",
                    "prediction": "old",
                    "success_failed": "success"
                },
                {
                    "context": "There is a small square toy in the room.",
                    "question": "What size is the toy?",
                    "options": [
                        "small",
                        "square",
                        "None"
                    ],
                    "answer": "small",
                    "prediction": "square",
                    "success_failed": "failed"
                },
                {
                    "context": "There is a small square toy in the room.",
                    "question": "What shape is the toy?",
                    "options": [
                        "small",
                        "square",
                        "None"
                    ],
                    "answer": "square",
                    "prediction": "square",
                    "success_failed": "success"
                },
                {
                    "context": "There is a toy in the room. The toy is small and square.",
                    "question": "What size is the toy?",
                    "options": [
                        "small",
                        "square",
                        "None"
                    ],
                    "answer": "small",
                    "prediction": "square",
                    "success_failed": "failed"
                },
                {
                    "context": "There is a toy in the room. The toy is small and square.",
                    "question": "What shape is the toy?",
                    "options": [
                        "small",
                        "square",
                        "None"
                    ],
                    "answer": "square",
                    "prediction": "square",
                    "success_failed": "success"
                }
            ],
            "total_cases": 20,
            "failed_cases": 6,
            "success_cases": 14,
            "failure_rate": 30.0,
            "success_rate": 70.0
        },
        {
            "test_type": "MFT",
            "capability": "Taxonomy",
            "test_name": "Profession vs nationality",
            "test_name_description": "Test's model's ability to understand profession and nationality",
            "test_type_description": "MFT stands for Minimum Functionality Test. This testing type is inspired from unit testing of software engineering. For this type of testing precise and small testing datasets are created and the models are tested on that particular test set. MFTs are useful particularly for detecting when models use alternative approaches to handle complicated inputs without actually knowing the inside out of the capability. For MFT test cases, labeled test set is required.",
            "capability_description": "This capability tests whether a model has the ability to handle synonyms, antonyms, object size, shape, profession etc.",
            "test_cases": [
                {
                    "context": "Rose is an Indian secretary.",
                    "question": "What is Rose's job?",
                    "options": [
                        "secretary",
                        "Indian",
                        "None"
                    ],
                    "answer": "secretary",
                    "prediction": "secretary",
                    "success_failed": "success"
                },
                {
                    "context": "Rose is an Indian secretary.",
                    "question": "What is Rose's nationality?",
                    "options": [
                        "secretary",
                        "Indian",
                        "None"
                    ],
                    "answer": "Indian",
                    "prediction": "Indian",
                    "success_failed": "success"
                },
                {
                    "context": "Rose is a secretary. Rose is Indian.",
                    "question": "What is Rose's job?",
                    "options": [
                        "secretary",
                        "Indian",
                        "None"
                    ],
                    "answer": "secretary",
                    "prediction": "secretary",
                    "success_failed": "success"
                },
                {
                    "context": "Rose is a secretary. Rose is Indian.",
                    "question": "What is Rose's nationality?",
                    "options": [
                        "secretary",
                        "Indian",
                        "None"
                    ],
                    "answer": "Indian",
                    "prediction": "Indian",
                    "success_failed": "success"
                },
                {
                    "context": "Rose is Indian. Rose is a secretary.",
                    "question": "What is Rose's job?",
                    "options": [
                        "secretary",
                        "Indian",
                        "None"
                    ],
                    "answer": "secretary",
                    "prediction": "secretary",
                    "success_failed": "success"
                },
                {
                    "context": "Rose is Indian. Rose is a secretary.",
                    "question": "What is Rose's nationality?",
                    "options": [
                        "secretary",
                        "Indian",
                        "None"
                    ],
                    "answer": "Indian",
                    "prediction": "Indian",
                    "success_failed": "success"
                },
                {
                    "context": "Rose is Indian and a secretary.",
                    "question": "What is Rose's job?",
                    "options": [
                        "secretary",
                        "Indian",
                        "None"
                    ],
                    "answer": "secretary",
                    "prediction": "secretary",
                    "success_failed": "success"
                },
                {
                    "context": "Rose is Indian and a secretary.",
                    "question": "What is Rose's nationality?",
                    "options": [
                        "secretary",
                        "Indian",
                        "None"
                    ],
                    "answer": "Indian",
                    "prediction": "Indian",
                    "success_failed": "success"
                },
                {
                    "context": "Rose is a secretary and Indian.",
                    "question": "What is Rose's job?",
                    "options": [
                        "secretary",
                        "Indian",
                        "None"
                    ],
                    "answer": "secretary",
                    "prediction": "Indian",
                    "success_failed": "failed"
                },
                {
                    "context": "Rose is a secretary and Indian.",
                    "question": "What is Rose's nationality?",
                    "options": [
                        "secretary",
                        "Indian",
                        "None"
                    ],
                    "answer": "Indian",
                    "prediction": "Indian",
                    "success_failed": "success"
                },
                {
                    "context": "Marilyn is an American intern.",
                    "question": "What is Marilyn's job?",
                    "options": [
                        "intern",
                        "American",
                        "None"
                    ],
                    "answer": "intern",
                    "prediction": "intern",
                    "success_failed": "success"
                },
                {
                    "context": "Marilyn is an American intern.",
                    "question": "What is Marilyn's nationality?",
                    "options": [
                        "intern",
                        "American",
                        "None"
                    ],
                    "answer": "American",
                    "prediction": "American",
                    "success_failed": "success"
                },
                {
                    "context": "Marilyn is an intern. Marilyn is American.",
                    "question": "What is Marilyn's job?",
                    "options": [
                        "intern",
                        "American",
                        "None"
                    ],
                    "answer": "intern",
                    "prediction": "intern",
                    "success_failed": "success"
                },
                {
                    "context": "Marilyn is an intern. Marilyn is American.",
                    "question": "What is Marilyn's nationality?",
                    "options": [
                        "intern",
                        "American",
                        "None"
                    ],
                    "answer": "American",
                    "prediction": "American",
                    "success_failed": "success"
                },
                {
                    "context": "Marilyn is American. Marilyn is an intern.",
                    "question": "What is Marilyn's job?",
                    "options": [
                        "intern",
                        "American",
                        "None"
                    ],
                    "answer": "intern",
                    "prediction": "intern",
                    "success_failed": "success"
                },
                {
                    "context": "Marilyn is American. Marilyn is an intern.",
                    "question": "What is Marilyn's nationality?",
                    "options": [
                        "intern",
                        "American",
                        "None"
                    ],
                    "answer": "American",
                    "prediction": "American",
                    "success_failed": "success"
                },
                {
                    "context": "Marilyn is American and an intern.",
                    "question": "What is Marilyn's job?",
                    "options": [
                        "intern",
                        "American",
                        "None"
                    ],
                    "answer": "intern",
                    "prediction": "intern",
                    "success_failed": "success"
                },
                {
                    "context": "Marilyn is American and an intern.",
                    "question": "What is Marilyn's nationality?",
                    "options": [
                        "intern",
                        "American",
                        "None"
                    ],
                    "answer": "American",
                    "prediction": "American",
                    "success_failed": "success"
                },
                {
                    "context": "Marilyn is an intern and American.",
                    "question": "What is Marilyn's job?",
                    "options": [
                        "intern",
                        "American",
                        "None"
                    ],
                    "answer": "intern",
                    "prediction": "intern",
                    "success_failed": "success"
                },
                {
                    "context": "Marilyn is an intern and American.",
                    "question": "What is Marilyn's nationality?",
                    "options": [
                        "intern",
                        "American",
                        "None"
                    ],
                    "answer": "American",
                    "prediction": "American",
                    "success_failed": "success"
                },
                {
                    "context": "Samuel is a Japanese escort.",
                    "question": "What is Samuel's job?",
                    "options": [
                        "escort",
                        "Japanese",
                        "None"
                    ],
                    "answer": "escort",
                    "prediction": "escort",
                    "success_failed": "success"
                },
                {
                    "context": "Samuel is a Japanese escort.",
                    "question": "What is Samuel's nationality?",
                    "options": [
                        "escort",
                        "Japanese",
                        "None"
                    ],
                    "answer": "Japanese",
                    "prediction": "Japanese",
                    "success_failed": "success"
                },
                {
                    "context": "Samuel is an escort. Samuel is Japanese.",
                    "question": "What is Samuel's job?",
                    "options": [
                        "escort",
                        "Japanese",
                        "None"
                    ],
                    "answer": "escort",
                    "prediction": "escort",
                    "success_failed": "success"
                },
                {
                    "context": "Samuel is an escort. Samuel is Japanese.",
                    "question": "What is Samuel's nationality?",
                    "options": [
                        "escort",
                        "Japanese",
                        "None"
                    ],
                    "answer": "Japanese",
                    "prediction": "Japanese",
                    "success_failed": "success"
                },
                {
                    "context": "Samuel is Japanese. Samuel is an escort.",
                    "question": "What is Samuel's job?",
                    "options": [
                        "escort",
                        "Japanese",
                        "None"
                    ],
                    "answer": "escort",
                    "prediction": "escort",
                    "success_failed": "success"
                },
                {
                    "context": "Samuel is Japanese. Samuel is an escort.",
                    "question": "What is Samuel's nationality?",
                    "options": [
                        "escort",
                        "Japanese",
                        "None"
                    ],
                    "answer": "Japanese",
                    "prediction": "Japanese",
                    "success_failed": "success"
                },
                {
                    "context": "Samuel is Japanese and an escort.",
                    "question": "What is Samuel's job?",
                    "options": [
                        "escort",
                        "Japanese",
                        "None"
                    ],
                    "answer": "escort",
                    "prediction": "escort",
                    "success_failed": "success"
                },
                {
                    "context": "Samuel is Japanese and an escort.",
                    "question": "What is Samuel's nationality?",
                    "options": [
                        "escort",
                        "Japanese",
                        "None"
                    ],
                    "answer": "Japanese",
                    "prediction": "Japanese",
                    "success_failed": "success"
                },
                {
                    "context": "Samuel is an escort and Japanese.",
                    "question": "What is Samuel's job?",
                    "options": [
                        "escort",
                        "Japanese",
                        "None"
                    ],
                    "answer": "escort",
                    "prediction": "escort",
                    "success_failed": "success"
                },
                {
                    "context": "Samuel is an escort and Japanese.",
                    "question": "What is Samuel's nationality?",
                    "options": [
                        "escort",
                        "Japanese",
                        "None"
                    ],
                    "answer": "Japanese",
                    "prediction": "Japanese",
                    "success_failed": "success"
                },
                {
                    "context": "Ryan is an Indian analyst.",
                    "question": "What is Ryan's job?",
                    "options": [
                        "analyst",
                        "Indian",
                        "None"
                    ],
                    "answer": "analyst",
                    "prediction": "analyst",
                    "success_failed": "success"
                },
                {
                    "context": "Ryan is an Indian analyst.",
                    "question": "What is Ryan's nationality?",
                    "options": [
                        "analyst",
                        "Indian",
                        "None"
                    ],
                    "answer": "Indian",
                    "prediction": "Indian",
                    "success_failed": "success"
                },
                {
                    "context": "Ryan is an analyst. Ryan is Indian.",
                    "question": "What is Ryan's job?",
                    "options": [
                        "analyst",
                        "Indian",
                        "None"
                    ],
                    "answer": "analyst",
                    "prediction": "analyst",
                    "success_failed": "success"
                },
                {
                    "context": "Ryan is an analyst. Ryan is Indian.",
                    "question": "What is Ryan's nationality?",
                    "options": [
                        "analyst",
                        "Indian",
                        "None"
                    ],
                    "answer": "Indian",
                    "prediction": "Indian",
                    "success_failed": "success"
                },
                {
                    "context": "Ryan is Indian. Ryan is an analyst.",
                    "question": "What is Ryan's job?",
                    "options": [
                        "analyst",
                        "Indian",
                        "None"
                    ],
                    "answer": "analyst",
                    "prediction": "analyst",
                    "success_failed": "success"
                },
                {
                    "context": "Ryan is Indian. Ryan is an analyst.",
                    "question": "What is Ryan's nationality?",
                    "options": [
                        "analyst",
                        "Indian",
                        "None"
                    ],
                    "answer": "Indian",
                    "prediction": "Indian",
                    "success_failed": "success"
                },
                {
                    "context": "Ryan is Indian and an analyst.",
                    "question": "What is Ryan's job?",
                    "options": [
                        "analyst",
                        "Indian",
                        "None"
                    ],
                    "answer": "analyst",
                    "prediction": "analyst",
                    "success_failed": "success"
                },
                {
                    "context": "Ryan is Indian and an analyst.",
                    "question": "What is Ryan's nationality?",
                    "options": [
                        "analyst",
                        "Indian",
                        "None"
                    ],
                    "answer": "Indian",
                    "prediction": "Indian",
                    "success_failed": "success"
                },
                {
                    "context": "Ryan is an analyst and Indian.",
                    "question": "What is Ryan's job?",
                    "options": [
                        "analyst",
                        "Indian",
                        "None"
                    ],
                    "answer": "analyst",
                    "prediction": "Indian",
                    "success_failed": "failed"
                },
                {
                    "context": "Ryan is an analyst and Indian.",
                    "question": "What is Ryan's nationality?",
                    "options": [
                        "analyst",
                        "Indian",
                        "None"
                    ],
                    "answer": "Indian",
                    "prediction": "Indian",
                    "success_failed": "success"
                },
                {
                    "context": "Dan is a Pakistani reporter.",
                    "question": "What is Dan's job?",
                    "options": [
                        "reporter",
                        "Pakistani",
                        "None"
                    ],
                    "answer": "reporter",
                    "prediction": "reporter",
                    "success_failed": "success"
                },
                {
                    "context": "Dan is a Pakistani reporter.",
                    "question": "What is Dan's nationality?",
                    "options": [
                        "reporter",
                        "Pakistani",
                        "None"
                    ],
                    "answer": "Pakistani",
                    "prediction": "Pakistani",
                    "success_failed": "success"
                },
                {
                    "context": "Dan is a reporter. Dan is Pakistani.",
                    "question": "What is Dan's job?",
                    "options": [
                        "reporter",
                        "Pakistani",
                        "None"
                    ],
                    "answer": "reporter",
                    "prediction": "reporter",
                    "success_failed": "success"
                },
                {
                    "context": "Dan is a reporter. Dan is Pakistani.",
                    "question": "What is Dan's nationality?",
                    "options": [
                        "reporter",
                        "Pakistani",
                        "None"
                    ],
                    "answer": "Pakistani",
                    "prediction": "Pakistani",
                    "success_failed": "success"
                },
                {
                    "context": "Dan is Pakistani. Dan is a reporter.",
                    "question": "What is Dan's job?",
                    "options": [
                        "reporter",
                        "Pakistani",
                        "None"
                    ],
                    "answer": "reporter",
                    "prediction": "reporter",
                    "success_failed": "success"
                },
                {
                    "context": "Dan is Pakistani. Dan is a reporter.",
                    "question": "What is Dan's nationality?",
                    "options": [
                        "reporter",
                        "Pakistani",
                        "None"
                    ],
                    "answer": "Pakistani",
                    "prediction": "Pakistani",
                    "success_failed": "success"
                },
                {
                    "context": "Dan is Pakistani and a reporter.",
                    "question": "What is Dan's job?",
                    "options": [
                        "reporter",
                        "Pakistani",
                        "None"
                    ],
                    "answer": "reporter",
                    "prediction": "reporter",
                    "success_failed": "success"
                },
                {
                    "context": "Dan is Pakistani and a reporter.",
                    "question": "What is Dan's nationality?",
                    "options": [
                        "reporter",
                        "Pakistani",
                        "None"
                    ],
                    "answer": "Pakistani",
                    "prediction": "Pakistani",
                    "success_failed": "success"
                },
                {
                    "context": "Dan is a reporter and Pakistani.",
                    "question": "What is Dan's job?",
                    "options": [
                        "reporter",
                        "Pakistani",
                        "None"
                    ],
                    "answer": "reporter",
                    "prediction": "reporter",
                    "success_failed": "success"
                },
                {
                    "context": "Dan is a reporter and Pakistani.",
                    "question": "What is Dan's nationality?",
                    "options": [
                        "reporter",
                        "Pakistani",
                        "None"
                    ],
                    "answer": "Pakistani",
                    "prediction": "Pakistani",
                    "success_failed": "success"
                }
            ],
            "total_cases": 50,
            "failed_cases": 2,
            "success_cases": 48,
            "failure_rate": 4.0,
            "success_rate": 96.0
        },
        {
            "test_type": "MFT",
            "capability": "Taxonomy",
            "test_name": "Animal vs Vehicle",
            "test_name_description": "Test's model's ability to understand different animals and vehicles.",
            "test_type_description": "MFT stands for Minimum Functionality Test. This testing type is inspired from unit testing of software engineering. For this type of testing precise and small testing datasets are created and the models are tested on that particular test set. MFTs are useful particularly for detecting when models use alternative approaches to handle complicated inputs without actually knowing the inside out of the capability. For MFT test cases, labeled test set is required.",
            "capability_description": "This capability tests whether a model has the ability to handle synonyms, antonyms, object size, shape, profession etc.",
            "test_cases": [
                {
                    "context": "George has a bull and a car.",
                    "question": "What animal does George have?",
                    "options": [
                        "bull",
                        "car",
                        "None"
                    ],
                    "answer": "bull",
                    "prediction": "car",
                    "success_failed": "failed"
                },
                {
                    "context": "George has a bull and a car.",
                    "question": "What vehicle does George have?",
                    "options": [
                        "bull",
                        "car",
                        "None"
                    ],
                    "answer": "car",
                    "prediction": "car",
                    "success_failed": "success"
                },
                {
                    "context": "George has a car and a bull.",
                    "question": "What animal does George have?",
                    "options": [
                        "bull",
                        "car",
                        "None"
                    ],
                    "answer": "bull",
                    "prediction": "bull",
                    "success_failed": "success"
                },
                {
                    "context": "George has a car and a bull.",
                    "question": "What vehicle does George have?",
                    "options": [
                        "bull",
                        "car",
                        "None"
                    ],
                    "answer": "car",
                    "prediction": "bull",
                    "success_failed": "failed"
                },
                {
                    "context": "Francis has a cow and a tractor.",
                    "question": "What animal does Francis have?",
                    "options": [
                        "cow",
                        "tractor",
                        "None"
                    ],
                    "answer": "cow",
                    "prediction": "tractor",
                    "success_failed": "failed"
                },
                {
                    "context": "Francis has a cow and a tractor.",
                    "question": "What vehicle does Francis have?",
                    "options": [
                        "cow",
                        "tractor",
                        "None"
                    ],
                    "answer": "tractor",
                    "prediction": "tractor",
                    "success_failed": "success"
                },
                {
                    "context": "Francis has a tractor and a cow.",
                    "question": "What animal does Francis have?",
                    "options": [
                        "cow",
                        "tractor",
                        "None"
                    ],
                    "answer": "cow",
                    "prediction": "tractor",
                    "success_failed": "failed"
                },
                {
                    "context": "Francis has a tractor and a cow.",
                    "question": "What vehicle does Francis have?",
                    "options": [
                        "cow",
                        "tractor",
                        "None"
                    ],
                    "answer": "tractor",
                    "prediction": "tractor",
                    "success_failed": "success"
                },
                {
                    "context": "Emily has a dog and a motorcycle.",
                    "question": "What animal does Emily have?",
                    "options": [
                        "dog",
                        "motorcycle",
                        "None"
                    ],
                    "answer": "dog",
                    "prediction": "motorcycle",
                    "success_failed": "failed"
                },
                {
                    "context": "Emily has a dog and a motorcycle.",
                    "question": "What vehicle does Emily have?",
                    "options": [
                        "dog",
                        "motorcycle",
                        "None"
                    ],
                    "answer": "motorcycle",
                    "prediction": "motorcycle",
                    "success_failed": "success"
                },
                {
                    "context": "Emily has a motorcycle and a dog.",
                    "question": "What animal does Emily have?",
                    "options": [
                        "dog",
                        "motorcycle",
                        "None"
                    ],
                    "answer": "dog",
                    "prediction": "motorcycle",
                    "success_failed": "failed"
                },
                {
                    "context": "Emily has a motorcycle and a dog.",
                    "question": "What vehicle does Emily have?",
                    "options": [
                        "dog",
                        "motorcycle",
                        "None"
                    ],
                    "answer": "motorcycle",
                    "prediction": "motorcycle",
                    "success_failed": "success"
                },
                {
                    "context": "Dave has a dog and a motorcycle.",
                    "question": "What animal does Dave have?",
                    "options": [
                        "dog",
                        "motorcycle",
                        "None"
                    ],
                    "answer": "dog",
                    "prediction": "motorcycle",
                    "success_failed": "failed"
                },
                {
                    "context": "Dave has a dog and a motorcycle.",
                    "question": "What vehicle does Dave have?",
                    "options": [
                        "dog",
                        "motorcycle",
                        "None"
                    ],
                    "answer": "motorcycle",
                    "prediction": "motorcycle",
                    "success_failed": "success"
                },
                {
                    "context": "Dave has a motorcycle and a dog.",
                    "question": "What animal does Dave have?",
                    "options": [
                        "dog",
                        "motorcycle",
                        "None"
                    ],
                    "answer": "dog",
                    "prediction": "motorcycle",
                    "success_failed": "failed"
                },
                {
                    "context": "Dave has a motorcycle and a dog.",
                    "question": "What vehicle does Dave have?",
                    "options": [
                        "dog",
                        "motorcycle",
                        "None"
                    ],
                    "answer": "motorcycle",
                    "prediction": "motorcycle",
                    "success_failed": "success"
                },
                {
                    "context": "Barbara has a snake and a SUV.",
                    "question": "What animal does Barbara have?",
                    "options": [
                        "snake",
                        "SUV",
                        "None"
                    ],
                    "answer": "snake",
                    "prediction": "snake",
                    "success_failed": "success"
                },
                {
                    "context": "Barbara has a snake and a SUV.",
                    "question": "What vehicle does Barbara have?",
                    "options": [
                        "snake",
                        "SUV",
                        "None"
                    ],
                    "answer": "SUV",
                    "prediction": "SUV",
                    "success_failed": "success"
                },
                {
                    "context": "Barbara has a SUV and a snake.",
                    "question": "What animal does Barbara have?",
                    "options": [
                        "snake",
                        "SUV",
                        "None"
                    ],
                    "answer": "snake",
                    "prediction": "snake",
                    "success_failed": "success"
                },
                {
                    "context": "Barbara has a SUV and a snake.",
                    "question": "What vehicle does Barbara have?",
                    "options": [
                        "snake",
                        "SUV",
                        "None"
                    ],
                    "answer": "SUV",
                    "prediction": "SUV",
                    "success_failed": "success"
                }
            ],
            "total_cases": 20,
            "failed_cases": 8,
            "success_cases": 12,
            "failure_rate": 40.0,
            "success_rate": 60.0
        },
        {
            "test_type": "MFT",
            "capability": "Taxonomy",
            "test_name": "Animal vs Vehicle v2",
            "test_name_description": "Test's model's ability to understand different animals and vehicles.",
            "test_type_description": "MFT stands for Minimum Functionality Test. This testing type is inspired from unit testing of software engineering. For this type of testing precise and small testing datasets are created and the models are tested on that particular test set. MFTs are useful particularly for detecting when models use alternative approaches to handle complicated inputs without actually knowing the inside out of the capability. For MFT test cases, labeled test set is required.",
            "capability_description": "This capability tests whether a model has the ability to handle synonyms, antonyms, object size, shape, profession etc.",
            "test_cases": [
                {
                    "context": "Johnny bought a bull. Eric bought a train.",
                    "question": "Who bought an animal?",
                    "options": [
                        "Johnny",
                        "Eric",
                        "None"
                    ],
                    "answer": "Johnny",
                    "prediction": "Johnny",
                    "success_failed": "success"
                },
                {
                    "context": "Johnny bought a bull. Eric bought a train.",
                    "question": "Who bought a vehicle?",
                    "options": [
                        "Johnny",
                        "Eric",
                        "None"
                    ],
                    "answer": "Eric",
                    "prediction": "Johnny",
                    "success_failed": "failed"
                },
                {
                    "context": "Eric bought a train. Johnny bought a bull.",
                    "question": "Who bought an animal?",
                    "options": [
                        "Johnny",
                        "Eric",
                        "None"
                    ],
                    "answer": "Johnny",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Eric bought a train. Johnny bought a bull.",
                    "question": "Who bought a vehicle?",
                    "options": [
                        "Johnny",
                        "Eric",
                        "None"
                    ],
                    "answer": "Eric",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Jean bought a hamster. Ann bought a motorcycle.",
                    "question": "Who bought an animal?",
                    "options": [
                        "Jean",
                        "Ann",
                        "None"
                    ],
                    "answer": "Jean",
                    "prediction": "Ann",
                    "success_failed": "failed"
                },
                {
                    "context": "Jean bought a hamster. Ann bought a motorcycle.",
                    "question": "Who bought a vehicle?",
                    "options": [
                        "Jean",
                        "Ann",
                        "None"
                    ],
                    "answer": "Ann",
                    "prediction": "Jean",
                    "success_failed": "failed"
                },
                {
                    "context": "Ann bought a motorcycle. Jean bought a hamster.",
                    "question": "Who bought an animal?",
                    "options": [
                        "Jean",
                        "Ann",
                        "None"
                    ],
                    "answer": "Jean",
                    "prediction": "Ann",
                    "success_failed": "failed"
                },
                {
                    "context": "Ann bought a motorcycle. Jean bought a hamster.",
                    "question": "Who bought a vehicle?",
                    "options": [
                        "Jean",
                        "Ann",
                        "None"
                    ],
                    "answer": "Ann",
                    "prediction": "Ann",
                    "success_failed": "success"
                },
                {
                    "context": "Frank bought a fish. Betty bought a train.",
                    "question": "Who bought an animal?",
                    "options": [
                        "Frank",
                        "Betty",
                        "None"
                    ],
                    "answer": "Frank",
                    "prediction": "Frank",
                    "success_failed": "success"
                },
                {
                    "context": "Frank bought a fish. Betty bought a train.",
                    "question": "Who bought a vehicle?",
                    "options": [
                        "Frank",
                        "Betty",
                        "None"
                    ],
                    "answer": "Betty",
                    "prediction": "Frank",
                    "success_failed": "failed"
                },
                {
                    "context": "Betty bought a train. Frank bought a fish.",
                    "question": "Who bought an animal?",
                    "options": [
                        "Frank",
                        "Betty",
                        "None"
                    ],
                    "answer": "Frank",
                    "prediction": "Betty",
                    "success_failed": "failed"
                },
                {
                    "context": "Betty bought a train. Frank bought a fish.",
                    "question": "Who bought a vehicle?",
                    "options": [
                        "Frank",
                        "Betty",
                        "None"
                    ],
                    "answer": "Betty",
                    "prediction": "Betty",
                    "success_failed": "success"
                },
                {
                    "context": "Joseph bought a cow. Eric bought a car.",
                    "question": "Who bought an animal?",
                    "options": [
                        "Joseph",
                        "Eric",
                        "None"
                    ],
                    "answer": "Joseph",
                    "prediction": "Joseph",
                    "success_failed": "success"
                },
                {
                    "context": "Joseph bought a cow. Eric bought a car.",
                    "question": "Who bought a vehicle?",
                    "options": [
                        "Joseph",
                        "Eric",
                        "None"
                    ],
                    "answer": "Eric",
                    "prediction": "Joseph",
                    "success_failed": "failed"
                },
                {
                    "context": "Eric bought a car. Joseph bought a cow.",
                    "question": "Who bought an animal?",
                    "options": [
                        "Joseph",
                        "Eric",
                        "None"
                    ],
                    "answer": "Joseph",
                    "prediction": "Joseph",
                    "success_failed": "success"
                },
                {
                    "context": "Eric bought a car. Joseph bought a cow.",
                    "question": "Who bought a vehicle?",
                    "options": [
                        "Joseph",
                        "Eric",
                        "None"
                    ],
                    "answer": "Eric",
                    "prediction": "Eric",
                    "success_failed": "success"
                },
                {
                    "context": "Sue bought a duck. Carl bought a SUV.",
                    "question": "Who bought an animal?",
                    "options": [
                        "Sue",
                        "Carl",
                        "None"
                    ],
                    "answer": "Sue",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Sue bought a duck. Carl bought a SUV.",
                    "question": "Who bought a vehicle?",
                    "options": [
                        "Sue",
                        "Carl",
                        "None"
                    ],
                    "answer": "Carl",
                    "prediction": "Carl",
                    "success_failed": "success"
                },
                {
                    "context": "Carl bought a SUV. Sue bought a duck.",
                    "question": "Who bought an animal?",
                    "options": [
                        "Sue",
                        "Carl",
                        "None"
                    ],
                    "answer": "Sue",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Carl bought a SUV. Sue bought a duck.",
                    "question": "Who bought a vehicle?",
                    "options": [
                        "Sue",
                        "Carl",
                        "None"
                    ],
                    "answer": "Carl",
                    "prediction": "Carl",
                    "success_failed": "success"
                }
            ],
            "total_cases": 20,
            "failed_cases": 11,
            "success_cases": 9,
            "failure_rate": 55.0,
            "success_rate": 45.0
        },
        {
            "test_type": "MFT",
            "capability": "Taxonomy",
            "test_name": "Synonyms",
            "test_name_description": "Test's model's ability to understand synonyms.",
            "test_type_description": "MFT stands for Minimum Functionality Test. This testing type is inspired from unit testing of software engineering. For this type of testing precise and small testing datasets are created and the models are tested on that particular test set. MFTs are useful particularly for detecting when models use alternative approaches to handle complicated inputs without actually knowing the inside out of the capability. For MFT test cases, labeled test set is required.",
            "capability_description": "This capability tests whether a model has the ability to handle synonyms, antonyms, object size, shape, profession etc.",
            "test_cases": [
                {
                    "context": "Johnny is very happy. Katherine is very spiritual.",
                    "question": "Who is joyful?",
                    "options": [
                        "Johnny",
                        "Katherine",
                        "None"
                    ],
                    "answer": "Johnny",
                    "prediction": "Johnny",
                    "success_failed": "success"
                },
                {
                    "context": "Johnny is very happy. Katherine is very spiritual.",
                    "question": "Who is religious?",
                    "options": [
                        "Johnny",
                        "Katherine",
                        "None"
                    ],
                    "answer": "Katherine",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Katherine is very spiritual. Johnny is very happy.",
                    "question": "Who is joyful?",
                    "options": [
                        "Johnny",
                        "Katherine",
                        "None"
                    ],
                    "answer": "Johnny",
                    "prediction": "Johnny",
                    "success_failed": "success"
                },
                {
                    "context": "Katherine is very spiritual. Johnny is very happy.",
                    "question": "Who is religious?",
                    "options": [
                        "Johnny",
                        "Katherine",
                        "None"
                    ],
                    "answer": "Katherine",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Stephanie is very spiritual. Alexandra is very grateful.",
                    "question": "Who is religious?",
                    "options": [
                        "Stephanie",
                        "Alexandra",
                        "None"
                    ],
                    "answer": "Stephanie",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Stephanie is very spiritual. Alexandra is very grateful.",
                    "question": "Who is thankful?",
                    "options": [
                        "Stephanie",
                        "Alexandra",
                        "None"
                    ],
                    "answer": "Alexandra",
                    "prediction": "Alexandra",
                    "success_failed": "success"
                },
                {
                    "context": "Alexandra is very grateful. Stephanie is very spiritual.",
                    "question": "Who is religious?",
                    "options": [
                        "Stephanie",
                        "Alexandra",
                        "None"
                    ],
                    "answer": "Stephanie",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Alexandra is very grateful. Stephanie is very spiritual.",
                    "question": "Who is thankful?",
                    "options": [
                        "Stephanie",
                        "Alexandra",
                        "None"
                    ],
                    "answer": "Alexandra",
                    "prediction": "Alexandra",
                    "success_failed": "success"
                },
                {
                    "context": "Jonathan is very happy. Dave is very vocal.",
                    "question": "Who is joyful?",
                    "options": [
                        "Jonathan",
                        "Dave",
                        "None"
                    ],
                    "answer": "Jonathan",
                    "prediction": "Jonathan",
                    "success_failed": "success"
                },
                {
                    "context": "Jonathan is very happy. Dave is very vocal.",
                    "question": "Who is outspoken?",
                    "options": [
                        "Jonathan",
                        "Dave",
                        "None"
                    ],
                    "answer": "Dave",
                    "prediction": "Jonathan",
                    "success_failed": "failed"
                },
                {
                    "context": "Dave is very vocal. Jonathan is very happy.",
                    "question": "Who is joyful?",
                    "options": [
                        "Jonathan",
                        "Dave",
                        "None"
                    ],
                    "answer": "Jonathan",
                    "prediction": "Jonathan",
                    "success_failed": "success"
                },
                {
                    "context": "Dave is very vocal. Jonathan is very happy.",
                    "question": "Who is outspoken?",
                    "options": [
                        "Jonathan",
                        "Dave",
                        "None"
                    ],
                    "answer": "Dave",
                    "prediction": "Dave",
                    "success_failed": "success"
                },
                {
                    "context": "Wendy is very intelligent. Roy is very humble.",
                    "question": "Who is smart?",
                    "options": [
                        "Wendy",
                        "Roy",
                        "None"
                    ],
                    "answer": "Wendy",
                    "prediction": "Wendy",
                    "success_failed": "success"
                },
                {
                    "context": "Wendy is very intelligent. Roy is very humble.",
                    "question": "Who is modest?",
                    "options": [
                        "Wendy",
                        "Roy",
                        "None"
                    ],
                    "answer": "Roy",
                    "prediction": "Roy",
                    "success_failed": "success"
                },
                {
                    "context": "Roy is very humble. Wendy is very intelligent.",
                    "question": "Who is smart?",
                    "options": [
                        "Wendy",
                        "Roy",
                        "None"
                    ],
                    "answer": "Wendy",
                    "prediction": "Wendy",
                    "success_failed": "success"
                },
                {
                    "context": "Roy is very humble. Wendy is very intelligent.",
                    "question": "Who is modest?",
                    "options": [
                        "Wendy",
                        "Roy",
                        "None"
                    ],
                    "answer": "Roy",
                    "prediction": "Roy",
                    "success_failed": "success"
                },
                {
                    "context": "Florence is very frightened. Sue is very modest.",
                    "question": "Who is scared?",
                    "options": [
                        "Florence",
                        "Sue",
                        "None"
                    ],
                    "answer": "Florence",
                    "prediction": "Florence",
                    "success_failed": "success"
                },
                {
                    "context": "Florence is very frightened. Sue is very modest.",
                    "question": "Who is humble?",
                    "options": [
                        "Florence",
                        "Sue",
                        "None"
                    ],
                    "answer": "Sue",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Sue is very modest. Florence is very frightened.",
                    "question": "Who is scared?",
                    "options": [
                        "Florence",
                        "Sue",
                        "None"
                    ],
                    "answer": "Florence",
                    "prediction": "Florence",
                    "success_failed": "success"
                },
                {
                    "context": "Sue is very modest. Florence is very frightened.",
                    "question": "Who is humble?",
                    "options": [
                        "Florence",
                        "Sue",
                        "None"
                    ],
                    "answer": "Sue",
                    "prediction": "Sue",
                    "success_failed": "success"
                },
                {
                    "context": "Grace is very organised. Joseph is very smart.",
                    "question": "Who is organized?",
                    "options": [
                        "Grace",
                        "Joseph",
                        "None"
                    ],
                    "answer": "Grace",
                    "prediction": "Grace",
                    "success_failed": "success"
                },
                {
                    "context": "Grace is very organised. Joseph is very smart.",
                    "question": "Who is intelligent?",
                    "options": [
                        "Grace",
                        "Joseph",
                        "None"
                    ],
                    "answer": "Joseph",
                    "prediction": "Grace",
                    "success_failed": "failed"
                },
                {
                    "context": "Joseph is very smart. Grace is very organised.",
                    "question": "Who is organized?",
                    "options": [
                        "Grace",
                        "Joseph",
                        "None"
                    ],
                    "answer": "Grace",
                    "prediction": "Joseph",
                    "success_failed": "failed"
                },
                {
                    "context": "Joseph is very smart. Grace is very organised.",
                    "question": "Who is intelligent?",
                    "options": [
                        "Grace",
                        "Joseph",
                        "None"
                    ],
                    "answer": "Joseph",
                    "prediction": "Joseph",
                    "success_failed": "success"
                },
                {
                    "context": "Diana is very joyful. Janet is very brave.",
                    "question": "Who is happy?",
                    "options": [
                        "Diana",
                        "Janet",
                        "None"
                    ],
                    "answer": "Diana",
                    "prediction": "Diana",
                    "success_failed": "success"
                },
                {
                    "context": "Diana is very joyful. Janet is very brave.",
                    "question": "Who is courageous?",
                    "options": [
                        "Diana",
                        "Janet",
                        "None"
                    ],
                    "answer": "Janet",
                    "prediction": "Janet",
                    "success_failed": "success"
                },
                {
                    "context": "Janet is very brave. Diana is very joyful.",
                    "question": "Who is happy?",
                    "options": [
                        "Diana",
                        "Janet",
                        "None"
                    ],
                    "answer": "Diana",
                    "prediction": "Janet",
                    "success_failed": "failed"
                },
                {
                    "context": "Janet is very brave. Diana is very joyful.",
                    "question": "Who is courageous?",
                    "options": [
                        "Diana",
                        "Janet",
                        "None"
                    ],
                    "answer": "Janet",
                    "prediction": "Janet",
                    "success_failed": "success"
                },
                {
                    "context": "Jonathan is very modest. Elizabeth is very joyful.",
                    "question": "Who is humble?",
                    "options": [
                        "Jonathan",
                        "Elizabeth",
                        "None"
                    ],
                    "answer": "Jonathan",
                    "prediction": "Jonathan",
                    "success_failed": "success"
                },
                {
                    "context": "Jonathan is very modest. Elizabeth is very joyful.",
                    "question": "Who is happy?",
                    "options": [
                        "Jonathan",
                        "Elizabeth",
                        "None"
                    ],
                    "answer": "Elizabeth",
                    "prediction": "Elizabeth",
                    "success_failed": "success"
                },
                {
                    "context": "Elizabeth is very joyful. Jonathan is very modest.",
                    "question": "Who is humble?",
                    "options": [
                        "Jonathan",
                        "Elizabeth",
                        "None"
                    ],
                    "answer": "Jonathan",
                    "prediction": "Jonathan",
                    "success_failed": "success"
                },
                {
                    "context": "Elizabeth is very joyful. Jonathan is very modest.",
                    "question": "Who is happy?",
                    "options": [
                        "Jonathan",
                        "Elizabeth",
                        "None"
                    ],
                    "answer": "Elizabeth",
                    "prediction": "Elizabeth",
                    "success_failed": "success"
                },
                {
                    "context": "Arthur is very modest. Dorothy is very joyful.",
                    "question": "Who is humble?",
                    "options": [
                        "Arthur",
                        "Dorothy",
                        "None"
                    ],
                    "answer": "Arthur",
                    "prediction": "Arthur",
                    "success_failed": "success"
                },
                {
                    "context": "Arthur is very modest. Dorothy is very joyful.",
                    "question": "Who is happy?",
                    "options": [
                        "Arthur",
                        "Dorothy",
                        "None"
                    ],
                    "answer": "Dorothy",
                    "prediction": "Dorothy",
                    "success_failed": "success"
                },
                {
                    "context": "Dorothy is very joyful. Arthur is very modest.",
                    "question": "Who is humble?",
                    "options": [
                        "Arthur",
                        "Dorothy",
                        "None"
                    ],
                    "answer": "Arthur",
                    "prediction": "Arthur",
                    "success_failed": "success"
                },
                {
                    "context": "Dorothy is very joyful. Arthur is very modest.",
                    "question": "Who is happy?",
                    "options": [
                        "Arthur",
                        "Dorothy",
                        "None"
                    ],
                    "answer": "Dorothy",
                    "prediction": "Dorothy",
                    "success_failed": "success"
                }
            ],
            "total_cases": 36,
            "failed_cases": 9,
            "success_cases": 27,
            "failure_rate": 25.0,
            "success_rate": 75.0
        },
        {
            "test_type": "MFT",
            "capability": "Taxonomy",
            "test_name": "A is COMP than B. Who is antonym(COMP)? B",
            "test_name_description": "Compare person A and person B with different comparative adjective and test's model's ability to understand different comparative adjective and their antonyms",
            "test_type_description": "MFT stands for Minimum Functionality Test. This testing type is inspired from unit testing of software engineering. For this type of testing precise and small testing datasets are created and the models are tested on that particular test set. MFTs are useful particularly for detecting when models use alternative approaches to handle complicated inputs without actually knowing the inside out of the capability. For MFT test cases, labeled test set is required.",
            "capability_description": "This capability tests whether a model has the ability to handle synonyms, antonyms, object size, shape, profession etc.",
            "test_cases": [
                {
                    "context": "Elaine is bigger than Kelly.",
                    "question": "Who is smaller?",
                    "options": [
                        "Kelly",
                        "Elaine",
                        "None"
                    ],
                    "answer": "Kelly",
                    "prediction": "Elaine",
                    "success_failed": "failed"
                },
                {
                    "context": "Elaine is bigger than Kelly.",
                    "question": "Who is bigger?",
                    "options": [
                        "Kelly",
                        "Elaine",
                        "None"
                    ],
                    "answer": "Elaine",
                    "prediction": "Elaine",
                    "success_failed": "success"
                },
                {
                    "context": "Kelly is smaller than Elaine.",
                    "question": "Who is smaller?",
                    "options": [
                        "Kelly",
                        "Elaine",
                        "None"
                    ],
                    "answer": "Kelly",
                    "prediction": "Kelly",
                    "success_failed": "success"
                },
                {
                    "context": "Kelly is smaller than Elaine.",
                    "question": "Who is bigger?",
                    "options": [
                        "Kelly",
                        "Elaine",
                        "None"
                    ],
                    "answer": "Elaine",
                    "prediction": "Kelly",
                    "success_failed": "failed"
                },
                {
                    "context": "Sophie is smarter than Sue.",
                    "question": "Who is dumber?",
                    "options": [
                        "Sue",
                        "Sophie",
                        "None"
                    ],
                    "answer": "Sue",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Sophie is smarter than Sue.",
                    "question": "Who is smarter?",
                    "options": [
                        "Sue",
                        "Sophie",
                        "None"
                    ],
                    "answer": "Sophie",
                    "prediction": "Sophie",
                    "success_failed": "success"
                },
                {
                    "context": "Sue is dumber than Sophie.",
                    "question": "Who is dumber?",
                    "options": [
                        "Sue",
                        "Sophie",
                        "None"
                    ],
                    "answer": "Sue",
                    "prediction": "Sue",
                    "success_failed": "success"
                },
                {
                    "context": "Sue is dumber than Sophie.",
                    "question": "Who is smarter?",
                    "options": [
                        "Sue",
                        "Sophie",
                        "None"
                    ],
                    "answer": "Sophie",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Emily is richer than Steven.",
                    "question": "Who is poorer?",
                    "options": [
                        "Steven",
                        "Emily",
                        "None"
                    ],
                    "answer": "Steven",
                    "prediction": "Emily",
                    "success_failed": "failed"
                },
                {
                    "context": "Emily is richer than Steven.",
                    "question": "Who is richer?",
                    "options": [
                        "Steven",
                        "Emily",
                        "None"
                    ],
                    "answer": "Emily",
                    "prediction": "Emily",
                    "success_failed": "success"
                },
                {
                    "context": "Steven is poorer than Emily.",
                    "question": "Who is poorer?",
                    "options": [
                        "Steven",
                        "Emily",
                        "None"
                    ],
                    "answer": "Steven",
                    "prediction": "Steven",
                    "success_failed": "success"
                },
                {
                    "context": "Steven is poorer than Emily.",
                    "question": "Who is richer?",
                    "options": [
                        "Steven",
                        "Emily",
                        "None"
                    ],
                    "answer": "Emily",
                    "prediction": "Steven",
                    "success_failed": "failed"
                },
                {
                    "context": "Mark is warmer than Florence.",
                    "question": "Who is colder?",
                    "options": [
                        "Florence",
                        "Mark",
                        "None"
                    ],
                    "answer": "Florence",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Mark is warmer than Florence.",
                    "question": "Who is warmer?",
                    "options": [
                        "Florence",
                        "Mark",
                        "None"
                    ],
                    "answer": "Mark",
                    "prediction": "Mark",
                    "success_failed": "success"
                },
                {
                    "context": "Florence is colder than Mark.",
                    "question": "Who is colder?",
                    "options": [
                        "Florence",
                        "Mark",
                        "None"
                    ],
                    "answer": "Florence",
                    "prediction": "Florence",
                    "success_failed": "success"
                },
                {
                    "context": "Florence is colder than Mark.",
                    "question": "Who is warmer?",
                    "options": [
                        "Florence",
                        "Mark",
                        "None"
                    ],
                    "answer": "Mark",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Barbara is louder than William.",
                    "question": "Who is quieter?",
                    "options": [
                        "William",
                        "Barbara",
                        "None"
                    ],
                    "answer": "William",
                    "prediction": "Barbara",
                    "success_failed": "failed"
                },
                {
                    "context": "Barbara is louder than William.",
                    "question": "Who is louder?",
                    "options": [
                        "William",
                        "Barbara",
                        "None"
                    ],
                    "answer": "Barbara",
                    "prediction": "Barbara",
                    "success_failed": "success"
                },
                {
                    "context": "William is quieter than Barbara.",
                    "question": "Who is quieter?",
                    "options": [
                        "William",
                        "Barbara",
                        "None"
                    ],
                    "answer": "William",
                    "prediction": "William",
                    "success_failed": "success"
                },
                {
                    "context": "William is quieter than Barbara.",
                    "question": "Who is louder?",
                    "options": [
                        "William",
                        "Barbara",
                        "None"
                    ],
                    "answer": "Barbara",
                    "prediction": "William",
                    "success_failed": "failed"
                }
            ],
            "total_cases": 20,
            "failed_cases": 10,
            "success_cases": 10,
            "failure_rate": 50.0,
            "success_rate": 50.0
        },
        {
            "test_type": "MFT",
            "capability": "Taxonomy",
            "test_name": "A is more X than B. Who is more antonym(X)? B. Who is less X? B. Who is more X? A. Who is less antonym(X)? A.",
            "test_name_description": "Compare person A and person B with different comparative adjective and test's model's ability to understand different comparative adjective and their antonyms",
            "test_type_description": "MFT stands for Minimum Functionality Test. This testing type is inspired from unit testing of software engineering. For this type of testing precise and small testing datasets are created and the models are tested on that particular test set. MFTs are useful particularly for detecting when models use alternative approaches to handle complicated inputs without actually knowing the inside out of the capability. For MFT test cases, labeled test set is required.",
            "capability_description": "This capability tests whether a model has the ability to handle synonyms, antonyms, object size, shape, profession etc.",
            "test_cases": [
                {
                    "context": "Dan is more passive than Linda.",
                    "question": "Who is more passive?",
                    "options": [
                        "Linda",
                        "Dan",
                        "None"
                    ],
                    "answer": "Dan",
                    "prediction": "Dan",
                    "success_failed": "success"
                },
                {
                    "context": "Dan is more passive than Linda.",
                    "question": "Who is less passive?",
                    "options": [
                        "Linda",
                        "Dan",
                        "None"
                    ],
                    "answer": "Linda",
                    "prediction": "Dan",
                    "success_failed": "failed"
                },
                {
                    "context": "Dan is more passive than Linda.",
                    "question": "Who is more active?",
                    "options": [
                        "Linda",
                        "Dan",
                        "None"
                    ],
                    "answer": "Linda",
                    "prediction": "Dan",
                    "success_failed": "failed"
                },
                {
                    "context": "Dan is more passive than Linda.",
                    "question": "Who is less active?",
                    "options": [
                        "Linda",
                        "Dan",
                        "None"
                    ],
                    "answer": "Dan",
                    "prediction": "Dan",
                    "success_failed": "success"
                },
                {
                    "context": "Linda is more active than Dan.",
                    "question": "Who is more passive?",
                    "options": [
                        "Linda",
                        "Dan",
                        "None"
                    ],
                    "answer": "Dan",
                    "prediction": "Linda",
                    "success_failed": "failed"
                },
                {
                    "context": "Linda is more active than Dan.",
                    "question": "Who is less passive?",
                    "options": [
                        "Linda",
                        "Dan",
                        "None"
                    ],
                    "answer": "Linda",
                    "prediction": "Linda",
                    "success_failed": "success"
                },
                {
                    "context": "Linda is more active than Dan.",
                    "question": "Who is more active?",
                    "options": [
                        "Linda",
                        "Dan",
                        "None"
                    ],
                    "answer": "Linda",
                    "prediction": "Linda",
                    "success_failed": "success"
                },
                {
                    "context": "Linda is more active than Dan.",
                    "question": "Who is less active?",
                    "options": [
                        "Linda",
                        "Dan",
                        "None"
                    ],
                    "answer": "Dan",
                    "prediction": "Linda",
                    "success_failed": "failed"
                },
                {
                    "context": "Dan is less active than Linda.",
                    "question": "Who is more passive?",
                    "options": [
                        "Linda",
                        "Dan",
                        "None"
                    ],
                    "answer": "Dan",
                    "prediction": "Dan",
                    "success_failed": "success"
                },
                {
                    "context": "Dan is less active than Linda.",
                    "question": "Who is less passive?",
                    "options": [
                        "Linda",
                        "Dan",
                        "None"
                    ],
                    "answer": "Linda",
                    "prediction": "Dan",
                    "success_failed": "failed"
                },
                {
                    "context": "Dan is less active than Linda.",
                    "question": "Who is more active?",
                    "options": [
                        "Linda",
                        "Dan",
                        "None"
                    ],
                    "answer": "Linda",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Dan is less active than Linda.",
                    "question": "Who is less active?",
                    "options": [
                        "Linda",
                        "Dan",
                        "None"
                    ],
                    "answer": "Dan",
                    "prediction": "Dan",
                    "success_failed": "success"
                },
                {
                    "context": "Linda is less passive than Dan.",
                    "question": "Who is more passive?",
                    "options": [
                        "Linda",
                        "Dan",
                        "None"
                    ],
                    "answer": "Dan",
                    "prediction": "Linda",
                    "success_failed": "failed"
                },
                {
                    "context": "Linda is less passive than Dan.",
                    "question": "Who is less passive?",
                    "options": [
                        "Linda",
                        "Dan",
                        "None"
                    ],
                    "answer": "Linda",
                    "prediction": "Linda",
                    "success_failed": "success"
                },
                {
                    "context": "Linda is less passive than Dan.",
                    "question": "Who is more active?",
                    "options": [
                        "Linda",
                        "Dan",
                        "None"
                    ],
                    "answer": "Linda",
                    "prediction": "Linda",
                    "success_failed": "success"
                },
                {
                    "context": "Linda is less passive than Dan.",
                    "question": "Who is less active?",
                    "options": [
                        "Linda",
                        "Dan",
                        "None"
                    ],
                    "answer": "Dan",
                    "prediction": "Linda",
                    "success_failed": "failed"
                },
                {
                    "context": "Suzanne is more courageous than Jill.",
                    "question": "Who is more courageous?",
                    "options": [
                        "Jill",
                        "Suzanne",
                        "None"
                    ],
                    "answer": "Suzanne",
                    "prediction": "Suzanne",
                    "success_failed": "success"
                },
                {
                    "context": "Suzanne is more courageous than Jill.",
                    "question": "Who is less courageous?",
                    "options": [
                        "Jill",
                        "Suzanne",
                        "None"
                    ],
                    "answer": "Jill",
                    "prediction": "Suzanne",
                    "success_failed": "failed"
                },
                {
                    "context": "Suzanne is more courageous than Jill.",
                    "question": "Who is more fearful?",
                    "options": [
                        "Jill",
                        "Suzanne",
                        "None"
                    ],
                    "answer": "Jill",
                    "prediction": "Suzanne",
                    "success_failed": "failed"
                },
                {
                    "context": "Suzanne is more courageous than Jill.",
                    "question": "Who is less fearful?",
                    "options": [
                        "Jill",
                        "Suzanne",
                        "None"
                    ],
                    "answer": "Suzanne",
                    "prediction": "Suzanne",
                    "success_failed": "success"
                },
                {
                    "context": "Jill is more fearful than Suzanne.",
                    "question": "Who is more courageous?",
                    "options": [
                        "Jill",
                        "Suzanne",
                        "None"
                    ],
                    "answer": "Suzanne",
                    "prediction": "Jill",
                    "success_failed": "failed"
                },
                {
                    "context": "Jill is more fearful than Suzanne.",
                    "question": "Who is less courageous?",
                    "options": [
                        "Jill",
                        "Suzanne",
                        "None"
                    ],
                    "answer": "Jill",
                    "prediction": "Jill",
                    "success_failed": "success"
                },
                {
                    "context": "Jill is more fearful than Suzanne.",
                    "question": "Who is more fearful?",
                    "options": [
                        "Jill",
                        "Suzanne",
                        "None"
                    ],
                    "answer": "Jill",
                    "prediction": "Jill",
                    "success_failed": "success"
                },
                {
                    "context": "Jill is more fearful than Suzanne.",
                    "question": "Who is less fearful?",
                    "options": [
                        "Jill",
                        "Suzanne",
                        "None"
                    ],
                    "answer": "Suzanne",
                    "prediction": "Jill",
                    "success_failed": "failed"
                },
                {
                    "context": "Suzanne is less fearful than Jill.",
                    "question": "Who is more courageous?",
                    "options": [
                        "Jill",
                        "Suzanne",
                        "None"
                    ],
                    "answer": "Suzanne",
                    "prediction": "Suzanne",
                    "success_failed": "success"
                },
                {
                    "context": "Suzanne is less fearful than Jill.",
                    "question": "Who is less courageous?",
                    "options": [
                        "Jill",
                        "Suzanne",
                        "None"
                    ],
                    "answer": "Jill",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Suzanne is less fearful than Jill.",
                    "question": "Who is more fearful?",
                    "options": [
                        "Jill",
                        "Suzanne",
                        "None"
                    ],
                    "answer": "Jill",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Suzanne is less fearful than Jill.",
                    "question": "Who is less fearful?",
                    "options": [
                        "Jill",
                        "Suzanne",
                        "None"
                    ],
                    "answer": "Suzanne",
                    "prediction": "Suzanne",
                    "success_failed": "success"
                },
                {
                    "context": "Jill is less courageous than Suzanne.",
                    "question": "Who is more courageous?",
                    "options": [
                        "Jill",
                        "Suzanne",
                        "None"
                    ],
                    "answer": "Suzanne",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Jill is less courageous than Suzanne.",
                    "question": "Who is less courageous?",
                    "options": [
                        "Jill",
                        "Suzanne",
                        "None"
                    ],
                    "answer": "Jill",
                    "prediction": "Jill",
                    "success_failed": "success"
                },
                {
                    "context": "Jill is less courageous than Suzanne.",
                    "question": "Who is more fearful?",
                    "options": [
                        "Jill",
                        "Suzanne",
                        "None"
                    ],
                    "answer": "Jill",
                    "prediction": "Jill",
                    "success_failed": "success"
                },
                {
                    "context": "Jill is less courageous than Suzanne.",
                    "question": "Who is less fearful?",
                    "options": [
                        "Jill",
                        "Suzanne",
                        "None"
                    ],
                    "answer": "Suzanne",
                    "prediction": "Jill",
                    "success_failed": "failed"
                },
                {
                    "context": "Lisa is more pessimistic than Julie.",
                    "question": "Who is more pessimistic?",
                    "options": [
                        "Julie",
                        "Lisa",
                        "None"
                    ],
                    "answer": "Lisa",
                    "prediction": "Lisa",
                    "success_failed": "success"
                },
                {
                    "context": "Lisa is more pessimistic than Julie.",
                    "question": "Who is less pessimistic?",
                    "options": [
                        "Julie",
                        "Lisa",
                        "None"
                    ],
                    "answer": "Julie",
                    "prediction": "Lisa",
                    "success_failed": "failed"
                },
                {
                    "context": "Lisa is more pessimistic than Julie.",
                    "question": "Who is more optimistic?",
                    "options": [
                        "Julie",
                        "Lisa",
                        "None"
                    ],
                    "answer": "Julie",
                    "prediction": "Lisa",
                    "success_failed": "failed"
                },
                {
                    "context": "Lisa is more pessimistic than Julie.",
                    "question": "Who is less optimistic?",
                    "options": [
                        "Julie",
                        "Lisa",
                        "None"
                    ],
                    "answer": "Lisa",
                    "prediction": "Lisa",
                    "success_failed": "success"
                },
                {
                    "context": "Julie is more optimistic than Lisa.",
                    "question": "Who is more pessimistic?",
                    "options": [
                        "Julie",
                        "Lisa",
                        "None"
                    ],
                    "answer": "Lisa",
                    "prediction": "Julie",
                    "success_failed": "failed"
                },
                {
                    "context": "Julie is more optimistic than Lisa.",
                    "question": "Who is less pessimistic?",
                    "options": [
                        "Julie",
                        "Lisa",
                        "None"
                    ],
                    "answer": "Julie",
                    "prediction": "Julie",
                    "success_failed": "success"
                },
                {
                    "context": "Julie is more optimistic than Lisa.",
                    "question": "Who is more optimistic?",
                    "options": [
                        "Julie",
                        "Lisa",
                        "None"
                    ],
                    "answer": "Julie",
                    "prediction": "Julie",
                    "success_failed": "success"
                },
                {
                    "context": "Julie is more optimistic than Lisa.",
                    "question": "Who is less optimistic?",
                    "options": [
                        "Julie",
                        "Lisa",
                        "None"
                    ],
                    "answer": "Lisa",
                    "prediction": "Julie",
                    "success_failed": "failed"
                },
                {
                    "context": "Lisa is less optimistic than Julie.",
                    "question": "Who is more pessimistic?",
                    "options": [
                        "Julie",
                        "Lisa",
                        "None"
                    ],
                    "answer": "Lisa",
                    "prediction": "Lisa",
                    "success_failed": "success"
                },
                {
                    "context": "Lisa is less optimistic than Julie.",
                    "question": "Who is less pessimistic?",
                    "options": [
                        "Julie",
                        "Lisa",
                        "None"
                    ],
                    "answer": "Julie",
                    "prediction": "Lisa",
                    "success_failed": "failed"
                },
                {
                    "context": "Lisa is less optimistic than Julie.",
                    "question": "Who is more optimistic?",
                    "options": [
                        "Julie",
                        "Lisa",
                        "None"
                    ],
                    "answer": "Julie",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Lisa is less optimistic than Julie.",
                    "question": "Who is less optimistic?",
                    "options": [
                        "Julie",
                        "Lisa",
                        "None"
                    ],
                    "answer": "Lisa",
                    "prediction": "Lisa",
                    "success_failed": "success"
                },
                {
                    "context": "Julie is less pessimistic than Lisa.",
                    "question": "Who is more pessimistic?",
                    "options": [
                        "Julie",
                        "Lisa",
                        "None"
                    ],
                    "answer": "Lisa",
                    "prediction": "Julie",
                    "success_failed": "failed"
                },
                {
                    "context": "Julie is less pessimistic than Lisa.",
                    "question": "Who is less pessimistic?",
                    "options": [
                        "Julie",
                        "Lisa",
                        "None"
                    ],
                    "answer": "Julie",
                    "prediction": "Julie",
                    "success_failed": "success"
                },
                {
                    "context": "Julie is less pessimistic than Lisa.",
                    "question": "Who is more optimistic?",
                    "options": [
                        "Julie",
                        "Lisa",
                        "None"
                    ],
                    "answer": "Julie",
                    "prediction": "Julie",
                    "success_failed": "success"
                },
                {
                    "context": "Julie is less pessimistic than Lisa.",
                    "question": "Who is less optimistic?",
                    "options": [
                        "Julie",
                        "Lisa",
                        "None"
                    ],
                    "answer": "Lisa",
                    "prediction": "Julie",
                    "success_failed": "failed"
                },
                {
                    "context": "Janet is more passive than Nancy.",
                    "question": "Who is more passive?",
                    "options": [
                        "Nancy",
                        "Janet",
                        "None"
                    ],
                    "answer": "Janet",
                    "prediction": "Janet",
                    "success_failed": "success"
                },
                {
                    "context": "Janet is more passive than Nancy.",
                    "question": "Who is less passive?",
                    "options": [
                        "Nancy",
                        "Janet",
                        "None"
                    ],
                    "answer": "Nancy",
                    "prediction": "Janet",
                    "success_failed": "failed"
                },
                {
                    "context": "Janet is more passive than Nancy.",
                    "question": "Who is more active?",
                    "options": [
                        "Nancy",
                        "Janet",
                        "None"
                    ],
                    "answer": "Nancy",
                    "prediction": "Janet",
                    "success_failed": "failed"
                },
                {
                    "context": "Janet is more passive than Nancy.",
                    "question": "Who is less active?",
                    "options": [
                        "Nancy",
                        "Janet",
                        "None"
                    ],
                    "answer": "Janet",
                    "prediction": "Janet",
                    "success_failed": "success"
                },
                {
                    "context": "Nancy is more active than Janet.",
                    "question": "Who is more passive?",
                    "options": [
                        "Nancy",
                        "Janet",
                        "None"
                    ],
                    "answer": "Janet",
                    "prediction": "Nancy",
                    "success_failed": "failed"
                },
                {
                    "context": "Nancy is more active than Janet.",
                    "question": "Who is less passive?",
                    "options": [
                        "Nancy",
                        "Janet",
                        "None"
                    ],
                    "answer": "Nancy",
                    "prediction": "Nancy",
                    "success_failed": "success"
                },
                {
                    "context": "Nancy is more active than Janet.",
                    "question": "Who is more active?",
                    "options": [
                        "Nancy",
                        "Janet",
                        "None"
                    ],
                    "answer": "Nancy",
                    "prediction": "Nancy",
                    "success_failed": "success"
                },
                {
                    "context": "Nancy is more active than Janet.",
                    "question": "Who is less active?",
                    "options": [
                        "Nancy",
                        "Janet",
                        "None"
                    ],
                    "answer": "Janet",
                    "prediction": "Nancy",
                    "success_failed": "failed"
                },
                {
                    "context": "Janet is less active than Nancy.",
                    "question": "Who is more passive?",
                    "options": [
                        "Nancy",
                        "Janet",
                        "None"
                    ],
                    "answer": "Janet",
                    "prediction": "Janet",
                    "success_failed": "success"
                },
                {
                    "context": "Janet is less active than Nancy.",
                    "question": "Who is less passive?",
                    "options": [
                        "Nancy",
                        "Janet",
                        "None"
                    ],
                    "answer": "Nancy",
                    "prediction": "Janet",
                    "success_failed": "failed"
                },
                {
                    "context": "Janet is less active than Nancy.",
                    "question": "Who is more active?",
                    "options": [
                        "Nancy",
                        "Janet",
                        "None"
                    ],
                    "answer": "Nancy",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Janet is less active than Nancy.",
                    "question": "Who is less active?",
                    "options": [
                        "Nancy",
                        "Janet",
                        "None"
                    ],
                    "answer": "Janet",
                    "prediction": "Janet",
                    "success_failed": "success"
                },
                {
                    "context": "Nancy is less passive than Janet.",
                    "question": "Who is more passive?",
                    "options": [
                        "Nancy",
                        "Janet",
                        "None"
                    ],
                    "answer": "Janet",
                    "prediction": "Nancy",
                    "success_failed": "failed"
                },
                {
                    "context": "Nancy is less passive than Janet.",
                    "question": "Who is less passive?",
                    "options": [
                        "Nancy",
                        "Janet",
                        "None"
                    ],
                    "answer": "Nancy",
                    "prediction": "Nancy",
                    "success_failed": "success"
                },
                {
                    "context": "Nancy is less passive than Janet.",
                    "question": "Who is more active?",
                    "options": [
                        "Nancy",
                        "Janet",
                        "None"
                    ],
                    "answer": "Nancy",
                    "prediction": "Nancy",
                    "success_failed": "success"
                },
                {
                    "context": "Nancy is less passive than Janet.",
                    "question": "Who is less active?",
                    "options": [
                        "Nancy",
                        "Janet",
                        "None"
                    ],
                    "answer": "Janet",
                    "prediction": "Nancy",
                    "success_failed": "failed"
                },
                {
                    "context": "Dorothy is more bad than Sandra.",
                    "question": "Who is more bad?",
                    "options": [
                        "Sandra",
                        "Dorothy",
                        "None"
                    ],
                    "answer": "Dorothy",
                    "prediction": "Dorothy",
                    "success_failed": "success"
                },
                {
                    "context": "Dorothy is more bad than Sandra.",
                    "question": "Who is less bad?",
                    "options": [
                        "Sandra",
                        "Dorothy",
                        "None"
                    ],
                    "answer": "Sandra",
                    "prediction": "Dorothy",
                    "success_failed": "failed"
                },
                {
                    "context": "Dorothy is more bad than Sandra.",
                    "question": "Who is more good?",
                    "options": [
                        "Sandra",
                        "Dorothy",
                        "None"
                    ],
                    "answer": "Sandra",
                    "prediction": "Dorothy",
                    "success_failed": "failed"
                },
                {
                    "context": "Dorothy is more bad than Sandra.",
                    "question": "Who is less good?",
                    "options": [
                        "Sandra",
                        "Dorothy",
                        "None"
                    ],
                    "answer": "Dorothy",
                    "prediction": "Dorothy",
                    "success_failed": "success"
                },
                {
                    "context": "Sandra is more good than Dorothy.",
                    "question": "Who is more bad?",
                    "options": [
                        "Sandra",
                        "Dorothy",
                        "None"
                    ],
                    "answer": "Dorothy",
                    "prediction": "Sandra",
                    "success_failed": "failed"
                },
                {
                    "context": "Sandra is more good than Dorothy.",
                    "question": "Who is less bad?",
                    "options": [
                        "Sandra",
                        "Dorothy",
                        "None"
                    ],
                    "answer": "Sandra",
                    "prediction": "Sandra",
                    "success_failed": "success"
                },
                {
                    "context": "Sandra is more good than Dorothy.",
                    "question": "Who is more good?",
                    "options": [
                        "Sandra",
                        "Dorothy",
                        "None"
                    ],
                    "answer": "Sandra",
                    "prediction": "Sandra",
                    "success_failed": "success"
                },
                {
                    "context": "Sandra is more good than Dorothy.",
                    "question": "Who is less good?",
                    "options": [
                        "Sandra",
                        "Dorothy",
                        "None"
                    ],
                    "answer": "Dorothy",
                    "prediction": "Sandra",
                    "success_failed": "failed"
                },
                {
                    "context": "Dorothy is less good than Sandra.",
                    "question": "Who is more bad?",
                    "options": [
                        "Sandra",
                        "Dorothy",
                        "None"
                    ],
                    "answer": "Dorothy",
                    "prediction": "Dorothy",
                    "success_failed": "success"
                },
                {
                    "context": "Dorothy is less good than Sandra.",
                    "question": "Who is less bad?",
                    "options": [
                        "Sandra",
                        "Dorothy",
                        "None"
                    ],
                    "answer": "Sandra",
                    "prediction": "Dorothy",
                    "success_failed": "failed"
                },
                {
                    "context": "Dorothy is less good than Sandra.",
                    "question": "Who is more good?",
                    "options": [
                        "Sandra",
                        "Dorothy",
                        "None"
                    ],
                    "answer": "Sandra",
                    "prediction": "Dorothy",
                    "success_failed": "failed"
                },
                {
                    "context": "Dorothy is less good than Sandra.",
                    "question": "Who is less good?",
                    "options": [
                        "Sandra",
                        "Dorothy",
                        "None"
                    ],
                    "answer": "Dorothy",
                    "prediction": "Dorothy",
                    "success_failed": "success"
                },
                {
                    "context": "Sandra is less bad than Dorothy.",
                    "question": "Who is more bad?",
                    "options": [
                        "Sandra",
                        "Dorothy",
                        "None"
                    ],
                    "answer": "Dorothy",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Sandra is less bad than Dorothy.",
                    "question": "Who is less bad?",
                    "options": [
                        "Sandra",
                        "Dorothy",
                        "None"
                    ],
                    "answer": "Sandra",
                    "prediction": "Sandra",
                    "success_failed": "success"
                },
                {
                    "context": "Sandra is less bad than Dorothy.",
                    "question": "Who is more good?",
                    "options": [
                        "Sandra",
                        "Dorothy",
                        "None"
                    ],
                    "answer": "Sandra",
                    "prediction": "Sandra",
                    "success_failed": "success"
                },
                {
                    "context": "Sandra is less bad than Dorothy.",
                    "question": "Who is less good?",
                    "options": [
                        "Sandra",
                        "Dorothy",
                        "None"
                    ],
                    "answer": "Dorothy",
                    "prediction": "Sandra",
                    "success_failed": "failed"
                }
            ],
            "total_cases": 80,
            "failed_cases": 40,
            "success_cases": 40,
            "failure_rate": 50.0,
            "success_rate": 50.0
        },
        {
            "test_type": "INV",
            "capability": "Robustness",
            "test_name": "Question typo",
            "test_name_description": "Test's model's ability to handle questions typos (whether changing the spelling of words in the questions changes the model's output)",
            "test_type_description": "Invariance in short INV test is inspired from metamorphic testing of software engineering. For this type of test label-preserving perturbations to inputs are applied and the expected prediction generated by the model should remain the same. INV tests can be performed with unlabeled data since they do not depend on true labels.",
            "capability_description": "This type of test capability test's model's capability to handle small changes in the input (typos, irrelevant sentence addition, question contraction etc.).",
            "test_cases": [
                {
                    "context": "Lee was being waited on my Taylors friend and tipped them well.",
                    "question": "Wh ydid Lee do this?",
                    "gold_answer": "pay them for what they did",
                    "options": [
                        "good",
                        "pay them for what they did",
                        "proud"
                    ],
                    "prediction_before_change": "good",
                    "prediction": "good",
                    "changed": {
                        "from": [
                            "Why",
                            "did"
                        ],
                        "to": [
                            "Wh",
                            "ydid"
                        ]
                    },
                    "success_failed": "success",
                    "where": "question"
                },
                {
                    "context": "Kai did not want to tell Kendall what the boys had said to spare her feelings but eventually he fessed up about the lies.",
                    "question": "How woudl you describe Kai?",
                    "gold_answer": "trying to be a good neighbor",
                    "options": [
                        "right",
                        "betrayed",
                        "trying to be a good neighbor"
                    ],
                    "prediction_before_change": "betrayed",
                    "prediction": "betrayed",
                    "changed": {
                        "from": [
                            "would"
                        ],
                        "to": [
                            "woudl"
                        ]
                    },
                    "success_failed": "success",
                    "where": "question"
                },
                {
                    "context": "Riley punished their child and knew that lesson will be enough.",
                    "question": "How would oyu describe Riley?",
                    "gold_answer": "disciplining",
                    "options": [
                        "a mother",
                        "disciplining",
                        "a father"
                    ],
                    "prediction_before_change": "disciplining",
                    "prediction": "disciplining",
                    "changed": {
                        "from": [
                            "you"
                        ],
                        "to": [
                            "oyu"
                        ]
                    },
                    "success_failed": "success",
                    "where": "question"
                },
                {
                    "context": "I think I'm going to be leaving my job soon.\nI went to a six-month-old baby with possible meningitis. The baby had the right sort of rash (although it was only on the back of the knee and, after checking, nowhere else). It had a temperature, but was one of the happiest, most alert children I've ever had the pleasure of meeting. It just didn't seem as if it had meningitis, and trust me, I've seen a fair few children and adults with it so I have a pretty good idea what it looks like.\nThen, as in the past, I was left waiting for an ambulance.\nFor around 45 minutes.\nThere was no way I was going to be able to transport the patient in my car. It's just not equipped to carry such a small child. We don't have baby seats and as the family didn't have a car they didn't have one either.\nSo the family ended up phoning a friend to take them to the hospital. The ambulance turned up just as they were getting into their friend's car.\nAll I had going through my head was the potential newspaper headline 'No Ambulance For Baby Dying Of Killer Bug!'\nLater that night I went to a woman who was having an extremely painful miscarriage. There is nothing I can do for that on scene, the patient needs to be in hospital. Thankfully the ambulance wasn't too far behind me, but if I had been waiting on scene then it would have been a very awkward and distressing wait (again, because of the pain, it would have been impossible to transport her in my car).\nMore and more I'm looking at my watch as an ambulance fails to arrive. It's only a matter of time before I have someone die in front of me while waiting for an ambulance.\nSo, I'm seriously considering leaving the FRU and going back to work on an ambulance. That way I can pick up sick people, and take them to where they need to be: a hospital.",
                    "question": "Who was the wmoan's husband?",
                    "gold_answer": "not enough information",
                    "options": [
                        "not enough information",
                        "one of the patients at the hospital",
                        "The FRU person",
                        "The ambulance driver"
                    ],
                    "prediction_before_change": "More and more I'm looking at my watch as an ambulance fails to arrive. It's only a matter of time before I have someone die in front of me while waiting for an ambulance.",
                    "prediction": "More and more I'm looking at my watch as an ambulance fails to arrive. It's only a matter of time before I have someone die in front of me while waiting for an ambulance.",
                    "changed": {
                        "from": [
                            "woman's"
                        ],
                        "to": [
                            "wmoan's"
                        ]
                    },
                    "success_failed": "success",
                    "where": "question"
                },
                {
                    "context": "Anyways , after meeting them , I went down to take a shower , but it was full so I waited outside the door , and I meet some college Japanese girl . She was senior year in college ? And she was looking for a job .",
                    "question": "Since I had ot wait to take a shower because it was full , where was I at ?",
                    "gold_answer": "I was staying in a college dormitory .",
                    "options": [
                        "I was staying in a high school dormitory .",
                        "None of the above choices .",
                        "I was staying in a Japanese school dormitory .",
                        "I was staying in a college dormitory ."
                    ],
                    "prediction_before_change": "I was staying in a Japanese school dormitory .",
                    "prediction": "I was staying in a Japanese school dormitory .",
                    "changed": {
                        "from": [
                            "to"
                        ],
                        "to": [
                            "ot"
                        ]
                    },
                    "success_failed": "success",
                    "where": "question"
                }
            ],
            "total_cases": 5,
            "failed_cases": 0,
            "success_cases": 5,
            "failure_rate": 0.0,
            "success_rate": 100.0
        },
        {
            "test_type": "INV",
            "capability": "Robustness",
            "test_name": "Question contractions",
            "test_name_description": "Test's model's ability to handle contraction in questions (whether contractions (what is -> what's) in the questions changes the model's output)",
            "test_type_description": "Invariance in short INV test is inspired from metamorphic testing of software engineering. For this type of test label-preserving perturbations to inputs are applied and the expected prediction generated by the model should remain the same. INV tests can be performed with unlabeled data since they do not depend on true labels.",
            "capability_description": "This type of test capability test's model's capability to handle small changes in the input (typos, irrelevant sentence addition, question contraction etc.).",
            "test_cases": [
                {
                    "context": "I sat in the corner and watched the night unfold . He dedicated \" Roll to Me \" to me , as it 's now Our Song . A woman asked , \" You two married ? \"",
                    "question": "Where'd he dedicate \" Roll to Me \" to me ?",
                    "gold_answer": "in a karaoke bar",
                    "options": [
                        "None of the above choices .",
                        "in a karaoke bar",
                        "in a concert hall",
                        "in a recording studio"
                    ],
                    "prediction_before_change": "None of the above choices .",
                    "prediction": "None of the above choices .",
                    "changed": {
                        "from": [
                            "Where did"
                        ],
                        "to": [
                            "Where'd"
                        ]
                    },
                    "success_failed": "success",
                    "where": "question"
                },
                {
                    "context": "The call details appeared on the computer terminal in the FRU:\n'Nineteen-year-old male - Patient has lump on ribs - difficulty in breathing.' Halfway to the address, a private house, my screen was updated: 'Patient has taken cocaine.'\nI was met at the front door by a young male, stripped to the waist and obviously agitated. 'Comein, myribsfeelfunny, andmyshoulderbladedon'tfeelright.'\n'Slow down,' I said, taking his pulse - 110, a bit on the high side, but he was bouncing off the walls.\n'My ribs man! They don't feel right! Have a feel.' He then started running his hands up and down his chest. 'Have you fallen over? Been hit? Anything unusual happened?' I asked. 'No man - just feel them ... FEEL THEM!'\n'Look, you need to calm down,' I replied. 'I can't do anything while you are hopping all over the place.'\nHe started shouting, 'FEEL THEM! JUST FUCKIN' FEEL THEM!' He turned his back to me, indicating that I should feel his normal-looking ribs.\nA sudden wave of anger passed over me - it was all I could do to not punch him in the back. I examined his ribs; they felt perfectly normal to me.\n'There,' I said, 'your ribs are fine.' 'What about my shoulder blades man?'\n'Look, you've taken cocaine right? You are feeling paranoid, it's normal, just try to relax a little.'\n'WHAT ... ABOUT ... MY ... FUCKIN' ... SHOULDER BLADES!' He turned his back on me again. I gritted my teeth and grabbed his shoulder blades.\n'They are fine. Now. Sit. Down.' He sat down. Then he stood up, then he paced around the kitchen, then he did a few circuits of the sofa, then he sat down again, then he stood up and hopped around a bit. I was getting tired just watching him.\n'Look,' I said trying to calm him, and me, down, 'is this the first time you've taken cocaine?'\n'No man!'\n'OK, well if you want we can take you to the hospital, get you checked out if you'd like?'\n'NO!' he shouted. 'I'm not going to hospital.'",
                    "question": "How'd the narrator feel after leaving the scene?",
                    "gold_answer": "Frustrated",
                    "options": [
                        "Angry",
                        "Happy",
                        "Frustrated",
                        "not enough information"
                    ],
                    "prediction_before_change": "'My ribs man! They don't feel right! Have a feel.' He then started running his hands up and down his chest. 'Have you fallen over? Been hit? Anything unusual happened?' I asked. 'No man - just feel them ... FEEL THEM!'",
                    "prediction": "'My ribs man! They don't feel right! Have a feel.' He then started running his hands up and down his chest. 'Have you fallen over? Been hit? Anything unusual happened?' I asked. 'No man - just feel them ... FEEL THEM!'",
                    "changed": {
                        "from": [
                            "How did"
                        ],
                        "to": [
                            "How'd"
                        ]
                    },
                    "success_failed": "success",
                    "where": "question"
                },
                {
                    "context": "I quickly hid behind the tree and slight looked to see who it was . They were coming from the school building , I thought no one ever came to the back . This is a first and I felt scared . It might be those bullies or something .",
                    "question": "What's probably true about the narrator ?",
                    "gold_answer": "They are hiding and scared",
                    "options": [
                        "They are hiding and scared",
                        "They are not being bullied",
                        "None of the above choices .",
                        "They are not hiding"
                    ],
                    "prediction_before_change": "They are hiding and scared",
                    "prediction": "They are hiding and scared",
                    "changed": {
                        "from": [
                            "What is"
                        ],
                        "to": [
                            "What's"
                        ]
                    },
                    "success_failed": "success",
                    "where": "question"
                },
                {
                    "context": "Unfortunately she 's bit enough that a playful nip can be painful . Wo n't break skin , but it 's a mean pinch . Today I had to trim her nails before bathing her . Hera apparently hates having her nails trimmed .",
                    "question": "What's the reason that she hates having her nails trimmed ?",
                    "gold_answer": "I cut the nails too short and it causes her pain because the nail line is sensitive on her fingers",
                    "options": [
                        "None of the above choices .",
                        "She wants to have pretty , womanly nails and feels that when I cut them I prevent her from having her nails done well",
                        "I cut the nails too short and it causes her pain because the nail line is sensitive on her fingers",
                        "She wants her nails longer and hates that I make it hard for her to grow them"
                    ],
                    "prediction_before_change": "She wants to have pretty , womanly nails and feels that when I cut them I prevent her from having her nails done well",
                    "prediction": "She wants to have pretty , womanly nails and feels that when I cut them I prevent her from having her nails done well",
                    "changed": {
                        "from": [
                            "What is"
                        ],
                        "to": [
                            "What's"
                        ]
                    },
                    "success_failed": "success",
                    "where": "question"
                },
                {
                    "context": "Happiness is for everyone. You don't need to care about those who have beautiful houses with large  gardens and swimming pools or those who have nice cars and lots of money and so on. Why? .Because  those who have big house may often feel lonely and those who have cars may want to walk on the country roads at their free time.\nIn fact, happiness is always around you if you put your heart into it. When you are in trouble at school, your friends will help you; when you study hard at your lessons, your parents are always taking good care of your life and your health; when you get success, your friends will say congratulations to you; when you  do something good to others, you will feel happy, too.All these are your happiness. If you notice them, you can see that happiness is always around you.\nHappiness is not the same as money.It is a feeling of your heart. When you are poor, you can also say you are very happy, because you have something else that can't be bought with money. When you meet with difficulties, you can say loudly you are very happy, because you have bad luck. As the saying goes, life is like a _ door. When it closes, it also opens.  If you take every chance you get,  you  can be a happy and lucky person.",
                    "question": "We say \"Happiness isn't the same as money.\" because  _   .",
                    "gold_answer": "money doesn't always bring happiness",
                    "options": [
                        "money always brings happiness",
                        "money doesn't always bring happiness",
                        "everything can be bought with money",
                        "only rich always bring happiness"
                    ],
                    "prediction_before_change": "In fact, happiness is always around you if you put your heart into it. When you are in trouble at school, your friends will help you; when you study hard at your lessons, your parents are always taking good care of your life and your health; when you get success, your friends will say congratulations to you; when you  do something good to others, you will feel happy, too.All these are your happiness. If you notice them, you can see that happiness is always around you.",
                    "prediction": "In fact, happiness is always around you if you put your heart into it. When you are in trouble at school, your friends will help you; when you study hard at your lessons, your parents are always taking good care of your life and your health; when you get success, your friends will say congratulations to you; when you  do something good to others, you will feel happy, too.All these are your happiness. If you notice them, you can see that happiness is always around you.",
                    "changed": {
                        "from": [
                            "is not"
                        ],
                        "to": [
                            "isn't"
                        ]
                    },
                    "success_failed": "success",
                    "where": "question"
                }
            ],
            "total_cases": 5,
            "failed_cases": 0,
            "success_cases": 5,
            "failure_rate": 0.0,
            "success_rate": 100.0
        },
        {
            "test_type": "INV",
            "capability": "Robustness",
            "test_name": "Add random sentence to context",
            "test_name_description": "Test's model's ability to handle addition of random sentences in the model's input context (whether addition of a random sentence at the beginning and end of the input context changes model's output).",
            "test_type_description": "Invariance in short INV test is inspired from metamorphic testing of software engineering. For this type of test label-preserving perturbations to inputs are applied and the expected prediction generated by the model should remain the same. INV tests can be performed with unlabeled data since they do not depend on true labels.",
            "capability_description": "This type of test capability test's model's capability to handle small changes in the input (typos, irrelevant sentence addition, question contraction etc.).",
            "test_cases": [
                {
                    "context": "Oliver worked on the mailing list all week. He tried not to think about Jacky, although she came into his mind regularly, especially at night. Her big eyes held him before he fell asleep; her body was just out of reach. When he wasn't sitting in front of the computer, he worked on the walnut box. He finished the dovetails. Fitting the bottom of the box was a puzzle. He had cut it to rest inside; it had to be supported just above the low bottom arches. He didn't want to put screws through the sides of the box, and if he put supporting ledger strips on the inside, the bottom would be raised too high. He fastened a small block to the lower inside of each corner. The blocks strengthened the feet of the box and supported the bottom just above the arches. He was satisfied with that solution, but when he pushed the bottom down on the blocks it did not fit perfectly flush against all four sides. The cracks bothered him. By Friday, after much experimenting, he had made tiny moldings to cover the cracks. \"Thank God for routers,\" he said to Jennifer Lindenthwaite. \"Took me about five tries, but I did it.\" \"I wish Rupert had your talent,\" she sighed. \"It's not talent; it's pig-headedness.\" \"Pigs are sweet, really,\" Jennifer said. \"They get a bad rap.\" She stood. \"Let's see the program.\" She liked what he'd done and asked him whether Jacky had approved it. \"Jacky said that, as long as I included everything that she wanted, you should be the judge--since you would have to use it and train others to use it.\" \"It looks good to me,\" Jennifer said. \"I'll have Mary mail you a check on Tuesday. We pay bills on Tuesdays.\" \"Thanks.\"Continue to pray for us . ",
                    "question": "Who is Jennifer?",
                    "options": [
                        "another programmer",
                        "she pays the bills",
                        "a pig farmer",
                        "not enough information"
                    ],
                    "prediction_before_change": "she pays the bills",
                    "gold_answer": "not enough information",
                    "prediction": "she pays the bills",
                    "span": [
                        1638,
                        1664
                    ],
                    "success_failed": "success"
                },
                {
                    "context": "Continue to pray for us . Oliver worked on the mailing list all week. He tried not to think about Jacky, although she came into his mind regularly, especially at night. Her big eyes held him before he fell asleep; her body was just out of reach. When he wasn't sitting in front of the computer, he worked on the walnut box. He finished the dovetails. Fitting the bottom of the box was a puzzle. He had cut it to rest inside; it had to be supported just above the low bottom arches. He didn't want to put screws through the sides of the box, and if he put supporting ledger strips on the inside, the bottom would be raised too high. He fastened a small block to the lower inside of each corner. The blocks strengthened the feet of the box and supported the bottom just above the arches. He was satisfied with that solution, but when he pushed the bottom down on the blocks it did not fit perfectly flush against all four sides. The cracks bothered him. By Friday, after much experimenting, he had made tiny moldings to cover the cracks. \"Thank God for routers,\" he said to Jennifer Lindenthwaite. \"Took me about five tries, but I did it.\" \"I wish Rupert had your talent,\" she sighed. \"It's not talent; it's pig-headedness.\" \"Pigs are sweet, really,\" Jennifer said. \"They get a bad rap.\" She stood. \"Let's see the program.\" She liked what he'd done and asked him whether Jacky had approved it. \"Jacky said that, as long as I included everything that she wanted, you should be the judge--since you would have to use it and train others to use it.\" \"It looks good to me,\" Jennifer said. \"I'll have Mary mail you a check on Tuesday. We pay bills on Tuesdays.\" \"Thanks.\"",
                    "question": "Who is Jennifer?",
                    "options": [
                        "another programmer",
                        "she pays the bills",
                        "a pig farmer",
                        "not enough information"
                    ],
                    "prediction_before_change": "she pays the bills",
                    "gold_answer": "not enough information",
                    "prediction": "she pays the bills",
                    "span": [
                        0,
                        26
                    ],
                    "success_failed": "success"
                },
                {
                    "context": "Look! Here's a pencil box, it's orange, it's my pencil box, it's on the desk. Look! This is a pen, it's black. And this is an eraser, it's blue and white. They're both in the pencil box. This is a ruler, it's red, it's on the pencil box. That is a ruler, too. It's yellow. It's in the drawer. Where's my math book? Ah, it's there, under the sofa.\n\"How much do I need to pay for a single  room a night?\". ",
                    "question": "The pencil box is  _  .",
                    "options": [
                        "yellow",
                        "white",
                        "blue",
                        "orange"
                    ],
                    "prediction_before_change": "orange",
                    "gold_answer": "orange",
                    "prediction": "orange",
                    "span": [
                        346,
                        404
                    ],
                    "success_failed": "success"
                },
                {
                    "context": "\n\"How much do I need to pay for a single  room a night?\". Look! Here's a pencil box, it's orange, it's my pencil box, it's on the desk. Look! This is a pen, it's black. And this is an eraser, it's blue and white. They're both in the pencil box. This is a ruler, it's red, it's on the pencil box. That is a ruler, too. It's yellow. It's in the drawer. Where's my math book? Ah, it's there, under the sofa.",
                    "question": "The pencil box is  _  .",
                    "options": [
                        "yellow",
                        "white",
                        "blue",
                        "orange"
                    ],
                    "prediction_before_change": "orange",
                    "gold_answer": "orange",
                    "prediction": "\"How much do I need to pay for a single  room a night?\". Look! Here's a pencil box, it's orange, it's my pencil box, it's on the desk. Look! This is a pen, it's black. And this is an eraser, it's blue and white. They're both in the pencil box. This is a ruler, it's red, it's on the pencil box. That is a ruler, too. It's yellow. It's in the drawer. Where's my math book? Ah, it's there, under the sofa.",
                    "span": [
                        0,
                        58
                    ],
                    "success_failed": "failed"
                },
                {
                    "context": "Who knows how long I sat like that , just staring off into space with my knitting in my hands . The thing that 's worrisome to me is that this medicine is also used to treat chronic pain and depression , so I do n't know how this is going to affect me that way . Prolly be a lil less snarky now .So they gave me a shot , and popped it back into place . ",
                    "question": "What is something the narrator is likely not taking the medicine for ?",
                    "options": [
                        "For chronic pain and depression",
                        "For memory loss",
                        "To help with knitting",
                        "None of the above choices ."
                    ],
                    "prediction_before_change": "For chronic pain and depression",
                    "gold_answer": "For chronic pain and depression",
                    "prediction": "For chronic pain and depression",
                    "span": [
                        296,
                        353
                    ],
                    "success_failed": "success"
                },
                {
                    "context": "So they gave me a shot , and popped it back into place . Who knows how long I sat like that , just staring off into space with my knitting in my hands . The thing that 's worrisome to me is that this medicine is also used to treat chronic pain and depression , so I do n't know how this is going to affect me that way . Prolly be a lil less snarky now .",
                    "question": "What is something the narrator is likely not taking the medicine for ?",
                    "options": [
                        "For chronic pain and depression",
                        "For memory loss",
                        "To help with knitting",
                        "None of the above choices ."
                    ],
                    "prediction_before_change": "For chronic pain and depression",
                    "gold_answer": "For chronic pain and depression",
                    "prediction": "For chronic pain and depression",
                    "span": [
                        0,
                        57
                    ],
                    "success_failed": "success"
                },
                {
                    "context": "Tracy crossed the rubicon because they wanted to cross it and be the best.In 1948, Miss Carson began working on another book, The Sea Around Us. ",
                    "question": "What does Tracy need to do before this?",
                    "options": [
                        "need to be the best",
                        "keep working even if they fail",
                        "need to be the worst"
                    ],
                    "prediction_before_change": "need to be the best",
                    "gold_answer": "keep working even if they fail",
                    "prediction": "need to be the best",
                    "span": [
                        74,
                        145
                    ],
                    "success_failed": "success"
                },
                {
                    "context": "In 1948, Miss Carson began working on another book, The Sea Around Us. Tracy crossed the rubicon because they wanted to cross it and be the best.",
                    "question": "What does Tracy need to do before this?",
                    "options": [
                        "need to be the best",
                        "keep working even if they fail",
                        "need to be the worst"
                    ],
                    "prediction_before_change": "need to be the best",
                    "gold_answer": "keep working even if they fail",
                    "prediction": "need to be the best",
                    "span": [
                        0,
                        71
                    ],
                    "success_failed": "success"
                },
                {
                    "context": "More people need more resources.Edward has always taken care of me . ",
                    "question": "If the population of Mona's city has been growing recently and there are more people living there this year compared to last year, what happens to the need for resources?",
                    "options": [
                        "increased need",
                        "decreased need"
                    ],
                    "prediction_before_change": "increased need",
                    "gold_answer": "increased need",
                    "prediction": "increased need",
                    "span": [
                        32,
                        69
                    ],
                    "success_failed": "success"
                },
                {
                    "context": "Edward has always taken care of me . More people need more resources.",
                    "question": "If the population of Mona's city has been growing recently and there are more people living there this year compared to last year, what happens to the need for resources?",
                    "options": [
                        "increased need",
                        "decreased need"
                    ],
                    "prediction_before_change": "increased need",
                    "gold_answer": "increased need",
                    "prediction": "increased need",
                    "span": [
                        0,
                        37
                    ],
                    "success_failed": "success"
                }
            ],
            "total_cases": 10,
            "failed_cases": 1,
            "success_cases": 9,
            "failure_rate": 10.0,
            "success_rate": 90.0
        },
        {
            "test_type": "INV",
            "capability": "NER",
            "test_name": "Change name everywhere",
            "test_name_description": "Invariance in short INV test is inspired from metamorphic testing of software engineering. For this type of test label-preserving perturbations to inputs are applied and the expected prediction generated by the model should remain the same. INV tests can be performed with unlabeled data since they do not depend on true labels.",
            "test_type_description": "NER (Named Entity Recognition) Tests model\u2019s ability to appropriately understand named entities.",
            "capability_description": "NER (Named Entity Recognition) Tests model\u2019s ability to appropriately understand named entities.",
            "test_cases": [
                {
                    "context": "Sarah attended their father's funeral after he passed away from cancer.",
                    "question": "What does Sarah need to do before this?",
                    "options": [
                        "honor their father",
                        "mourn their father",
                        "travel to the funeral"
                    ],
                    "prediction_before_change": "honor their father",
                    "gold_answer": "travel to the funeral",
                    "prediction": "honor their father",
                    "changed": {
                        "from": "Taylor",
                        "to": "Sarah"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "Jacqueline attended their father's funeral after he passed away from cancer.",
                    "question": "What does Jacqueline need to do before this?",
                    "options": [
                        "honor their father",
                        "mourn their father",
                        "travel to the funeral"
                    ],
                    "prediction_before_change": "honor their father",
                    "gold_answer": "travel to the funeral",
                    "prediction": "honor their father",
                    "changed": {
                        "from": "Taylor",
                        "to": "Jacqueline"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "Lindsey attended their father's funeral after he passed away from cancer.",
                    "question": "What does Lindsey need to do before this?",
                    "options": [
                        "honor their father",
                        "mourn their father",
                        "travel to the funeral"
                    ],
                    "prediction_before_change": "honor their father",
                    "gold_answer": "travel to the funeral",
                    "prediction": "honor their father",
                    "changed": {
                        "from": "Taylor",
                        "to": "Lindsey"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "Katherine attended their father's funeral after he passed away from cancer.",
                    "question": "What does Katherine need to do before this?",
                    "options": [
                        "honor their father",
                        "mourn their father",
                        "travel to the funeral"
                    ],
                    "prediction_before_change": "honor their father",
                    "gold_answer": "travel to the funeral",
                    "prediction": "honor their father",
                    "changed": {
                        "from": "Taylor",
                        "to": "Katherine"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "Isabella attended their father's funeral after he passed away from cancer.",
                    "question": "What does Isabella need to do before this?",
                    "options": [
                        "honor their father",
                        "mourn their father",
                        "travel to the funeral"
                    ],
                    "prediction_before_change": "honor their father",
                    "gold_answer": "travel to the funeral",
                    "prediction": "honor their father",
                    "changed": {
                        "from": "Taylor",
                        "to": "Isabella"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "Emma attended their father's funeral after he passed away from cancer.",
                    "question": "What does Emma need to do before this?",
                    "options": [
                        "honor their father",
                        "mourn their father",
                        "travel to the funeral"
                    ],
                    "prediction_before_change": "honor their father",
                    "gold_answer": "travel to the funeral",
                    "prediction": "honor their father",
                    "changed": {
                        "from": "Taylor",
                        "to": "Emma"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "Emily attended their father's funeral after he passed away from cancer.",
                    "question": "What does Emily need to do before this?",
                    "options": [
                        "honor their father",
                        "mourn their father",
                        "travel to the funeral"
                    ],
                    "prediction_before_change": "honor their father",
                    "gold_answer": "travel to the funeral",
                    "prediction": "mourn their father",
                    "changed": {
                        "from": "Taylor",
                        "to": "Emily"
                    },
                    "success_failed": "failed"
                },
                {
                    "context": "Jasmine attended their father's funeral after he passed away from cancer.",
                    "question": "What does Jasmine need to do before this?",
                    "options": [
                        "honor their father",
                        "mourn their father",
                        "travel to the funeral"
                    ],
                    "prediction_before_change": "honor their father",
                    "gold_answer": "travel to the funeral",
                    "prediction": "honor their father",
                    "changed": {
                        "from": "Taylor",
                        "to": "Jasmine"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "Ashley attended their father's funeral after he passed away from cancer.",
                    "question": "What does Ashley need to do before this?",
                    "options": [
                        "honor their father",
                        "mourn their father",
                        "travel to the funeral"
                    ],
                    "prediction_before_change": "honor their father",
                    "gold_answer": "travel to the funeral",
                    "prediction": "honor their father",
                    "changed": {
                        "from": "Taylor",
                        "to": "Ashley"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "Leah attended their father's funeral after he passed away from cancer.",
                    "question": "What does Leah need to do before this?",
                    "options": [
                        "honor their father",
                        "mourn their father",
                        "travel to the funeral"
                    ],
                    "prediction_before_change": "honor their father",
                    "gold_answer": "travel to the funeral",
                    "prediction": "honor their father",
                    "changed": {
                        "from": "Taylor",
                        "to": "Leah"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "Joshua really felt very happy. When he arrived at his seat in the classroom that morning, he found an invitation on his desk. It was from several of his classmates asking him to join them on a camping trip. This was the first time he was asked to join in an out-of school activity. Why were they asking him now? Nobody seemed to like him. In fact, he had been so lonely _ . As a result, he had put on a lot of weight, and this gave the kids something more to make fun of him.\nCelina, who was standing near Joshua when he read the invitation, went out quickly to tell the others that the trick had worked. Everyone was pleased that Joshua thought that was true. But there was no camping trip. The whole thing was made up.\nAt first, Celina thought it was fun. But later, when Joshua told her that he was going to buy a sleeping bag with his savings, Celina had a second idea. She knew that Joshua's family had little money, and she hated to see him spend his savings on something he would never use. Celina also hated to tell Joshua the truth. Her close friends would be angry with her.\nWhat could she do now?",
                    "question": "Which of the following is the best title for this passage?",
                    "options": [
                        "Joseph and his school",
                        "Joseph and his friends",
                        "A happy camping trip for Joseph",
                        "An Invitation to Joseph"
                    ],
                    "prediction_before_change": "A happy camping trip for Joseph",
                    "gold_answer": "An Invitation to Joseph",
                    "prediction": "Celina, who was standing near Joshua when he read the invitation, went out quickly to tell the others that the trick had worked. Everyone was pleased that Joshua thought that was true. But there was no camping trip. The whole thing was made up.",
                    "changed": {
                        "from": "Joseph",
                        "to": "Joshua"
                    },
                    "success_failed": "failed"
                },
                {
                    "context": "Kyle really felt very happy. When he arrived at his seat in the classroom that morning, he found an invitation on his desk. It was from several of his classmates asking him to join them on a camping trip. This was the first time he was asked to join in an out-of school activity. Why were they asking him now? Nobody seemed to like him. In fact, he had been so lonely _ . As a result, he had put on a lot of weight, and this gave the kids something more to make fun of him.\nCelina, who was standing near Kyle when he read the invitation, went out quickly to tell the others that the trick had worked. Everyone was pleased that Kyle thought that was true. But there was no camping trip. The whole thing was made up.\nAt first, Celina thought it was fun. But later, when Kyle told her that he was going to buy a sleeping bag with his savings, Celina had a second idea. She knew that Kyle's family had little money, and she hated to see him spend his savings on something he would never use. Celina also hated to tell Kyle the truth. Her close friends would be angry with her.\nWhat could she do now?",
                    "question": "Which of the following is the best title for this passage?",
                    "options": [
                        "Joseph and his school",
                        "Joseph and his friends",
                        "A happy camping trip for Joseph",
                        "An Invitation to Joseph"
                    ],
                    "prediction_before_change": "A happy camping trip for Joseph",
                    "gold_answer": "An Invitation to Joseph",
                    "prediction": "At first, Celina thought it was fun. But later, when Kyle told her that he was going to buy a sleeping bag with his savings, Celina had a second idea. She knew that Kyle's family had little money, and she hated to see him spend his savings on something he would never use. Celina also hated to tell Kyle the truth. Her close friends would be angry with her.",
                    "changed": {
                        "from": "Joseph",
                        "to": "Kyle"
                    },
                    "success_failed": "failed"
                },
                {
                    "context": "Aiden really felt very happy. When he arrived at his seat in the classroom that morning, he found an invitation on his desk. It was from several of his classmates asking him to join them on a camping trip. This was the first time he was asked to join in an out-of school activity. Why were they asking him now? Nobody seemed to like him. In fact, he had been so lonely _ . As a result, he had put on a lot of weight, and this gave the kids something more to make fun of him.\nCelina, who was standing near Aiden when he read the invitation, went out quickly to tell the others that the trick had worked. Everyone was pleased that Aiden thought that was true. But there was no camping trip. The whole thing was made up.\nAt first, Celina thought it was fun. But later, when Aiden told her that he was going to buy a sleeping bag with his savings, Celina had a second idea. She knew that Aiden's family had little money, and she hated to see him spend his savings on something he would never use. Celina also hated to tell Aiden the truth. Her close friends would be angry with her.\nWhat could she do now?",
                    "question": "Which of the following is the best title for this passage?",
                    "options": [
                        "Joseph and his school",
                        "Joseph and his friends",
                        "A happy camping trip for Joseph",
                        "An Invitation to Joseph"
                    ],
                    "prediction_before_change": "A happy camping trip for Joseph",
                    "gold_answer": "An Invitation to Joseph",
                    "prediction": "At first, Celina thought it was fun. But later, when Aiden told her that he was going to buy a sleeping bag with his savings, Celina had a second idea. She knew that Aiden's family had little money, and she hated to see him spend his savings on something he would never use. Celina also hated to tell Aiden the truth. Her close friends would be angry with her.",
                    "changed": {
                        "from": "Joseph",
                        "to": "Aiden"
                    },
                    "success_failed": "failed"
                },
                {
                    "context": "Antonio really felt very happy. When he arrived at his seat in the classroom that morning, he found an invitation on his desk. It was from several of his classmates asking him to join them on a camping trip. This was the first time he was asked to join in an out-of school activity. Why were they asking him now? Nobody seemed to like him. In fact, he had been so lonely _ . As a result, he had put on a lot of weight, and this gave the kids something more to make fun of him.\nCelina, who was standing near Antonio when he read the invitation, went out quickly to tell the others that the trick had worked. Everyone was pleased that Antonio thought that was true. But there was no camping trip. The whole thing was made up.\nAt first, Celina thought it was fun. But later, when Antonio told her that he was going to buy a sleeping bag with his savings, Celina had a second idea. She knew that Antonio's family had little money, and she hated to see him spend his savings on something he would never use. Celina also hated to tell Antonio the truth. Her close friends would be angry with her.\nWhat could she do now?",
                    "question": "Which of the following is the best title for this passage?",
                    "options": [
                        "Joseph and his school",
                        "Joseph and his friends",
                        "A happy camping trip for Joseph",
                        "An Invitation to Joseph"
                    ],
                    "prediction_before_change": "A happy camping trip for Joseph",
                    "gold_answer": "An Invitation to Joseph",
                    "prediction": "At first, Celina thought it was fun. But later, when Antonio told her that he was going to buy a sleeping bag with his savings, Celina had a second idea. She knew that Antonio's family had little money, and she hated to see him spend his savings on something he would never use. Celina also hated to tell Antonio the truth. Her close friends would be angry with her.",
                    "changed": {
                        "from": "Joseph",
                        "to": "Antonio"
                    },
                    "success_failed": "failed"
                },
                {
                    "context": "Justin really felt very happy. When he arrived at his seat in the classroom that morning, he found an invitation on his desk. It was from several of his classmates asking him to join them on a camping trip. This was the first time he was asked to join in an out-of school activity. Why were they asking him now? Nobody seemed to like him. In fact, he had been so lonely _ . As a result, he had put on a lot of weight, and this gave the kids something more to make fun of him.\nCelina, who was standing near Justin when he read the invitation, went out quickly to tell the others that the trick had worked. Everyone was pleased that Justin thought that was true. But there was no camping trip. The whole thing was made up.\nAt first, Celina thought it was fun. But later, when Justin told her that he was going to buy a sleeping bag with his savings, Celina had a second idea. She knew that Justin's family had little money, and she hated to see him spend his savings on something he would never use. Celina also hated to tell Justin the truth. Her close friends would be angry with her.\nWhat could she do now?",
                    "question": "Which of the following is the best title for this passage?",
                    "options": [
                        "Joseph and his school",
                        "Joseph and his friends",
                        "A happy camping trip for Joseph",
                        "An Invitation to Joseph"
                    ],
                    "prediction_before_change": "A happy camping trip for Joseph",
                    "gold_answer": "An Invitation to Joseph",
                    "prediction": "At first, Celina thought it was fun. But later, when Justin told her that he was going to buy a sleeping bag with his savings, Celina had a second idea. She knew that Justin's family had little money, and she hated to see him spend his savings on something he would never use. Celina also hated to tell Justin the truth. Her close friends would be angry with her.",
                    "changed": {
                        "from": "Joseph",
                        "to": "Justin"
                    },
                    "success_failed": "failed"
                },
                {
                    "context": "Connor really felt very happy. When he arrived at his seat in the classroom that morning, he found an invitation on his desk. It was from several of his classmates asking him to join them on a camping trip. This was the first time he was asked to join in an out-of school activity. Why were they asking him now? Nobody seemed to like him. In fact, he had been so lonely _ . As a result, he had put on a lot of weight, and this gave the kids something more to make fun of him.\nCelina, who was standing near Connor when he read the invitation, went out quickly to tell the others that the trick had worked. Everyone was pleased that Connor thought that was true. But there was no camping trip. The whole thing was made up.\nAt first, Celina thought it was fun. But later, when Connor told her that he was going to buy a sleeping bag with his savings, Celina had a second idea. She knew that Connor's family had little money, and she hated to see him spend his savings on something he would never use. Celina also hated to tell Connor the truth. Her close friends would be angry with her.\nWhat could she do now?",
                    "question": "Which of the following is the best title for this passage?",
                    "options": [
                        "Joseph and his school",
                        "Joseph and his friends",
                        "A happy camping trip for Joseph",
                        "An Invitation to Joseph"
                    ],
                    "prediction_before_change": "A happy camping trip for Joseph",
                    "gold_answer": "An Invitation to Joseph",
                    "prediction": "At first, Celina thought it was fun. But later, when Connor told her that he was going to buy a sleeping bag with his savings, Celina had a second idea. She knew that Connor's family had little money, and she hated to see him spend his savings on something he would never use. Celina also hated to tell Connor the truth. Her close friends would be angry with her.",
                    "changed": {
                        "from": "Joseph",
                        "to": "Connor"
                    },
                    "success_failed": "failed"
                },
                {
                    "context": "Jesse really felt very happy. When he arrived at his seat in the classroom that morning, he found an invitation on his desk. It was from several of his classmates asking him to join them on a camping trip. This was the first time he was asked to join in an out-of school activity. Why were they asking him now? Nobody seemed to like him. In fact, he had been so lonely _ . As a result, he had put on a lot of weight, and this gave the kids something more to make fun of him.\nCelina, who was standing near Jesse when he read the invitation, went out quickly to tell the others that the trick had worked. Everyone was pleased that Jesse thought that was true. But there was no camping trip. The whole thing was made up.\nAt first, Celina thought it was fun. But later, when Jesse told her that he was going to buy a sleeping bag with his savings, Celina had a second idea. She knew that Jesse's family had little money, and she hated to see him spend his savings on something he would never use. Celina also hated to tell Jesse the truth. Her close friends would be angry with her.\nWhat could she do now?",
                    "question": "Which of the following is the best title for this passage?",
                    "options": [
                        "Joseph and his school",
                        "Joseph and his friends",
                        "A happy camping trip for Joseph",
                        "An Invitation to Joseph"
                    ],
                    "prediction_before_change": "A happy camping trip for Joseph",
                    "gold_answer": "An Invitation to Joseph",
                    "prediction": "At first, Celina thought it was fun. But later, when Jesse told her that he was going to buy a sleeping bag with his savings, Celina had a second idea. She knew that Jesse's family had little money, and she hated to see him spend his savings on something he would never use. Celina also hated to tell Jesse the truth. Her close friends would be angry with her.",
                    "changed": {
                        "from": "Joseph",
                        "to": "Jesse"
                    },
                    "success_failed": "failed"
                },
                {
                    "context": "Matthew really felt very happy. When he arrived at his seat in the classroom that morning, he found an invitation on his desk. It was from several of his classmates asking him to join them on a camping trip. This was the first time he was asked to join in an out-of school activity. Why were they asking him now? Nobody seemed to like him. In fact, he had been so lonely _ . As a result, he had put on a lot of weight, and this gave the kids something more to make fun of him.\nCelina, who was standing near Matthew when he read the invitation, went out quickly to tell the others that the trick had worked. Everyone was pleased that Matthew thought that was true. But there was no camping trip. The whole thing was made up.\nAt first, Celina thought it was fun. But later, when Matthew told her that he was going to buy a sleeping bag with his savings, Celina had a second idea. She knew that Matthew's family had little money, and she hated to see him spend his savings on something he would never use. Celina also hated to tell Matthew the truth. Her close friends would be angry with her.\nWhat could she do now?",
                    "question": "Which of the following is the best title for this passage?",
                    "options": [
                        "Joseph and his school",
                        "Joseph and his friends",
                        "A happy camping trip for Joseph",
                        "An Invitation to Joseph"
                    ],
                    "prediction_before_change": "A happy camping trip for Joseph",
                    "gold_answer": "An Invitation to Joseph",
                    "prediction": "At first, Celina thought it was fun. But later, when Matthew told her that he was going to buy a sleeping bag with his savings, Celina had a second idea. She knew that Matthew's family had little money, and she hated to see him spend his savings on something he would never use. Celina also hated to tell Matthew the truth. Her close friends would be angry with her.",
                    "changed": {
                        "from": "Joseph",
                        "to": "Matthew"
                    },
                    "success_failed": "failed"
                },
                {
                    "context": "Benjamin really felt very happy. When he arrived at his seat in the classroom that morning, he found an invitation on his desk. It was from several of his classmates asking him to join them on a camping trip. This was the first time he was asked to join in an out-of school activity. Why were they asking him now? Nobody seemed to like him. In fact, he had been so lonely _ . As a result, he had put on a lot of weight, and this gave the kids something more to make fun of him.\nCelina, who was standing near Benjamin when he read the invitation, went out quickly to tell the others that the trick had worked. Everyone was pleased that Benjamin thought that was true. But there was no camping trip. The whole thing was made up.\nAt first, Celina thought it was fun. But later, when Benjamin told her that he was going to buy a sleeping bag with his savings, Celina had a second idea. She knew that Benjamin's family had little money, and she hated to see him spend his savings on something he would never use. Celina also hated to tell Benjamin the truth. Her close friends would be angry with her.\nWhat could she do now?",
                    "question": "Which of the following is the best title for this passage?",
                    "options": [
                        "Joseph and his school",
                        "Joseph and his friends",
                        "A happy camping trip for Joseph",
                        "An Invitation to Joseph"
                    ],
                    "prediction_before_change": "A happy camping trip for Joseph",
                    "gold_answer": "An Invitation to Joseph",
                    "prediction": "Celina, who was standing near Benjamin when he read the invitation, went out quickly to tell the others that the trick had worked. Everyone was pleased that Benjamin thought that was true. But there was no camping trip. The whole thing was made up.",
                    "changed": {
                        "from": "Joseph",
                        "to": "Benjamin"
                    },
                    "success_failed": "failed"
                },
                {
                    "context": "Jeremy really felt very happy. When he arrived at his seat in the classroom that morning, he found an invitation on his desk. It was from several of his classmates asking him to join them on a camping trip. This was the first time he was asked to join in an out-of school activity. Why were they asking him now? Nobody seemed to like him. In fact, he had been so lonely _ . As a result, he had put on a lot of weight, and this gave the kids something more to make fun of him.\nCelina, who was standing near Jeremy when he read the invitation, went out quickly to tell the others that the trick had worked. Everyone was pleased that Jeremy thought that was true. But there was no camping trip. The whole thing was made up.\nAt first, Celina thought it was fun. But later, when Jeremy told her that he was going to buy a sleeping bag with his savings, Celina had a second idea. She knew that Jeremy's family had little money, and she hated to see him spend his savings on something he would never use. Celina also hated to tell Jeremy the truth. Her close friends would be angry with her.\nWhat could she do now?",
                    "question": "Which of the following is the best title for this passage?",
                    "options": [
                        "Joseph and his school",
                        "Joseph and his friends",
                        "A happy camping trip for Joseph",
                        "An Invitation to Joseph"
                    ],
                    "prediction_before_change": "A happy camping trip for Joseph",
                    "gold_answer": "An Invitation to Joseph",
                    "prediction": "At first, Celina thought it was fun. But later, when Jeremy told her that he was going to buy a sleeping bag with his savings, Celina had a second idea. She knew that Jeremy's family had little money, and she hated to see him spend his savings on something he would never use. Celina also hated to tell Jeremy the truth. Her close friends would be angry with her.",
                    "changed": {
                        "from": "Joseph",
                        "to": "Jeremy"
                    },
                    "success_failed": "failed"
                },
                {
                    "context": "Bradley proudly displayed their new watch by putting it on their wrist.",
                    "question": "What does Bradley need to do before this?",
                    "options": [
                        "get a new watch band",
                        "learn to tell time",
                        "show off the watch"
                    ],
                    "prediction_before_change": "show off the watch",
                    "gold_answer": "get a new watch band",
                    "prediction": "show off the watch",
                    "changed": {
                        "from": "Kai",
                        "to": "Bradley"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "Adrian proudly displayed their new watch by putting it on their wrist.",
                    "question": "What does Adrian need to do before this?",
                    "options": [
                        "get a new watch band",
                        "learn to tell time",
                        "show off the watch"
                    ],
                    "prediction_before_change": "show off the watch",
                    "gold_answer": "get a new watch band",
                    "prediction": "show off the watch",
                    "changed": {
                        "from": "Kai",
                        "to": "Adrian"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "Jacob proudly displayed their new watch by putting it on their wrist.",
                    "question": "What does Jacob need to do before this?",
                    "options": [
                        "get a new watch band",
                        "learn to tell time",
                        "show off the watch"
                    ],
                    "prediction_before_change": "show off the watch",
                    "gold_answer": "get a new watch band",
                    "prediction": "show off the watch",
                    "changed": {
                        "from": "Kai",
                        "to": "Jacob"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "Sean proudly displayed their new watch by putting it on their wrist.",
                    "question": "What does Sean need to do before this?",
                    "options": [
                        "get a new watch band",
                        "learn to tell time",
                        "show off the watch"
                    ],
                    "prediction_before_change": "show off the watch",
                    "gold_answer": "get a new watch band",
                    "prediction": "show off the watch",
                    "changed": {
                        "from": "Kai",
                        "to": "Sean"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "Cameron proudly displayed their new watch by putting it on their wrist.",
                    "question": "What does Cameron need to do before this?",
                    "options": [
                        "get a new watch band",
                        "learn to tell time",
                        "show off the watch"
                    ],
                    "prediction_before_change": "show off the watch",
                    "gold_answer": "get a new watch band",
                    "prediction": "show off the watch",
                    "changed": {
                        "from": "Kai",
                        "to": "Cameron"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "Henry proudly displayed their new watch by putting it on their wrist.",
                    "question": "What does Henry need to do before this?",
                    "options": [
                        "get a new watch band",
                        "learn to tell time",
                        "show off the watch"
                    ],
                    "prediction_before_change": "show off the watch",
                    "gold_answer": "get a new watch band",
                    "prediction": "show off the watch",
                    "changed": {
                        "from": "Kai",
                        "to": "Henry"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "Bradley proudly displayed their new watch by putting it on their wrist.",
                    "question": "What does Bradley need to do before this?",
                    "options": [
                        "get a new watch band",
                        "learn to tell time",
                        "show off the watch"
                    ],
                    "prediction_before_change": "show off the watch",
                    "gold_answer": "get a new watch band",
                    "prediction": "show off the watch",
                    "changed": {
                        "from": "Kai",
                        "to": "Bradley"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "Kenneth proudly displayed their new watch by putting it on their wrist.",
                    "question": "What does Kenneth need to do before this?",
                    "options": [
                        "get a new watch band",
                        "learn to tell time",
                        "show off the watch"
                    ],
                    "prediction_before_change": "show off the watch",
                    "gold_answer": "get a new watch band",
                    "prediction": "show off the watch",
                    "changed": {
                        "from": "Kai",
                        "to": "Kenneth"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "Evan proudly displayed their new watch by putting it on their wrist.",
                    "question": "What does Evan need to do before this?",
                    "options": [
                        "get a new watch band",
                        "learn to tell time",
                        "show off the watch"
                    ],
                    "prediction_before_change": "show off the watch",
                    "gold_answer": "get a new watch band",
                    "prediction": "show off the watch",
                    "changed": {
                        "from": "Kai",
                        "to": "Evan"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "Ethan proudly displayed their new watch by putting it on their wrist.",
                    "question": "What does Ethan need to do before this?",
                    "options": [
                        "get a new watch band",
                        "learn to tell time",
                        "show off the watch"
                    ],
                    "prediction_before_change": "show off the watch",
                    "gold_answer": "get a new watch band",
                    "prediction": "show off the watch",
                    "changed": {
                        "from": "Kai",
                        "to": "Ethan"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "But I also had to give her allergy medicine today which pretty much knocked her out . She 's be more alert when Ethan walked in . I walked over to the door and unlocked the three locks before pulling it open and welcoming her with a large hug .",
                    "question": "Why did the person need allergy medicine ?",
                    "options": [
                        "None of the above choices .",
                        "She went to a fashion show .",
                        "She ate a healthy diet .",
                        "She visited a cat and had an allergic reaction with lots of wheezing ."
                    ],
                    "prediction_before_change": "She ate a healthy diet .",
                    "gold_answer": "She visited a cat and had an allergic reaction with lots of wheezing .",
                    "prediction": "She visited a cat and had an allergic reaction with lots of wheezing .",
                    "changed": {
                        "from": "Jordan",
                        "to": "Ethan"
                    },
                    "success_failed": "failed"
                },
                {
                    "context": "But I also had to give her allergy medicine today which pretty much knocked her out . She 's be more alert when Jacob walked in . I walked over to the door and unlocked the three locks before pulling it open and welcoming her with a large hug .",
                    "question": "Why did the person need allergy medicine ?",
                    "options": [
                        "None of the above choices .",
                        "She went to a fashion show .",
                        "She ate a healthy diet .",
                        "She visited a cat and had an allergic reaction with lots of wheezing ."
                    ],
                    "prediction_before_change": "She ate a healthy diet .",
                    "gold_answer": "She visited a cat and had an allergic reaction with lots of wheezing .",
                    "prediction": "She visited a cat and had an allergic reaction with lots of wheezing .",
                    "changed": {
                        "from": "Jordan",
                        "to": "Jacob"
                    },
                    "success_failed": "failed"
                },
                {
                    "context": "But I also had to give her allergy medicine today which pretty much knocked her out . She 's be more alert when Austin walked in . I walked over to the door and unlocked the three locks before pulling it open and welcoming her with a large hug .",
                    "question": "Why did the person need allergy medicine ?",
                    "options": [
                        "None of the above choices .",
                        "She went to a fashion show .",
                        "She ate a healthy diet .",
                        "She visited a cat and had an allergic reaction with lots of wheezing ."
                    ],
                    "prediction_before_change": "She ate a healthy diet .",
                    "gold_answer": "She visited a cat and had an allergic reaction with lots of wheezing .",
                    "prediction": "She ate a healthy diet .",
                    "changed": {
                        "from": "Jordan",
                        "to": "Austin"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "But I also had to give her allergy medicine today which pretty much knocked her out . She 's be more alert when Hunter walked in . I walked over to the door and unlocked the three locks before pulling it open and welcoming her with a large hug .",
                    "question": "Why did the person need allergy medicine ?",
                    "options": [
                        "None of the above choices .",
                        "She went to a fashion show .",
                        "She ate a healthy diet .",
                        "She visited a cat and had an allergic reaction with lots of wheezing ."
                    ],
                    "prediction_before_change": "She ate a healthy diet .",
                    "gold_answer": "She visited a cat and had an allergic reaction with lots of wheezing .",
                    "prediction": "She visited a cat and had an allergic reaction with lots of wheezing .",
                    "changed": {
                        "from": "Jordan",
                        "to": "Hunter"
                    },
                    "success_failed": "failed"
                },
                {
                    "context": "But I also had to give her allergy medicine today which pretty much knocked her out . She 's be more alert when Nathan walked in . I walked over to the door and unlocked the three locks before pulling it open and welcoming her with a large hug .",
                    "question": "Why did the person need allergy medicine ?",
                    "options": [
                        "None of the above choices .",
                        "She went to a fashion show .",
                        "She ate a healthy diet .",
                        "She visited a cat and had an allergic reaction with lots of wheezing ."
                    ],
                    "prediction_before_change": "She ate a healthy diet .",
                    "gold_answer": "She visited a cat and had an allergic reaction with lots of wheezing .",
                    "prediction": "She visited a cat and had an allergic reaction with lots of wheezing .",
                    "changed": {
                        "from": "Jordan",
                        "to": "Nathan"
                    },
                    "success_failed": "failed"
                },
                {
                    "context": "But I also had to give her allergy medicine today which pretty much knocked her out . She 's be more alert when Brandon walked in . I walked over to the door and unlocked the three locks before pulling it open and welcoming her with a large hug .",
                    "question": "Why did the person need allergy medicine ?",
                    "options": [
                        "None of the above choices .",
                        "She went to a fashion show .",
                        "She ate a healthy diet .",
                        "She visited a cat and had an allergic reaction with lots of wheezing ."
                    ],
                    "prediction_before_change": "She ate a healthy diet .",
                    "gold_answer": "She visited a cat and had an allergic reaction with lots of wheezing .",
                    "prediction": "She ate a healthy diet .",
                    "changed": {
                        "from": "Jordan",
                        "to": "Brandon"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "But I also had to give her allergy medicine today which pretty much knocked her out . She 's be more alert when Timothy walked in . I walked over to the door and unlocked the three locks before pulling it open and welcoming her with a large hug .",
                    "question": "Why did the person need allergy medicine ?",
                    "options": [
                        "None of the above choices .",
                        "She went to a fashion show .",
                        "She ate a healthy diet .",
                        "She visited a cat and had an allergic reaction with lots of wheezing ."
                    ],
                    "prediction_before_change": "She ate a healthy diet .",
                    "gold_answer": "She visited a cat and had an allergic reaction with lots of wheezing .",
                    "prediction": "She visited a cat and had an allergic reaction with lots of wheezing .",
                    "changed": {
                        "from": "Jordan",
                        "to": "Timothy"
                    },
                    "success_failed": "failed"
                },
                {
                    "context": "But I also had to give her allergy medicine today which pretty much knocked her out . She 's be more alert when John walked in . I walked over to the door and unlocked the three locks before pulling it open and welcoming her with a large hug .",
                    "question": "Why did the person need allergy medicine ?",
                    "options": [
                        "None of the above choices .",
                        "She went to a fashion show .",
                        "She ate a healthy diet .",
                        "She visited a cat and had an allergic reaction with lots of wheezing ."
                    ],
                    "prediction_before_change": "She ate a healthy diet .",
                    "gold_answer": "She visited a cat and had an allergic reaction with lots of wheezing .",
                    "prediction": "She visited a cat and had an allergic reaction with lots of wheezing .",
                    "changed": {
                        "from": "Jordan",
                        "to": "John"
                    },
                    "success_failed": "failed"
                },
                {
                    "context": "But I also had to give her allergy medicine today which pretty much knocked her out . She 's be more alert when Joseph walked in . I walked over to the door and unlocked the three locks before pulling it open and welcoming her with a large hug .",
                    "question": "Why did the person need allergy medicine ?",
                    "options": [
                        "None of the above choices .",
                        "She went to a fashion show .",
                        "She ate a healthy diet .",
                        "She visited a cat and had an allergic reaction with lots of wheezing ."
                    ],
                    "prediction_before_change": "She ate a healthy diet .",
                    "gold_answer": "She visited a cat and had an allergic reaction with lots of wheezing .",
                    "prediction": "She visited a cat and had an allergic reaction with lots of wheezing .",
                    "changed": {
                        "from": "Jordan",
                        "to": "Joseph"
                    },
                    "success_failed": "failed"
                },
                {
                    "context": "But I also had to give her allergy medicine today which pretty much knocked her out . She 's be more alert when Joseph walked in . I walked over to the door and unlocked the three locks before pulling it open and welcoming her with a large hug .",
                    "question": "Why did the person need allergy medicine ?",
                    "options": [
                        "None of the above choices .",
                        "She went to a fashion show .",
                        "She ate a healthy diet .",
                        "She visited a cat and had an allergic reaction with lots of wheezing ."
                    ],
                    "prediction_before_change": "She ate a healthy diet .",
                    "gold_answer": "She visited a cat and had an allergic reaction with lots of wheezing .",
                    "prediction": "She visited a cat and had an allergic reaction with lots of wheezing .",
                    "changed": {
                        "from": "Jordan",
                        "to": "Joseph"
                    },
                    "success_failed": "failed"
                },
                {
                    "context": "Like I said , I ' m a lucky gal . Anyway , after eating lunch , we left and came back for naps . Later , I stopped by next door to drop off Evie 's birthday present ... she turned 1 today ... happy birthday Evie ! After Cody and Tyler woke up ( Tyler did n't take a nap , oh well ) we went up to UTA to see Scott .",
                    "question": "Why did Evie turn 1 today ?",
                    "options": [
                        "Because I 'm a lucky gal .",
                        "Because I ate lunch .",
                        "Because I said so .",
                        "None of the above choices ."
                    ],
                    "prediction_before_change": "Because I ate lunch .",
                    "gold_answer": "None of the above choices .",
                    "prediction": "Because I ate lunch .",
                    "changed": {
                        "from": "Austin",
                        "to": "Tyler"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "Like I said , I ' m a lucky gal . Anyway , after eating lunch , we left and came back for naps . Later , I stopped by next door to drop off Evie 's birthday present ... she turned 1 today ... happy birthday Evie ! After Cody and Joseph woke up ( Austin did n't take a nap , oh well ) we went up to UTA to see Scott .",
                    "question": "Why did Evie turn 1 today ?",
                    "options": [
                        "Because I 'm a lucky gal .",
                        "Because I ate lunch .",
                        "Because I said so .",
                        "None of the above choices ."
                    ],
                    "prediction_before_change": "Because I ate lunch .",
                    "gold_answer": "None of the above choices .",
                    "prediction": "Because I ate lunch .",
                    "changed": {
                        "from": "Tyler",
                        "to": "Joseph"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "Like I said , I ' m a lucky gal . Anyway , after eating lunch , we left and came back for naps . Later , I stopped by next door to drop off Evie 's birthday present ... she turned 1 today ... happy birthday Evie ! After Cody and Tyler woke up ( Jack did n't take a nap , oh well ) we went up to UTA to see Scott .",
                    "question": "Why did Evie turn 1 today ?",
                    "options": [
                        "Because I 'm a lucky gal .",
                        "Because I ate lunch .",
                        "Because I said so .",
                        "None of the above choices ."
                    ],
                    "prediction_before_change": "Because I ate lunch .",
                    "gold_answer": "None of the above choices .",
                    "prediction": "Because I ate lunch .",
                    "changed": {
                        "from": "Austin",
                        "to": "Jack"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "Like I said , I ' m a lucky gal . Anyway , after eating lunch , we left and came back for naps . Later , I stopped by next door to drop off Evie 's birthday present ... she turned 1 today ... happy birthday Evie ! After Cody and Tyler woke up ( Charles did n't take a nap , oh well ) we went up to UTA to see Scott .",
                    "question": "Why did Evie turn 1 today ?",
                    "options": [
                        "Because I 'm a lucky gal .",
                        "Because I ate lunch .",
                        "Because I said so .",
                        "None of the above choices ."
                    ],
                    "prediction_before_change": "Because I ate lunch .",
                    "gold_answer": "None of the above choices .",
                    "prediction": "Because I ate lunch .",
                    "changed": {
                        "from": "Austin",
                        "to": "Charles"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "Like I said , I ' m a lucky gal . Anyway , after eating lunch , we left and came back for naps . Later , I stopped by next door to drop off Evie 's birthday present ... she turned 1 today ... happy birthday Evie ! After Isaiah and Tyler woke up ( Austin did n't take a nap , oh well ) we went up to UTA to see Scott .",
                    "question": "Why did Evie turn 1 today ?",
                    "options": [
                        "Because I 'm a lucky gal .",
                        "Because I ate lunch .",
                        "Because I said so .",
                        "None of the above choices ."
                    ],
                    "prediction_before_change": "Because I ate lunch .",
                    "gold_answer": "None of the above choices .",
                    "prediction": "Because I ate lunch .",
                    "changed": {
                        "from": "Cody",
                        "to": "Isaiah"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "Like I said , I ' m a lucky gal . Anyway , after eating lunch , we left and came back for naps . Later , I stopped by next door to drop off Evie 's birthday present ... she turned 1 today ... happy birthday Evie ! After Cody and Tyler woke up ( Jack did n't take a nap , oh well ) we went up to UTA to see Scott .",
                    "question": "Why did Evie turn 1 today ?",
                    "options": [
                        "Because I 'm a lucky gal .",
                        "Because I ate lunch .",
                        "Because I said so .",
                        "None of the above choices ."
                    ],
                    "prediction_before_change": "Because I ate lunch .",
                    "gold_answer": "None of the above choices .",
                    "prediction": "Because I ate lunch .",
                    "changed": {
                        "from": "Austin",
                        "to": "Jack"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "Like I said , I ' m a lucky gal . Anyway , after eating lunch , we left and came back for naps . Later , I stopped by next door to drop off Evie 's birthday present ... she turned 1 today ... happy birthday Evie ! After Cody and Tyler woke up ( Michael did n't take a nap , oh well ) we went up to UTA to see Scott .",
                    "question": "Why did Evie turn 1 today ?",
                    "options": [
                        "Because I 'm a lucky gal .",
                        "Because I ate lunch .",
                        "Because I said so .",
                        "None of the above choices ."
                    ],
                    "prediction_before_change": "Because I ate lunch .",
                    "gold_answer": "None of the above choices .",
                    "prediction": "Because I ate lunch .",
                    "changed": {
                        "from": "Austin",
                        "to": "Michael"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "Like I said , I ' m a lucky gal . Anyway , after eating lunch , we left and came back for naps . Later , I stopped by next door to drop off Evie 's birthday present ... she turned 1 today ... happy birthday Evie ! After Caleb and Tyler woke up ( Austin did n't take a nap , oh well ) we went up to UTA to see Scott .",
                    "question": "Why did Evie turn 1 today ?",
                    "options": [
                        "Because I 'm a lucky gal .",
                        "Because I ate lunch .",
                        "Because I said so .",
                        "None of the above choices ."
                    ],
                    "prediction_before_change": "Because I ate lunch .",
                    "gold_answer": "None of the above choices .",
                    "prediction": "Because I ate lunch .",
                    "changed": {
                        "from": "Cody",
                        "to": "Caleb"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "Like I said , I ' m a lucky gal . Anyway , after eating lunch , we left and came back for naps . Later , I stopped by next door to drop off Evie 's birthday present ... she turned 1 today ... happy birthday Evie ! After Cody and Tyler woke up ( Kenneth did n't take a nap , oh well ) we went up to UTA to see Scott .",
                    "question": "Why did Evie turn 1 today ?",
                    "options": [
                        "Because I 'm a lucky gal .",
                        "Because I ate lunch .",
                        "Because I said so .",
                        "None of the above choices ."
                    ],
                    "prediction_before_change": "Because I ate lunch .",
                    "gold_answer": "None of the above choices .",
                    "prediction": "Because I ate lunch .",
                    "changed": {
                        "from": "Austin",
                        "to": "Kenneth"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "Like I said , I ' m a lucky gal . Anyway , after eating lunch , we left and came back for naps . Later , I stopped by next door to drop off Evie 's birthday present ... she turned 1 today ... happy birthday Evie ! After Patrick and Tyler woke up ( Austin did n't take a nap , oh well ) we went up to UTA to see Scott .",
                    "question": "Why did Evie turn 1 today ?",
                    "options": [
                        "Because I 'm a lucky gal .",
                        "Because I ate lunch .",
                        "Because I said so .",
                        "None of the above choices ."
                    ],
                    "prediction_before_change": "Because I ate lunch .",
                    "gold_answer": "None of the above choices .",
                    "prediction": "Because I ate lunch .",
                    "changed": {
                        "from": "Cody",
                        "to": "Patrick"
                    },
                    "success_failed": "success"
                }
            ],
            "total_cases": 50,
            "failed_cases": 19,
            "success_cases": 31,
            "failure_rate": 38.0,
            "success_rate": 62.0
        },
        {
            "test_type": "INV",
            "capability": "NER",
            "test_name": "Change location everywhere",
            "test_name_description": "Invariance in short INV test is inspired from metamorphic testing of software engineering. For this type of test label-preserving perturbations to inputs are applied and the expected prediction generated by the model should remain the same. INV tests can be performed with unlabeled data since they do not depend on true labels.",
            "test_type_description": "NER (Named Entity Recognition) Tests model\u2019s ability to appropriately understand named entities.",
            "capability_description": "NER (Named Entity Recognition) Tests model\u2019s ability to appropriately understand named entities.",
            "test_cases": [
                {
                    "context": "If an American is satisfied with you,he will put his thumb and forefinger into a circle.That means OK.But in Brazil,the very sign is considered to be rude.In Nigeria,a guest usually presents flowers to his hostess.The number must be an odd one.Besides,the hostess isn't expected to remove the cover of the bunch of flowers.And usually,the red rose is a sign of love.\nUsually we nod to express our agreement and shake our heads to show disagreement.To our surprise these body movements mean the opposite in Bulgaria.\nThe differences in customs and cultures in the world are really noticeable.We should learn more about them to avoid embarrassment .Then,would you please remember:When in Rome,do as the Romans do.",
                    "question": "In Nigeria,it is   _   for the hostess to remove the cover of the bunch of flowers somebody has presented to her.",
                    "options": [
                        "impolite",
                        "polite",
                        "strange",
                        "popular"
                    ],
                    "prediction_before_change": "impolite",
                    "gold_answer": "impolite",
                    "prediction": "impolite",
                    "changed": {
                        "from": "Poland",
                        "to": "Nigeria"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "If an American is satisfied with you,he will put his thumb and forefinger into a circle.That means OK.But in India,the very sign is considered to be rude.In Poland,a guest usually presents flowers to his hostess.The number must be an odd one.Besides,the hostess isn't expected to remove the cover of the bunch of flowers.And usually,the red rose is a sign of love.\nUsually we nod to express our agreement and shake our heads to show disagreement.To our surprise these body movements mean the opposite in Bulgaria.\nThe differences in customs and cultures in the world are really noticeable.We should learn more about them to avoid embarrassment .Then,would you please remember:When in Rome,do as the Romans do.",
                    "question": "In Poland,it is   _   for the hostess to remove the cover of the bunch of flowers somebody has presented to her.",
                    "options": [
                        "impolite",
                        "polite",
                        "strange",
                        "popular"
                    ],
                    "prediction_before_change": "impolite",
                    "gold_answer": "impolite",
                    "prediction": "impolite",
                    "changed": {
                        "from": "Brazil",
                        "to": "India"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "If an American is satisfied with you,he will put his thumb and forefinger into a circle.That means OK.But in Iraq,the very sign is considered to be rude.In Poland,a guest usually presents flowers to his hostess.The number must be an odd one.Besides,the hostess isn't expected to remove the cover of the bunch of flowers.And usually,the red rose is a sign of love.\nUsually we nod to express our agreement and shake our heads to show disagreement.To our surprise these body movements mean the opposite in Bulgaria.\nThe differences in customs and cultures in the world are really noticeable.We should learn more about them to avoid embarrassment .Then,would you please remember:When in Rome,do as the Romans do.",
                    "question": "In Poland,it is   _   for the hostess to remove the cover of the bunch of flowers somebody has presented to her.",
                    "options": [
                        "impolite",
                        "polite",
                        "strange",
                        "popular"
                    ],
                    "prediction_before_change": "impolite",
                    "gold_answer": "impolite",
                    "prediction": "impolite",
                    "changed": {
                        "from": "Brazil",
                        "to": "Iraq"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "If an American is satisfied with you,he will put his thumb and forefinger into a circle.That means OK.But in Argentina,the very sign is considered to be rude.In Poland,a guest usually presents flowers to his hostess.The number must be an odd one.Besides,the hostess isn't expected to remove the cover of the bunch of flowers.And usually,the red rose is a sign of love.\nUsually we nod to express our agreement and shake our heads to show disagreement.To our surprise these body movements mean the opposite in Bulgaria.\nThe differences in customs and cultures in the world are really noticeable.We should learn more about them to avoid embarrassment .Then,would you please remember:When in Rome,do as the Romans do.",
                    "question": "In Poland,it is   _   for the hostess to remove the cover of the bunch of flowers somebody has presented to her.",
                    "options": [
                        "impolite",
                        "polite",
                        "strange",
                        "popular"
                    ],
                    "prediction_before_change": "impolite",
                    "gold_answer": "impolite",
                    "prediction": "impolite",
                    "changed": {
                        "from": "Brazil",
                        "to": "Argentina"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "If an American is satisfied with you,he will put his thumb and forefinger into a circle.That means OK.But in Brazil,the very sign is considered to be rude.In Poland,a guest usually presents flowers to his hostess.The number must be an odd one.Besides,the hostess isn't expected to remove the cover of the bunch of flowers.And usually,the red rose is a sign of love.\nUsually we nod to express our agreement and shake our heads to show disagreement.To our surprise these body movements mean the opposite in Brazil.\nThe differences in customs and cultures in the world are really noticeable.We should learn more about them to avoid embarrassment .Then,would you please remember:When in Rome,do as the Romans do.",
                    "question": "In Poland,it is   _   for the hostess to remove the cover of the bunch of flowers somebody has presented to her.",
                    "options": [
                        "impolite",
                        "polite",
                        "strange",
                        "popular"
                    ],
                    "prediction_before_change": "impolite",
                    "gold_answer": "impolite",
                    "prediction": "impolite",
                    "changed": {
                        "from": "Bulgaria",
                        "to": "Brazil"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "If an American is satisfied with you,he will put his thumb and forefinger into a circle.That means OK.But in Kenya,the very sign is considered to be rude.In Poland,a guest usually presents flowers to his hostess.The number must be an odd one.Besides,the hostess isn't expected to remove the cover of the bunch of flowers.And usually,the red rose is a sign of love.\nUsually we nod to express our agreement and shake our heads to show disagreement.To our surprise these body movements mean the opposite in Bulgaria.\nThe differences in customs and cultures in the world are really noticeable.We should learn more about them to avoid embarrassment .Then,would you please remember:When in Rome,do as the Romans do.",
                    "question": "In Poland,it is   _   for the hostess to remove the cover of the bunch of flowers somebody has presented to her.",
                    "options": [
                        "impolite",
                        "polite",
                        "strange",
                        "popular"
                    ],
                    "prediction_before_change": "impolite",
                    "gold_answer": "impolite",
                    "prediction": "impolite",
                    "changed": {
                        "from": "Brazil",
                        "to": "Kenya"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "If an American is satisfied with you,he will put his thumb and forefinger into a circle.That means OK.But in Brazil,the very sign is considered to be rude.In Poland,a guest usually presents flowers to his hostess.The number must be an odd one.Besides,the hostess isn't expected to remove the cover of the bunch of flowers.And usually,the red rose is a sign of love.\nUsually we nod to express our agreement and shake our heads to show disagreement.To our surprise these body movements mean the opposite in Indonesia.\nThe differences in customs and cultures in the world are really noticeable.We should learn more about them to avoid embarrassment .Then,would you please remember:When in Rome,do as the Romans do.",
                    "question": "In Poland,it is   _   for the hostess to remove the cover of the bunch of flowers somebody has presented to her.",
                    "options": [
                        "impolite",
                        "polite",
                        "strange",
                        "popular"
                    ],
                    "prediction_before_change": "impolite",
                    "gold_answer": "impolite",
                    "prediction": "impolite",
                    "changed": {
                        "from": "Bulgaria",
                        "to": "Indonesia"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "If an American is satisfied with you,he will put his thumb and forefinger into a circle.That means OK.But in Brazil,the very sign is considered to be rude.In Turkey,a guest usually presents flowers to his hostess.The number must be an odd one.Besides,the hostess isn't expected to remove the cover of the bunch of flowers.And usually,the red rose is a sign of love.\nUsually we nod to express our agreement and shake our heads to show disagreement.To our surprise these body movements mean the opposite in Bulgaria.\nThe differences in customs and cultures in the world are really noticeable.We should learn more about them to avoid embarrassment .Then,would you please remember:When in Rome,do as the Romans do.",
                    "question": "In Turkey,it is   _   for the hostess to remove the cover of the bunch of flowers somebody has presented to her.",
                    "options": [
                        "impolite",
                        "polite",
                        "strange",
                        "popular"
                    ],
                    "prediction_before_change": "impolite",
                    "gold_answer": "impolite",
                    "prediction": "impolite",
                    "changed": {
                        "from": "Poland",
                        "to": "Turkey"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "If an American is satisfied with you,he will put his thumb and forefinger into a circle.That means OK.But in Brazil,the very sign is considered to be rude.In Poland,a guest usually presents flowers to his hostess.The number must be an odd one.Besides,the hostess isn't expected to remove the cover of the bunch of flowers.And usually,the red rose is a sign of love.\nUsually we nod to express our agreement and shake our heads to show disagreement.To our surprise these body movements mean the opposite in France.\nThe differences in customs and cultures in the world are really noticeable.We should learn more about them to avoid embarrassment .Then,would you please remember:When in Rome,do as the Romans do.",
                    "question": "In Poland,it is   _   for the hostess to remove the cover of the bunch of flowers somebody has presented to her.",
                    "options": [
                        "impolite",
                        "polite",
                        "strange",
                        "popular"
                    ],
                    "prediction_before_change": "impolite",
                    "gold_answer": "impolite",
                    "prediction": "impolite",
                    "changed": {
                        "from": "Bulgaria",
                        "to": "France"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "If an American is satisfied with you,he will put his thumb and forefinger into a circle.That means OK.But in Brazil,the very sign is considered to be rude.In Venezuela,a guest usually presents flowers to his hostess.The number must be an odd one.Besides,the hostess isn't expected to remove the cover of the bunch of flowers.And usually,the red rose is a sign of love.\nUsually we nod to express our agreement and shake our heads to show disagreement.To our surprise these body movements mean the opposite in Bulgaria.\nThe differences in customs and cultures in the world are really noticeable.We should learn more about them to avoid embarrassment .Then,would you please remember:When in Rome,do as the Romans do.",
                    "question": "In Venezuela,it is   _   for the hostess to remove the cover of the bunch of flowers somebody has presented to her.",
                    "options": [
                        "impolite",
                        "polite",
                        "strange",
                        "popular"
                    ],
                    "prediction_before_change": "impolite",
                    "gold_answer": "impolite",
                    "prediction": "impolite",
                    "changed": {
                        "from": "Poland",
                        "to": "Venezuela"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "Dr. Sharon M. Draper is an excellent teacher as well as a successful writer. She is a woman of achievements.\nShe had been honored  as the National Teacher of the Year, is a five-time winner of the Coretta Scott King Literary Awards, and is a New York Times bestselling writer. Tears of a Tiger has received many awards. It was one of the top 100 books for young adults.\nShe was chosen as Ohio's Outstanding High School Language Arts Educator, Ohio Teacher of the Year, and as a NCNW Excellence in Teaching Award winner.\nShe is a Milken Family Foundation National Educator Award winner.\nShe is a YWCA Career Woman of Achievement, and is the recipient  if the Dean's Award from Howard University School of Education.\n5 years ago she was named Ohio Pioneer in Education by the Ohio State Department of Education, and received the Beacon of Light Humanitarian Award, as well as the Doctor of Laws Degree from Pepperdine University.\nShe has been honored at the White House six times, and was chosen as one of only four writers in the country to speak at National Book Festival Gala in Washington, D.C. Her book Copper Sun has been chosen by the US State Department and the International Reading Association as the United States novel for the international reading project. Students in the US, Nigeria, and Angola are reading the book and sharing the ideas.\nShe has worked all over the United States, as well as in Russia, Angola, Togo, Kenya, Ethiopia, Bermuda, and Guam, spreading the word about the power of successful teaching and excellence in education.\nShe became known when she won first prize in a literary  competition. She was given $5000 and her short story, One Small Torch, came out. Besides her short stories, poems, articles can often be read in literary journals . Her books are also very popular in America, too. Here are some:\nWe Beat the Street (Dutton, 2005)\nCopper Sun (Simon and Schuster, 2006)\nFire from the Rock (Dutton, 2007)\nJust Another Hero (Simon and Schuster, 2009)\nOut of my Mind (Simon and Schuster, 2010)",
                    "question": "Many honors were offered to Draper including   _  .",
                    "options": [
                        "the White House",
                        "Ohio Pioneer in Education",
                        "New York Times",
                        "Language Arts Educator"
                    ],
                    "prediction_before_change": "She has been honored at the White House six times, and was chosen as one of only four writers in the country to speak at National Book Festival Gala in Washington, D.C. Her book Copper Sun has been chosen by the US State Department and the International Reading Association as the United States novel for the international reading project. Students in the US, Nigeria, and Ghana are reading the book and sharing the ideas.",
                    "gold_answer": "Ohio Pioneer in Education",
                    "prediction": "She has been honored at the White House six times, and was chosen as one of only four writers in the country to speak at National Book Festival Gala in Washington, D.C. Her book Copper Sun has been chosen by the US State Department and the International Reading Association as the United States novel for the international reading project. Students in the US, Nigeria, and Angola are reading the book and sharing the ideas.",
                    "changed": {
                        "from": "Ghana",
                        "to": "Angola"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "Dr. Sharon M. Draper is an excellent teacher as well as a successful writer. She is a woman of achievements.\nShe had been honored  as the National Teacher of the Year, is a five-time winner of the Coretta Scott King Literary Awards, and is a New York Times bestselling writer. Tears of a Tiger has received many awards. It was one of the top 100 books for young adults.\nShe was chosen as Ohio's Outstanding High School Language Arts Educator, Ohio Teacher of the Year, and as a NCNW Excellence in Teaching Award winner.\nShe is a Milken Family Foundation National Educator Award winner.\nShe is a YWCA Career Woman of Achievement, and is the recipient  if the Dean's Award from Howard University School of Education.\n5 years ago she was named Ohio Pioneer in Education by the Ohio State Department of Education, and received the Beacon of Light Humanitarian Award, as well as the Doctor of Laws Degree from Pepperdine University.\nShe has been honored at the White House six times, and was chosen as one of only four writers in the country to speak at National Book Festival Gala in Washington, D.C. Her book Copper Sun has been chosen by the US State Department and the International Reading Association as the United States novel for the international reading project. Students in the US, Nigeria, and Ghana are reading the book and sharing the ideas.\nShe has worked all over the United States, as well as in Russia, Ghana, Colombia, Kenya, Ethiopia, Bermuda, and Guam, spreading the word about the power of successful teaching and excellence in education.\nShe became known when she won first prize in a literary  competition. She was given $5000 and her short story, One Small Torch, came out. Besides her short stories, poems, articles can often be read in literary journals . Her books are also very popular in America, too. Here are some:\nWe Beat the Street (Dutton, 2005)\nCopper Sun (Simon and Schuster, 2006)\nFire from the Rock (Dutton, 2007)\nJust Another Hero (Simon and Schuster, 2009)\nOut of my Mind (Simon and Schuster, 2010)",
                    "question": "Many honors were offered to Draper including   _  .",
                    "options": [
                        "the White House",
                        "Ohio Pioneer in Education",
                        "New York Times",
                        "Language Arts Educator"
                    ],
                    "prediction_before_change": "She has been honored at the White House six times, and was chosen as one of only four writers in the country to speak at National Book Festival Gala in Washington, D.C. Her book Copper Sun has been chosen by the US State Department and the International Reading Association as the United States novel for the international reading project. Students in the US, Nigeria, and Ghana are reading the book and sharing the ideas.",
                    "gold_answer": "Ohio Pioneer in Education",
                    "prediction": "She has been honored at the White House six times, and was chosen as one of only four writers in the country to speak at National Book Festival Gala in Washington, D.C. Her book Copper Sun has been chosen by the US State Department and the International Reading Association as the United States novel for the international reading project. Students in the US, Nigeria, and Ghana are reading the book and sharing the ideas.",
                    "changed": {
                        "from": "Togo",
                        "to": "Colombia"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "Dr. Sharon M. Draper is an excellent teacher as well as a successful writer. She is a woman of achievements.\nShe had been honored  as the National Teacher of the Year, is a five-time winner of the Coretta Scott King Literary Awards, and is a New York Times bestselling writer. Tears of a Tiger has received many awards. It was one of the top 100 books for young adults.\nShe was chosen as Ohio's Outstanding High School Language Arts Educator, Ohio Teacher of the Year, and as a NCNW Excellence in Teaching Award winner.\nShe is a Milken Family Foundation National Educator Award winner.\nShe is a YWCA Career Woman of Achievement, and is the recipient  if the Dean's Award from Howard University School of Education.\n5 years ago she was named Ohio Pioneer in Education by the Ohio State Department of Education, and received the Beacon of Light Humanitarian Award, as well as the Doctor of Laws Degree from Pepperdine University.\nShe has been honored at the White House six times, and was chosen as one of only four writers in the country to speak at National Book Festival Gala in Washington, D.C. Her book Copper Sun has been chosen by the US State Department and the International Reading Association as the United States novel for the international reading project. Students in the US, Nigeria, and Myanmar are reading the book and sharing the ideas.\nShe has worked all over the United States, as well as in Russia, Myanmar, Togo, Kenya, Ethiopia, Bermuda, and Guam, spreading the word about the power of successful teaching and excellence in education.\nShe became known when she won first prize in a literary  competition. She was given $5000 and her short story, One Small Torch, came out. Besides her short stories, poems, articles can often be read in literary journals . Her books are also very popular in America, too. Here are some:\nWe Beat the Street (Dutton, 2005)\nCopper Sun (Simon and Schuster, 2006)\nFire from the Rock (Dutton, 2007)\nJust Another Hero (Simon and Schuster, 2009)\nOut of my Mind (Simon and Schuster, 2010)",
                    "question": "Many honors were offered to Draper including   _  .",
                    "options": [
                        "the White House",
                        "Ohio Pioneer in Education",
                        "New York Times",
                        "Language Arts Educator"
                    ],
                    "prediction_before_change": "She has been honored at the White House six times, and was chosen as one of only four writers in the country to speak at National Book Festival Gala in Washington, D.C. Her book Copper Sun has been chosen by the US State Department and the International Reading Association as the United States novel for the international reading project. Students in the US, Nigeria, and Ghana are reading the book and sharing the ideas.",
                    "gold_answer": "Ohio Pioneer in Education",
                    "prediction": "She has been honored at the White House six times, and was chosen as one of only four writers in the country to speak at National Book Festival Gala in Washington, D.C. Her book Copper Sun has been chosen by the US State Department and the International Reading Association as the United States novel for the international reading project. Students in the US, Nigeria, and Myanmar are reading the book and sharing the ideas.",
                    "changed": {
                        "from": "Ghana",
                        "to": "Myanmar"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "Dr. Sharon M. Draper is an excellent teacher as well as a successful writer. She is a woman of achievements.\nShe had been honored  as the National Teacher of the Year, is a five-time winner of the Coretta Scott King Literary Awards, and is a New York Times bestselling writer. Tears of a Tiger has received many awards. It was one of the top 100 books for young adults.\nShe was chosen as Ohio's Outstanding High School Language Arts Educator, Ohio Teacher of the Year, and as a NCNW Excellence in Teaching Award winner.\nShe is a Milken Family Foundation National Educator Award winner.\nShe is a YWCA Career Woman of Achievement, and is the recipient  if the Dean's Award from Howard University School of Education.\n5 years ago she was named Ohio Pioneer in Education by the Ohio State Department of Education, and received the Beacon of Light Humanitarian Award, as well as the Doctor of Laws Degree from Pepperdine University.\nShe has been honored at the White House six times, and was chosen as one of only four writers in the country to speak at National Book Festival Gala in Washington, D.C. Her book Copper Sun has been chosen by the US State Department and the International Reading Association as the United States novel for the international reading project. Students in the US, Nigeria, and Ghana are reading the book and sharing the ideas.\nShe has worked all over the United States, as well as in Russia, Ghana, Togo, Uzbekistan, Ethiopia, Bermuda, and Guam, spreading the word about the power of successful teaching and excellence in education.\nShe became known when she won first prize in a literary  competition. She was given $5000 and her short story, One Small Torch, came out. Besides her short stories, poems, articles can often be read in literary journals . Her books are also very popular in America, too. Here are some:\nWe Beat the Street (Dutton, 2005)\nCopper Sun (Simon and Schuster, 2006)\nFire from the Rock (Dutton, 2007)\nJust Another Hero (Simon and Schuster, 2009)\nOut of my Mind (Simon and Schuster, 2010)",
                    "question": "Many honors were offered to Draper including   _  .",
                    "options": [
                        "the White House",
                        "Ohio Pioneer in Education",
                        "New York Times",
                        "Language Arts Educator"
                    ],
                    "prediction_before_change": "She has been honored at the White House six times, and was chosen as one of only four writers in the country to speak at National Book Festival Gala in Washington, D.C. Her book Copper Sun has been chosen by the US State Department and the International Reading Association as the United States novel for the international reading project. Students in the US, Nigeria, and Ghana are reading the book and sharing the ideas.",
                    "gold_answer": "Ohio Pioneer in Education",
                    "prediction": "She has been honored at the White House six times, and was chosen as one of only four writers in the country to speak at National Book Festival Gala in Washington, D.C. Her book Copper Sun has been chosen by the US State Department and the International Reading Association as the United States novel for the international reading project. Students in the US, Nigeria, and Ghana are reading the book and sharing the ideas.",
                    "changed": {
                        "from": "Kenya",
                        "to": "Uzbekistan"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "Dr. Sharon M. Draper is an excellent teacher as well as a successful writer. She is a woman of achievements.\nShe had been honored  as the National Teacher of the Year, is a five-time winner of the Coretta Scott King Literary Awards, and is a New York Times bestselling writer. Tears of a Tiger has received many awards. It was one of the top 100 books for young adults.\nShe was chosen as Ohio's Outstanding High School Language Arts Educator, Ohio Teacher of the Year, and as a NCNW Excellence in Teaching Award winner.\nShe is a Milken Family Foundation National Educator Award winner.\nShe is a YWCA Career Woman of Achievement, and is the recipient  if the Dean's Award from Howard University School of Education.\n5 years ago she was named Ohio Pioneer in Education by the Ohio State Department of Education, and received the Beacon of Light Humanitarian Award, as well as the Doctor of Laws Degree from Pepperdine University.\nShe has been honored at the White House six times, and was chosen as one of only four writers in the country to speak at National Book Festival Gala in Lexington-Fayette, D.C. Her book Copper Sun has been chosen by the US State Department and the International Reading Association as the United States novel for the international reading project. Students in the US, Nigeria, and Ghana are reading the book and sharing the ideas.\nShe has worked all over the United States, as well as in Russia, Ghana, Togo, Kenya, Ethiopia, Bermuda, and Guam, spreading the word about the power of successful teaching and excellence in education.\nShe became known when she won first prize in a literary  competition. She was given $5000 and her short story, One Small Torch, came out. Besides her short stories, poems, articles can often be read in literary journals . Her books are also very popular in America, too. Here are some:\nWe Beat the Street (Dutton, 2005)\nCopper Sun (Simon and Schuster, 2006)\nFire from the Rock (Dutton, 2007)\nJust Another Hero (Simon and Schuster, 2009)\nOut of my Mind (Simon and Schuster, 2010)",
                    "question": "Many honors were offered to Draper including   _  .",
                    "options": [
                        "the White House",
                        "Ohio Pioneer in Education",
                        "New York Times",
                        "Language Arts Educator"
                    ],
                    "prediction_before_change": "She has been honored at the White House six times, and was chosen as one of only four writers in the country to speak at National Book Festival Gala in Washington, D.C. Her book Copper Sun has been chosen by the US State Department and the International Reading Association as the United States novel for the international reading project. Students in the US, Nigeria, and Ghana are reading the book and sharing the ideas.",
                    "gold_answer": "Ohio Pioneer in Education",
                    "prediction": "She had been honored  as the National Teacher of the Year, is a five-time winner of the Coretta Scott King Literary Awards, and is a New York Times bestselling writer. Tears of a Tiger has received many awards. It was one of the top 100 books for young adults.",
                    "changed": {
                        "from": "Washington",
                        "to": "Lexington-Fayette"
                    },
                    "success_failed": "failed"
                },
                {
                    "context": "Dr. Sharon M. Draper is an excellent teacher as well as a successful writer. She is a woman of achievements.\nShe had been honored  as the National Teacher of the Year, is a five-time winner of the Coretta Scott King Literary Awards, and is a New York Times bestselling writer. Tears of a Tiger has received many awards. It was one of the top 100 books for young adults.\nShe was chosen as Ohio's Outstanding High School Language Arts Educator, Ohio Teacher of the Year, and as a NCNW Excellence in Teaching Award winner.\nShe is a Milken Family Foundation National Educator Award winner.\nShe is a YWCA Career Woman of Achievement, and is the recipient  if the Dean's Award from Howard University School of Education.\n5 years ago she was named Ohio Pioneer in Education by the Ohio State Department of Education, and received the Beacon of Light Humanitarian Award, as well as the Doctor of Laws Degree from Pepperdine University.\nShe has been honored at the White House six times, and was chosen as one of only four writers in the country to speak at National Book Festival Gala in Washington, D.C. Her book Copper Sun has been chosen by the US State Department and the International Reading Association as the United States novel for the international reading project. Students in the US, Nigeria, and Ghana are reading the book and sharing the ideas.\nShe has worked all over the United States, as well as in Russia, Ghana, Togo, Kenya, Ethiopia, Bermuda, and Korea, spreading the word about the power of successful teaching and excellence in education.\nShe became known when she won first prize in a literary  competition. She was given $5000 and her short story, One Small Torch, came out. Besides her short stories, poems, articles can often be read in literary journals . Her books are also very popular in America, too. Here are some:\nWe Beat the Street (Dutton, 2005)\nCopper Sun (Simon and Schuster, 2006)\nFire from the Rock (Dutton, 2007)\nJust Another Hero (Simon and Schuster, 2009)\nOut of my Mind (Simon and Schuster, 2010)",
                    "question": "Many honors were offered to Draper including   _  .",
                    "options": [
                        "the White House",
                        "Ohio Pioneer in Education",
                        "New York Times",
                        "Language Arts Educator"
                    ],
                    "prediction_before_change": "She has been honored at the White House six times, and was chosen as one of only four writers in the country to speak at National Book Festival Gala in Washington, D.C. Her book Copper Sun has been chosen by the US State Department and the International Reading Association as the United States novel for the international reading project. Students in the US, Nigeria, and Ghana are reading the book and sharing the ideas.",
                    "gold_answer": "Ohio Pioneer in Education",
                    "prediction": "She has been honored at the White House six times, and was chosen as one of only four writers in the country to speak at National Book Festival Gala in Washington, D.C. Her book Copper Sun has been chosen by the US State Department and the International Reading Association as the United States novel for the international reading project. Students in the US, Nigeria, and Ghana are reading the book and sharing the ideas.",
                    "changed": {
                        "from": "Guam",
                        "to": "Korea"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "Dr. Sharon M. Draper is an excellent teacher as well as a successful writer. She is a woman of achievements.\nShe had been honored  as the National Teacher of the Year, is a five-time winner of the Coretta Scott King Literary Awards, and is a New York Times bestselling writer. Tears of a Tiger has received many awards. It was one of the top 100 books for young adults.\nShe was chosen as Ohio's Outstanding High School Language Arts Educator, Ohio Teacher of the Year, and as a NCNW Excellence in Teaching Award winner.\nShe is a Milken Family Foundation National Educator Award winner.\nShe is a YWCA Career Woman of Achievement, and is the recipient  if the Dean's Award from Howard University School of Education.\n5 years ago she was named Ohio Pioneer in Education by the Ohio State Department of Education, and received the Beacon of Light Humanitarian Award, as well as the Doctor of Laws Degree from Pepperdine University.\nShe has been honored at the White House six times, and was chosen as one of only four writers in the country to speak at National Book Festival Gala in Washington, D.C. Her book Copper Sun has been chosen by the US State Department and the International Reading Association as the United States novel for the international reading project. Students in the US, Kenya, and Ghana are reading the book and sharing the ideas.\nShe has worked all over the United States, as well as in Russia, Ghana, Togo, Kenya, Ethiopia, Bermuda, and Guam, spreading the word about the power of successful teaching and excellence in education.\nShe became known when she won first prize in a literary  competition. She was given $5000 and her short story, One Small Torch, came out. Besides her short stories, poems, articles can often be read in literary journals . Her books are also very popular in America, too. Here are some:\nWe Beat the Street (Dutton, 2005)\nCopper Sun (Simon and Schuster, 2006)\nFire from the Rock (Dutton, 2007)\nJust Another Hero (Simon and Schuster, 2009)\nOut of my Mind (Simon and Schuster, 2010)",
                    "question": "Many honors were offered to Draper including   _  .",
                    "options": [
                        "the White House",
                        "Ohio Pioneer in Education",
                        "New York Times",
                        "Language Arts Educator"
                    ],
                    "prediction_before_change": "She has been honored at the White House six times, and was chosen as one of only four writers in the country to speak at National Book Festival Gala in Washington, D.C. Her book Copper Sun has been chosen by the US State Department and the International Reading Association as the United States novel for the international reading project. Students in the US, Nigeria, and Ghana are reading the book and sharing the ideas.",
                    "gold_answer": "Ohio Pioneer in Education",
                    "prediction": "She has been honored at the White House six times, and was chosen as one of only four writers in the country to speak at National Book Festival Gala in Washington, D.C. Her book Copper Sun has been chosen by the US State Department and the International Reading Association as the United States novel for the international reading project. Students in the US, Kenya, and Ghana are reading the book and sharing the ideas.",
                    "changed": {
                        "from": "Nigeria",
                        "to": "Kenya"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "Dr. Sharon M. Draper is an excellent teacher as well as a successful writer. She is a woman of achievements.\nShe had been honored  as the National Teacher of the Year, is a five-time winner of the Coretta Scott King Literary Awards, and is a New York Times bestselling writer. Tears of a Tiger has received many awards. It was one of the top 100 books for young adults.\nShe was chosen as Ohio's Outstanding High School Language Arts Educator, Ohio Teacher of the Year, and as a NCNW Excellence in Teaching Award winner.\nShe is a Milken Family Foundation National Educator Award winner.\nShe is a YWCA Career Woman of Achievement, and is the recipient  if the Dean's Award from Howard University School of Education.\n5 years ago she was named Ohio Pioneer in Education by the Ohio State Department of Education, and received the Beacon of Light Humanitarian Award, as well as the Doctor of Laws Degree from Pepperdine University.\nShe has been honored at the White House six times, and was chosen as one of only four writers in the country to speak at National Book Festival Gala in Washington, D.C. Her book Copper Sun has been chosen by the US State Department and the International Reading Association as the United States novel for the international reading project. Students in the US, Nigeria, and Afghanistan are reading the book and sharing the ideas.\nShe has worked all over the United States, as well as in Russia, Afghanistan, Togo, Kenya, Ethiopia, Bermuda, and Guam, spreading the word about the power of successful teaching and excellence in education.\nShe became known when she won first prize in a literary  competition. She was given $5000 and her short story, One Small Torch, came out. Besides her short stories, poems, articles can often be read in literary journals . Her books are also very popular in America, too. Here are some:\nWe Beat the Street (Dutton, 2005)\nCopper Sun (Simon and Schuster, 2006)\nFire from the Rock (Dutton, 2007)\nJust Another Hero (Simon and Schuster, 2009)\nOut of my Mind (Simon and Schuster, 2010)",
                    "question": "Many honors were offered to Draper including   _  .",
                    "options": [
                        "the White House",
                        "Ohio Pioneer in Education",
                        "New York Times",
                        "Language Arts Educator"
                    ],
                    "prediction_before_change": "She has been honored at the White House six times, and was chosen as one of only four writers in the country to speak at National Book Festival Gala in Washington, D.C. Her book Copper Sun has been chosen by the US State Department and the International Reading Association as the United States novel for the international reading project. Students in the US, Nigeria, and Ghana are reading the book and sharing the ideas.",
                    "gold_answer": "Ohio Pioneer in Education",
                    "prediction": "She has been honored at the White House six times, and was chosen as one of only four writers in the country to speak at National Book Festival Gala in Washington, D.C. Her book Copper Sun has been chosen by the US State Department and the International Reading Association as the United States novel for the international reading project. Students in the US, Nigeria, and Afghanistan are reading the book and sharing the ideas.",
                    "changed": {
                        "from": "Ghana",
                        "to": "Afghanistan"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "Dr. Sharon M. Draper is an excellent teacher as well as a successful writer. She is a woman of achievements.\nShe had been honored  as the National Teacher of the Year, is a five-time winner of the Coretta Scott King Literary Awards, and is a New York Times bestselling writer. Tears of a Tiger has received many awards. It was one of the top 100 books for young adults.\nShe was chosen as Ohio's Outstanding High School Language Arts Educator, Ohio Teacher of the Year, and as a NCNW Excellence in Teaching Award winner.\nShe is a Milken Family Foundation National Educator Award winner.\nShe is a YWCA Career Woman of Achievement, and is the recipient  if the Dean's Award from Howard University School of Education.\n5 years ago she was named Ohio Pioneer in Education by the Ohio State Department of Education, and received the Beacon of Light Humanitarian Award, as well as the Doctor of Laws Degree from Pepperdine University.\nShe has been honored at the White House six times, and was chosen as one of only four writers in the country to speak at National Book Festival Gala in Washington, D.C. Her book Copper Sun has been chosen by the US State Department and the International Reading Association as the United States novel for the international reading project. Students in the US, Nigeria, and India are reading the book and sharing the ideas.\nShe has worked all over the United States, as well as in Russia, India, Togo, Kenya, Ethiopia, Bermuda, and Guam, spreading the word about the power of successful teaching and excellence in education.\nShe became known when she won first prize in a literary  competition. She was given $5000 and her short story, One Small Torch, came out. Besides her short stories, poems, articles can often be read in literary journals . Her books are also very popular in America, too. Here are some:\nWe Beat the Street (Dutton, 2005)\nCopper Sun (Simon and Schuster, 2006)\nFire from the Rock (Dutton, 2007)\nJust Another Hero (Simon and Schuster, 2009)\nOut of my Mind (Simon and Schuster, 2010)",
                    "question": "Many honors were offered to Draper including   _  .",
                    "options": [
                        "the White House",
                        "Ohio Pioneer in Education",
                        "New York Times",
                        "Language Arts Educator"
                    ],
                    "prediction_before_change": "She has been honored at the White House six times, and was chosen as one of only four writers in the country to speak at National Book Festival Gala in Washington, D.C. Her book Copper Sun has been chosen by the US State Department and the International Reading Association as the United States novel for the international reading project. Students in the US, Nigeria, and Ghana are reading the book and sharing the ideas.",
                    "gold_answer": "Ohio Pioneer in Education",
                    "prediction": "She has been honored at the White House six times, and was chosen as one of only four writers in the country to speak at National Book Festival Gala in Washington, D.C. Her book Copper Sun has been chosen by the US State Department and the International Reading Association as the United States novel for the international reading project. Students in the US, Nigeria, and India are reading the book and sharing the ideas.",
                    "changed": {
                        "from": "Ghana",
                        "to": "India"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "Dr. Sharon M. Draper is an excellent teacher as well as a successful writer. She is a woman of achievements.\nShe had been honored  as the National Teacher of the Year, is a five-time winner of the Coretta Scott King Literary Awards, and is a New York Times bestselling writer. Tears of a Tiger has received many awards. It was one of the top 100 books for young adults.\nShe was chosen as Ohio's Outstanding High School Language Arts Educator, Ohio Teacher of the Year, and as a NCNW Excellence in Teaching Award winner.\nShe is a Milken Family Foundation National Educator Award winner.\nShe is a YWCA Career Woman of Achievement, and is the recipient  if the Dean's Award from Howard University School of Education.\n5 years ago she was named Ohio Pioneer in Education by the Ohio State Department of Education, and received the Beacon of Light Humanitarian Award, as well as the Doctor of Laws Degree from Pepperdine University.\nShe has been honored at the White House six times, and was chosen as one of only four writers in the country to speak at National Book Festival Gala in Washington, D.C. Her book Copper Sun has been chosen by the US State Department and the International Reading Association as the United States novel for the international reading project. Students in the US, Yemen, and Ghana are reading the book and sharing the ideas.\nShe has worked all over the United States, as well as in Russia, Ghana, Togo, Kenya, Ethiopia, Bermuda, and Guam, spreading the word about the power of successful teaching and excellence in education.\nShe became known when she won first prize in a literary  competition. She was given $5000 and her short story, One Small Torch, came out. Besides her short stories, poems, articles can often be read in literary journals . Her books are also very popular in America, too. Here are some:\nWe Beat the Street (Dutton, 2005)\nCopper Sun (Simon and Schuster, 2006)\nFire from the Rock (Dutton, 2007)\nJust Another Hero (Simon and Schuster, 2009)\nOut of my Mind (Simon and Schuster, 2010)",
                    "question": "Many honors were offered to Draper including   _  .",
                    "options": [
                        "the White House",
                        "Ohio Pioneer in Education",
                        "New York Times",
                        "Language Arts Educator"
                    ],
                    "prediction_before_change": "She has been honored at the White House six times, and was chosen as one of only four writers in the country to speak at National Book Festival Gala in Washington, D.C. Her book Copper Sun has been chosen by the US State Department and the International Reading Association as the United States novel for the international reading project. Students in the US, Nigeria, and Ghana are reading the book and sharing the ideas.",
                    "gold_answer": "Ohio Pioneer in Education",
                    "prediction": "She has been honored at the White House six times, and was chosen as one of only four writers in the country to speak at National Book Festival Gala in Washington, D.C. Her book Copper Sun has been chosen by the US State Department and the International Reading Association as the United States novel for the international reading project. Students in the US, Yemen, and Ghana are reading the book and sharing the ideas.",
                    "changed": {
                        "from": "Nigeria",
                        "to": "Yemen"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "Several years ago,a television reporter was talking to three of the most important people in America. One was a very rich banker,another owned one of the largest companies in the world,and the third owned many buildings in the center of Columbus.\nThe reporter was talking to them about being important. \"How do we know if someone is really important?\" the reporter asked the banker.\nThe banker thought for a few moments and then said, \"I think anybody who is invited to the White House to meet the President of the United States is really important. \"\nThe reporter then turned to the owner of the very large company. \"Do you agree with that?\" she asked.\nThe man shook his head, \"No. I think the President invites a lot of people to the White House. You'd only be important if while you were visiting the President, there was a telephone call from the president of another country,and the President of the US said he was too busy to answer it. \"\nThe reporter turned to the third man. \"Do you think so?\"\n\"No, I don't,\" he said. \"I don't think that makes the visitor important. That makes the President important. \"\n\"Then what would make the visitor important?\" the reporter and the other two men asked.\n\"Oh, I think if the visitor to the White House was talking to the President and the phone rang, and the President picked up the receiver, listened and then said, 'It's for you. ' \"",
                    "question": "This story happened in   _  .",
                    "options": [
                        "England",
                        "America",
                        "Japan",
                        "Australia"
                    ],
                    "prediction_before_change": "America",
                    "gold_answer": "America",
                    "prediction": "The reporter was talking to them about being important. \"How do we know if someone is really important?\" the reporter asked the banker.",
                    "changed": {
                        "from": "New York",
                        "to": "Columbus"
                    },
                    "success_failed": "failed"
                },
                {
                    "context": "Several years ago,a television reporter was talking to three of the most important people in America. One was a very rich banker,another owned one of the largest companies in the world,and the third owned many buildings in the center of St. Louis.\nThe reporter was talking to them about being important. \"How do we know if someone is really important?\" the reporter asked the banker.\nThe banker thought for a few moments and then said, \"I think anybody who is invited to the White House to meet the President of the United States is really important. \"\nThe reporter then turned to the owner of the very large company. \"Do you agree with that?\" she asked.\nThe man shook his head, \"No. I think the President invites a lot of people to the White House. You'd only be important if while you were visiting the President, there was a telephone call from the president of another country,and the President of the US said he was too busy to answer it. \"\nThe reporter turned to the third man. \"Do you think so?\"\n\"No, I don't,\" he said. \"I don't think that makes the visitor important. That makes the President important. \"\n\"Then what would make the visitor important?\" the reporter and the other two men asked.\n\"Oh, I think if the visitor to the White House was talking to the President and the phone rang, and the President picked up the receiver, listened and then said, 'It's for you. ' \"",
                    "question": "This story happened in   _  .",
                    "options": [
                        "England",
                        "America",
                        "Japan",
                        "Australia"
                    ],
                    "prediction_before_change": "America",
                    "gold_answer": "America",
                    "prediction": "America",
                    "changed": {
                        "from": "New York",
                        "to": "St. Louis"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "Several years ago,a television reporter was talking to three of the most important people in America. One was a very rich banker,another owned one of the largest companies in the world,and the third owned many buildings in the center of Seattle.\nThe reporter was talking to them about being important. \"How do we know if someone is really important?\" the reporter asked the banker.\nThe banker thought for a few moments and then said, \"I think anybody who is invited to the White House to meet the President of the United States is really important. \"\nThe reporter then turned to the owner of the very large company. \"Do you agree with that?\" she asked.\nThe man shook his head, \"No. I think the President invites a lot of people to the White House. You'd only be important if while you were visiting the President, there was a telephone call from the president of another country,and the President of the US said he was too busy to answer it. \"\nThe reporter turned to the third man. \"Do you think so?\"\n\"No, I don't,\" he said. \"I don't think that makes the visitor important. That makes the President important. \"\n\"Then what would make the visitor important?\" the reporter and the other two men asked.\n\"Oh, I think if the visitor to the White House was talking to the President and the phone rang, and the President picked up the receiver, listened and then said, 'It's for you. ' \"",
                    "question": "This story happened in   _  .",
                    "options": [
                        "England",
                        "America",
                        "Japan",
                        "Australia"
                    ],
                    "prediction_before_change": "America",
                    "gold_answer": "America",
                    "prediction": "America",
                    "changed": {
                        "from": "New York",
                        "to": "Seattle"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "Several years ago,a television reporter was talking to three of the most important people in America. One was a very rich banker,another owned one of the largest companies in the world,and the third owned many buildings in the center of San Francisco.\nThe reporter was talking to them about being important. \"How do we know if someone is really important?\" the reporter asked the banker.\nThe banker thought for a few moments and then said, \"I think anybody who is invited to the White House to meet the President of the United States is really important. \"\nThe reporter then turned to the owner of the very large company. \"Do you agree with that?\" she asked.\nThe man shook his head, \"No. I think the President invites a lot of people to the White House. You'd only be important if while you were visiting the President, there was a telephone call from the president of another country,and the President of the US said he was too busy to answer it. \"\nThe reporter turned to the third man. \"Do you think so?\"\n\"No, I don't,\" he said. \"I don't think that makes the visitor important. That makes the President important. \"\n\"Then what would make the visitor important?\" the reporter and the other two men asked.\n\"Oh, I think if the visitor to the White House was talking to the President and the phone rang, and the President picked up the receiver, listened and then said, 'It's for you. ' \"",
                    "question": "This story happened in   _  .",
                    "options": [
                        "England",
                        "America",
                        "Japan",
                        "Australia"
                    ],
                    "prediction_before_change": "America",
                    "gold_answer": "America",
                    "prediction": "America",
                    "changed": {
                        "from": "New York",
                        "to": "San Francisco"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "Several years ago,a television reporter was talking to three of the most important people in America. One was a very rich banker,another owned one of the largest companies in the world,and the third owned many buildings in the center of Columbus.\nThe reporter was talking to them about being important. \"How do we know if someone is really important?\" the reporter asked the banker.\nThe banker thought for a few moments and then said, \"I think anybody who is invited to the White House to meet the President of the United States is really important. \"\nThe reporter then turned to the owner of the very large company. \"Do you agree with that?\" she asked.\nThe man shook his head, \"No. I think the President invites a lot of people to the White House. You'd only be important if while you were visiting the President, there was a telephone call from the president of another country,and the President of the US said he was too busy to answer it. \"\nThe reporter turned to the third man. \"Do you think so?\"\n\"No, I don't,\" he said. \"I don't think that makes the visitor important. That makes the President important. \"\n\"Then what would make the visitor important?\" the reporter and the other two men asked.\n\"Oh, I think if the visitor to the White House was talking to the President and the phone rang, and the President picked up the receiver, listened and then said, 'It's for you. ' \"",
                    "question": "This story happened in   _  .",
                    "options": [
                        "England",
                        "America",
                        "Japan",
                        "Australia"
                    ],
                    "prediction_before_change": "America",
                    "gold_answer": "America",
                    "prediction": "The reporter was talking to them about being important. \"How do we know if someone is really important?\" the reporter asked the banker.",
                    "changed": {
                        "from": "New York",
                        "to": "Columbus"
                    },
                    "success_failed": "failed"
                },
                {
                    "context": "Several years ago,a television reporter was talking to three of the most important people in America. One was a very rich banker,another owned one of the largest companies in the world,and the third owned many buildings in the center of Plano.\nThe reporter was talking to them about being important. \"How do we know if someone is really important?\" the reporter asked the banker.\nThe banker thought for a few moments and then said, \"I think anybody who is invited to the White House to meet the President of the United States is really important. \"\nThe reporter then turned to the owner of the very large company. \"Do you agree with that?\" she asked.\nThe man shook his head, \"No. I think the President invites a lot of people to the White House. You'd only be important if while you were visiting the President, there was a telephone call from the president of another country,and the President of the US said he was too busy to answer it. \"\nThe reporter turned to the third man. \"Do you think so?\"\n\"No, I don't,\" he said. \"I don't think that makes the visitor important. That makes the President important. \"\n\"Then what would make the visitor important?\" the reporter and the other two men asked.\n\"Oh, I think if the visitor to the White House was talking to the President and the phone rang, and the President picked up the receiver, listened and then said, 'It's for you. ' \"",
                    "question": "This story happened in   _  .",
                    "options": [
                        "England",
                        "America",
                        "Japan",
                        "Australia"
                    ],
                    "prediction_before_change": "America",
                    "gold_answer": "America",
                    "prediction": "The reporter was talking to them about being important. \"How do we know if someone is really important?\" the reporter asked the banker.",
                    "changed": {
                        "from": "New York",
                        "to": "Plano"
                    },
                    "success_failed": "failed"
                },
                {
                    "context": "Several years ago,a television reporter was talking to three of the most important people in America. One was a very rich banker,another owned one of the largest companies in the world,and the third owned many buildings in the center of Boise City.\nThe reporter was talking to them about being important. \"How do we know if someone is really important?\" the reporter asked the banker.\nThe banker thought for a few moments and then said, \"I think anybody who is invited to the White House to meet the President of the United States is really important. \"\nThe reporter then turned to the owner of the very large company. \"Do you agree with that?\" she asked.\nThe man shook his head, \"No. I think the President invites a lot of people to the White House. You'd only be important if while you were visiting the President, there was a telephone call from the president of another country,and the President of the US said he was too busy to answer it. \"\nThe reporter turned to the third man. \"Do you think so?\"\n\"No, I don't,\" he said. \"I don't think that makes the visitor important. That makes the President important. \"\n\"Then what would make the visitor important?\" the reporter and the other two men asked.\n\"Oh, I think if the visitor to the White House was talking to the President and the phone rang, and the President picked up the receiver, listened and then said, 'It's for you. ' \"",
                    "question": "This story happened in   _  .",
                    "options": [
                        "England",
                        "America",
                        "Japan",
                        "Australia"
                    ],
                    "prediction_before_change": "America",
                    "gold_answer": "America",
                    "prediction": "America",
                    "changed": {
                        "from": "New York",
                        "to": "Boise City"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "Several years ago,a television reporter was talking to three of the most important people in America. One was a very rich banker,another owned one of the largest companies in the world,and the third owned many buildings in the center of Atlanta.\nThe reporter was talking to them about being important. \"How do we know if someone is really important?\" the reporter asked the banker.\nThe banker thought for a few moments and then said, \"I think anybody who is invited to the White House to meet the President of the United States is really important. \"\nThe reporter then turned to the owner of the very large company. \"Do you agree with that?\" she asked.\nThe man shook his head, \"No. I think the President invites a lot of people to the White House. You'd only be important if while you were visiting the President, there was a telephone call from the president of another country,and the President of the US said he was too busy to answer it. \"\nThe reporter turned to the third man. \"Do you think so?\"\n\"No, I don't,\" he said. \"I don't think that makes the visitor important. That makes the President important. \"\n\"Then what would make the visitor important?\" the reporter and the other two men asked.\n\"Oh, I think if the visitor to the White House was talking to the President and the phone rang, and the President picked up the receiver, listened and then said, 'It's for you. ' \"",
                    "question": "This story happened in   _  .",
                    "options": [
                        "England",
                        "America",
                        "Japan",
                        "Australia"
                    ],
                    "prediction_before_change": "America",
                    "gold_answer": "America",
                    "prediction": "The reporter was talking to them about being important. \"How do we know if someone is really important?\" the reporter asked the banker.",
                    "changed": {
                        "from": "New York",
                        "to": "Atlanta"
                    },
                    "success_failed": "failed"
                },
                {
                    "context": "Several years ago,a television reporter was talking to three of the most important people in America. One was a very rich banker,another owned one of the largest companies in the world,and the third owned many buildings in the center of Denver.\nThe reporter was talking to them about being important. \"How do we know if someone is really important?\" the reporter asked the banker.\nThe banker thought for a few moments and then said, \"I think anybody who is invited to the White House to meet the President of the United States is really important. \"\nThe reporter then turned to the owner of the very large company. \"Do you agree with that?\" she asked.\nThe man shook his head, \"No. I think the President invites a lot of people to the White House. You'd only be important if while you were visiting the President, there was a telephone call from the president of another country,and the President of the US said he was too busy to answer it. \"\nThe reporter turned to the third man. \"Do you think so?\"\n\"No, I don't,\" he said. \"I don't think that makes the visitor important. That makes the President important. \"\n\"Then what would make the visitor important?\" the reporter and the other two men asked.\n\"Oh, I think if the visitor to the White House was talking to the President and the phone rang, and the President picked up the receiver, listened and then said, 'It's for you. ' \"",
                    "question": "This story happened in   _  .",
                    "options": [
                        "England",
                        "America",
                        "Japan",
                        "Australia"
                    ],
                    "prediction_before_change": "America",
                    "gold_answer": "America",
                    "prediction": "America",
                    "changed": {
                        "from": "New York",
                        "to": "Denver"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "Several years ago,a television reporter was talking to three of the most important people in America. One was a very rich banker,another owned one of the largest companies in the world,and the third owned many buildings in the center of Long Beach.\nThe reporter was talking to them about being important. \"How do we know if someone is really important?\" the reporter asked the banker.\nThe banker thought for a few moments and then said, \"I think anybody who is invited to the White House to meet the President of the United States is really important. \"\nThe reporter then turned to the owner of the very large company. \"Do you agree with that?\" she asked.\nThe man shook his head, \"No. I think the President invites a lot of people to the White House. You'd only be important if while you were visiting the President, there was a telephone call from the president of another country,and the President of the US said he was too busy to answer it. \"\nThe reporter turned to the third man. \"Do you think so?\"\n\"No, I don't,\" he said. \"I don't think that makes the visitor important. That makes the President important. \"\n\"Then what would make the visitor important?\" the reporter and the other two men asked.\n\"Oh, I think if the visitor to the White House was talking to the President and the phone rang, and the President picked up the receiver, listened and then said, 'It's for you. ' \"",
                    "question": "This story happened in   _  .",
                    "options": [
                        "England",
                        "America",
                        "Japan",
                        "Australia"
                    ],
                    "prediction_before_change": "America",
                    "gold_answer": "America",
                    "prediction": "The reporter was talking to them about being important. \"How do we know if someone is really important?\" the reporter asked the banker.",
                    "changed": {
                        "from": "New York",
                        "to": "Long Beach"
                    },
                    "success_failed": "failed"
                },
                {
                    "context": "Oliver drove a mile and stopped, ears buzzing from wine and the violent emotion. He saw Jacky again, sitting up on the bed, one hand across her heart, and he felt a stab of pain and longing. It wasn't too late to turn around. They could put the pieces back together; he could serve her, and she would take care of him. Why not? What else was he going to do? He searched around in the glove compartment and found a Willy Nelson tape. Might as well have the real thing. _On the road again . . ._ Shit. He pounded the steering wheel once and kept going. Washington. He made it past the city and began to wear down. He didn't need to hurry--Arlen wasn't expecting him home for a couple of days. He turned off the highway and stopped at a motel. He put his bag on a chair and lay down for a moment. Had he done the right thing? Or was he just running away from commitment? He was in a bind. He couldn't stay in a submissive relationship with Jacky, but the more powerful that he felt as an individual, the lonelier he became and the more he wanted her--or someone. Pie. At least there was pie. Somewhere. He drove down the road until he came to a diner. Two state cops were drinking coffee at one end of the counter. A truck driver and three construction workers sat at the other end. Oliver sat between the two groups and sank further into his feelings. Thirty-five and what did he have to show for it? Six thousand dollars and a cat. An old Jeep. He finished his apple pie and watched the double doors to the kitchen swing shut behind the waitress. The swinging doors dissolved into dark water. He saw Owl overboard, holding his head above the waves. \"Find your father,\" Owl said. Oliver's eyes opened wide. Owl had said that once. \"Someday, you should find your father.\" Oliver thought hard. He had to do something. It was good advice. He made up his mind to try. \"More coffee?\" \"Uh--yes. Please.\"",
                    "question": "After this story ends",
                    "options": [
                        "Oliver talks to the Owl",
                        "Oliver follows the Owl's instructions",
                        "Oliver returns to Arlen",
                        "not enough information"
                    ],
                    "prediction_before_change": "Oliver follows the Owl's instructions",
                    "gold_answer": "Oliver follows the Owl's instructions",
                    "prediction": "Oliver follows the Owl's instructions",
                    "changed": {
                        "from": "Philadelphia",
                        "to": "Washington"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "Oliver drove a mile and stopped, ears buzzing from wine and the violent emotion. He saw Jacky again, sitting up on the bed, one hand across her heart, and he felt a stab of pain and longing. It wasn't too late to turn around. They could put the pieces back together; he could serve her, and she would take care of him. Why not? What else was he going to do? He searched around in the glove compartment and found a Willy Nelson tape. Might as well have the real thing. _On the road again . . ._ Shit. He pounded the steering wheel once and kept going. Boise City. He made it past the city and began to wear down. He didn't need to hurry--Arlen wasn't expecting him home for a couple of days. He turned off the highway and stopped at a motel. He put his bag on a chair and lay down for a moment. Had he done the right thing? Or was he just running away from commitment? He was in a bind. He couldn't stay in a submissive relationship with Jacky, but the more powerful that he felt as an individual, the lonelier he became and the more he wanted her--or someone. Pie. At least there was pie. Somewhere. He drove down the road until he came to a diner. Two state cops were drinking coffee at one end of the counter. A truck driver and three construction workers sat at the other end. Oliver sat between the two groups and sank further into his feelings. Thirty-five and what did he have to show for it? Six thousand dollars and a cat. An old Jeep. He finished his apple pie and watched the double doors to the kitchen swing shut behind the waitress. The swinging doors dissolved into dark water. He saw Owl overboard, holding his head above the waves. \"Find your father,\" Owl said. Oliver's eyes opened wide. Owl had said that once. \"Someday, you should find your father.\" Oliver thought hard. He had to do something. It was good advice. He made up his mind to try. \"More coffee?\" \"Uh--yes. Please.\"",
                    "question": "After this story ends",
                    "options": [
                        "Oliver talks to the Owl",
                        "Oliver follows the Owl's instructions",
                        "Oliver returns to Arlen",
                        "not enough information"
                    ],
                    "prediction_before_change": "Oliver follows the Owl's instructions",
                    "gold_answer": "Oliver follows the Owl's instructions",
                    "prediction": "Oliver follows the Owl's instructions",
                    "changed": {
                        "from": "Philadelphia",
                        "to": "Boise City"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "Oliver drove a mile and stopped, ears buzzing from wine and the violent emotion. He saw Jacky again, sitting up on the bed, one hand across her heart, and he felt a stab of pain and longing. It wasn't too late to turn around. They could put the pieces back together; he could serve her, and she would take care of him. Why not? What else was he going to do? He searched around in the glove compartment and found a Willy Nelson tape. Might as well have the real thing. _On the road again . . ._ Shit. He pounded the steering wheel once and kept going. Atlanta. He made it past the city and began to wear down. He didn't need to hurry--Arlen wasn't expecting him home for a couple of days. He turned off the highway and stopped at a motel. He put his bag on a chair and lay down for a moment. Had he done the right thing? Or was he just running away from commitment? He was in a bind. He couldn't stay in a submissive relationship with Jacky, but the more powerful that he felt as an individual, the lonelier he became and the more he wanted her--or someone. Pie. At least there was pie. Somewhere. He drove down the road until he came to a diner. Two state cops were drinking coffee at one end of the counter. A truck driver and three construction workers sat at the other end. Oliver sat between the two groups and sank further into his feelings. Thirty-five and what did he have to show for it? Six thousand dollars and a cat. An old Jeep. He finished his apple pie and watched the double doors to the kitchen swing shut behind the waitress. The swinging doors dissolved into dark water. He saw Owl overboard, holding his head above the waves. \"Find your father,\" Owl said. Oliver's eyes opened wide. Owl had said that once. \"Someday, you should find your father.\" Oliver thought hard. He had to do something. It was good advice. He made up his mind to try. \"More coffee?\" \"Uh--yes. Please.\"",
                    "question": "After this story ends",
                    "options": [
                        "Oliver talks to the Owl",
                        "Oliver follows the Owl's instructions",
                        "Oliver returns to Arlen",
                        "not enough information"
                    ],
                    "prediction_before_change": "Oliver follows the Owl's instructions",
                    "gold_answer": "Oliver follows the Owl's instructions",
                    "prediction": "Oliver follows the Owl's instructions",
                    "changed": {
                        "from": "Philadelphia",
                        "to": "Atlanta"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "Oliver drove a mile and stopped, ears buzzing from wine and the violent emotion. He saw Jacky again, sitting up on the bed, one hand across her heart, and he felt a stab of pain and longing. It wasn't too late to turn around. They could put the pieces back together; he could serve her, and she would take care of him. Why not? What else was he going to do? He searched around in the glove compartment and found a Willy Nelson tape. Might as well have the real thing. _On the road again . . ._ Shit. He pounded the steering wheel once and kept going. New York. He made it past the city and began to wear down. He didn't need to hurry--Arlen wasn't expecting him home for a couple of days. He turned off the highway and stopped at a motel. He put his bag on a chair and lay down for a moment. Had he done the right thing? Or was he just running away from commitment? He was in a bind. He couldn't stay in a submissive relationship with Jacky, but the more powerful that he felt as an individual, the lonelier he became and the more he wanted her--or someone. Pie. At least there was pie. Somewhere. He drove down the road until he came to a diner. Two state cops were drinking coffee at one end of the counter. A truck driver and three construction workers sat at the other end. Oliver sat between the two groups and sank further into his feelings. Thirty-five and what did he have to show for it? Six thousand dollars and a cat. An old Jeep. He finished his apple pie and watched the double doors to the kitchen swing shut behind the waitress. The swinging doors dissolved into dark water. He saw Owl overboard, holding his head above the waves. \"Find your father,\" Owl said. Oliver's eyes opened wide. Owl had said that once. \"Someday, you should find your father.\" Oliver thought hard. He had to do something. It was good advice. He made up his mind to try. \"More coffee?\" \"Uh--yes. Please.\"",
                    "question": "After this story ends",
                    "options": [
                        "Oliver talks to the Owl",
                        "Oliver follows the Owl's instructions",
                        "Oliver returns to Arlen",
                        "not enough information"
                    ],
                    "prediction_before_change": "Oliver follows the Owl's instructions",
                    "gold_answer": "Oliver follows the Owl's instructions",
                    "prediction": "Oliver follows the Owl's instructions",
                    "changed": {
                        "from": "Philadelphia",
                        "to": "New York"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "Oliver drove a mile and stopped, ears buzzing from wine and the violent emotion. He saw Jacky again, sitting up on the bed, one hand across her heart, and he felt a stab of pain and longing. It wasn't too late to turn around. They could put the pieces back together; he could serve her, and she would take care of him. Why not? What else was he going to do? He searched around in the glove compartment and found a Willy Nelson tape. Might as well have the real thing. _On the road again . . ._ Shit. He pounded the steering wheel once and kept going. Long Beach. He made it past the city and began to wear down. He didn't need to hurry--Arlen wasn't expecting him home for a couple of days. He turned off the highway and stopped at a motel. He put his bag on a chair and lay down for a moment. Had he done the right thing? Or was he just running away from commitment? He was in a bind. He couldn't stay in a submissive relationship with Jacky, but the more powerful that he felt as an individual, the lonelier he became and the more he wanted her--or someone. Pie. At least there was pie. Somewhere. He drove down the road until he came to a diner. Two state cops were drinking coffee at one end of the counter. A truck driver and three construction workers sat at the other end. Oliver sat between the two groups and sank further into his feelings. Thirty-five and what did he have to show for it? Six thousand dollars and a cat. An old Jeep. He finished his apple pie and watched the double doors to the kitchen swing shut behind the waitress. The swinging doors dissolved into dark water. He saw Owl overboard, holding his head above the waves. \"Find your father,\" Owl said. Oliver's eyes opened wide. Owl had said that once. \"Someday, you should find your father.\" Oliver thought hard. He had to do something. It was good advice. He made up his mind to try. \"More coffee?\" \"Uh--yes. Please.\"",
                    "question": "After this story ends",
                    "options": [
                        "Oliver talks to the Owl",
                        "Oliver follows the Owl's instructions",
                        "Oliver returns to Arlen",
                        "not enough information"
                    ],
                    "prediction_before_change": "Oliver follows the Owl's instructions",
                    "gold_answer": "Oliver follows the Owl's instructions",
                    "prediction": "Oliver follows the Owl's instructions",
                    "changed": {
                        "from": "Philadelphia",
                        "to": "Long Beach"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "Oliver drove a mile and stopped, ears buzzing from wine and the violent emotion. He saw Jacky again, sitting up on the bed, one hand across her heart, and he felt a stab of pain and longing. It wasn't too late to turn around. They could put the pieces back together; he could serve her, and she would take care of him. Why not? What else was he going to do? He searched around in the glove compartment and found a Willy Nelson tape. Might as well have the real thing. _On the road again . . ._ Shit. He pounded the steering wheel once and kept going. Los Angeles. He made it past the city and began to wear down. He didn't need to hurry--Arlen wasn't expecting him home for a couple of days. He turned off the highway and stopped at a motel. He put his bag on a chair and lay down for a moment. Had he done the right thing? Or was he just running away from commitment? He was in a bind. He couldn't stay in a submissive relationship with Jacky, but the more powerful that he felt as an individual, the lonelier he became and the more he wanted her--or someone. Pie. At least there was pie. Somewhere. He drove down the road until he came to a diner. Two state cops were drinking coffee at one end of the counter. A truck driver and three construction workers sat at the other end. Oliver sat between the two groups and sank further into his feelings. Thirty-five and what did he have to show for it? Six thousand dollars and a cat. An old Jeep. He finished his apple pie and watched the double doors to the kitchen swing shut behind the waitress. The swinging doors dissolved into dark water. He saw Owl overboard, holding his head above the waves. \"Find your father,\" Owl said. Oliver's eyes opened wide. Owl had said that once. \"Someday, you should find your father.\" Oliver thought hard. He had to do something. It was good advice. He made up his mind to try. \"More coffee?\" \"Uh--yes. Please.\"",
                    "question": "After this story ends",
                    "options": [
                        "Oliver talks to the Owl",
                        "Oliver follows the Owl's instructions",
                        "Oliver returns to Arlen",
                        "not enough information"
                    ],
                    "prediction_before_change": "Oliver follows the Owl's instructions",
                    "gold_answer": "Oliver follows the Owl's instructions",
                    "prediction": "Oliver follows the Owl's instructions",
                    "changed": {
                        "from": "Philadelphia",
                        "to": "Los Angeles"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "Oliver drove a mile and stopped, ears buzzing from wine and the violent emotion. He saw Jacky again, sitting up on the bed, one hand across her heart, and he felt a stab of pain and longing. It wasn't too late to turn around. They could put the pieces back together; he could serve her, and she would take care of him. Why not? What else was he going to do? He searched around in the glove compartment and found a Willy Nelson tape. Might as well have the real thing. _On the road again . . ._ Shit. He pounded the steering wheel once and kept going. Durham. He made it past the city and began to wear down. He didn't need to hurry--Arlen wasn't expecting him home for a couple of days. He turned off the highway and stopped at a motel. He put his bag on a chair and lay down for a moment. Had he done the right thing? Or was he just running away from commitment? He was in a bind. He couldn't stay in a submissive relationship with Jacky, but the more powerful that he felt as an individual, the lonelier he became and the more he wanted her--or someone. Pie. At least there was pie. Somewhere. He drove down the road until he came to a diner. Two state cops were drinking coffee at one end of the counter. A truck driver and three construction workers sat at the other end. Oliver sat between the two groups and sank further into his feelings. Thirty-five and what did he have to show for it? Six thousand dollars and a cat. An old Jeep. He finished his apple pie and watched the double doors to the kitchen swing shut behind the waitress. The swinging doors dissolved into dark water. He saw Owl overboard, holding his head above the waves. \"Find your father,\" Owl said. Oliver's eyes opened wide. Owl had said that once. \"Someday, you should find your father.\" Oliver thought hard. He had to do something. It was good advice. He made up his mind to try. \"More coffee?\" \"Uh--yes. Please.\"",
                    "question": "After this story ends",
                    "options": [
                        "Oliver talks to the Owl",
                        "Oliver follows the Owl's instructions",
                        "Oliver returns to Arlen",
                        "not enough information"
                    ],
                    "prediction_before_change": "Oliver follows the Owl's instructions",
                    "gold_answer": "Oliver follows the Owl's instructions",
                    "prediction": "Oliver follows the Owl's instructions",
                    "changed": {
                        "from": "Philadelphia",
                        "to": "Durham"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "Oliver drove a mile and stopped, ears buzzing from wine and the violent emotion. He saw Jacky again, sitting up on the bed, one hand across her heart, and he felt a stab of pain and longing. It wasn't too late to turn around. They could put the pieces back together; he could serve her, and she would take care of him. Why not? What else was he going to do? He searched around in the glove compartment and found a Willy Nelson tape. Might as well have the real thing. _On the road again . . ._ Shit. He pounded the steering wheel once and kept going. San Antonio. He made it past the city and began to wear down. He didn't need to hurry--Arlen wasn't expecting him home for a couple of days. He turned off the highway and stopped at a motel. He put his bag on a chair and lay down for a moment. Had he done the right thing? Or was he just running away from commitment? He was in a bind. He couldn't stay in a submissive relationship with Jacky, but the more powerful that he felt as an individual, the lonelier he became and the more he wanted her--or someone. Pie. At least there was pie. Somewhere. He drove down the road until he came to a diner. Two state cops were drinking coffee at one end of the counter. A truck driver and three construction workers sat at the other end. Oliver sat between the two groups and sank further into his feelings. Thirty-five and what did he have to show for it? Six thousand dollars and a cat. An old Jeep. He finished his apple pie and watched the double doors to the kitchen swing shut behind the waitress. The swinging doors dissolved into dark water. He saw Owl overboard, holding his head above the waves. \"Find your father,\" Owl said. Oliver's eyes opened wide. Owl had said that once. \"Someday, you should find your father.\" Oliver thought hard. He had to do something. It was good advice. He made up his mind to try. \"More coffee?\" \"Uh--yes. Please.\"",
                    "question": "After this story ends",
                    "options": [
                        "Oliver talks to the Owl",
                        "Oliver follows the Owl's instructions",
                        "Oliver returns to Arlen",
                        "not enough information"
                    ],
                    "prediction_before_change": "Oliver follows the Owl's instructions",
                    "gold_answer": "Oliver follows the Owl's instructions",
                    "prediction": "Oliver follows the Owl's instructions",
                    "changed": {
                        "from": "Philadelphia",
                        "to": "San Antonio"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "Oliver drove a mile and stopped, ears buzzing from wine and the violent emotion. He saw Jacky again, sitting up on the bed, one hand across her heart, and he felt a stab of pain and longing. It wasn't too late to turn around. They could put the pieces back together; he could serve her, and she would take care of him. Why not? What else was he going to do? He searched around in the glove compartment and found a Willy Nelson tape. Might as well have the real thing. _On the road again . . ._ Shit. He pounded the steering wheel once and kept going. Arlington. He made it past the city and began to wear down. He didn't need to hurry--Arlen wasn't expecting him home for a couple of days. He turned off the highway and stopped at a motel. He put his bag on a chair and lay down for a moment. Had he done the right thing? Or was he just running away from commitment? He was in a bind. He couldn't stay in a submissive relationship with Jacky, but the more powerful that he felt as an individual, the lonelier he became and the more he wanted her--or someone. Pie. At least there was pie. Somewhere. He drove down the road until he came to a diner. Two state cops were drinking coffee at one end of the counter. A truck driver and three construction workers sat at the other end. Oliver sat between the two groups and sank further into his feelings. Thirty-five and what did he have to show for it? Six thousand dollars and a cat. An old Jeep. He finished his apple pie and watched the double doors to the kitchen swing shut behind the waitress. The swinging doors dissolved into dark water. He saw Owl overboard, holding his head above the waves. \"Find your father,\" Owl said. Oliver's eyes opened wide. Owl had said that once. \"Someday, you should find your father.\" Oliver thought hard. He had to do something. It was good advice. He made up his mind to try. \"More coffee?\" \"Uh--yes. Please.\"",
                    "question": "After this story ends",
                    "options": [
                        "Oliver talks to the Owl",
                        "Oliver follows the Owl's instructions",
                        "Oliver returns to Arlen",
                        "not enough information"
                    ],
                    "prediction_before_change": "Oliver follows the Owl's instructions",
                    "gold_answer": "Oliver follows the Owl's instructions",
                    "prediction": "Oliver follows the Owl's instructions",
                    "changed": {
                        "from": "Philadelphia",
                        "to": "Arlington"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "Oliver drove a mile and stopped, ears buzzing from wine and the violent emotion. He saw Jacky again, sitting up on the bed, one hand across her heart, and he felt a stab of pain and longing. It wasn't too late to turn around. They could put the pieces back together; he could serve her, and she would take care of him. Why not? What else was he going to do? He searched around in the glove compartment and found a Willy Nelson tape. Might as well have the real thing. _On the road again . . ._ Shit. He pounded the steering wheel once and kept going. Henderson. He made it past the city and began to wear down. He didn't need to hurry--Arlen wasn't expecting him home for a couple of days. He turned off the highway and stopped at a motel. He put his bag on a chair and lay down for a moment. Had he done the right thing? Or was he just running away from commitment? He was in a bind. He couldn't stay in a submissive relationship with Jacky, but the more powerful that he felt as an individual, the lonelier he became and the more he wanted her--or someone. Pie. At least there was pie. Somewhere. He drove down the road until he came to a diner. Two state cops were drinking coffee at one end of the counter. A truck driver and three construction workers sat at the other end. Oliver sat between the two groups and sank further into his feelings. Thirty-five and what did he have to show for it? Six thousand dollars and a cat. An old Jeep. He finished his apple pie and watched the double doors to the kitchen swing shut behind the waitress. The swinging doors dissolved into dark water. He saw Owl overboard, holding his head above the waves. \"Find your father,\" Owl said. Oliver's eyes opened wide. Owl had said that once. \"Someday, you should find your father.\" Oliver thought hard. He had to do something. It was good advice. He made up his mind to try. \"More coffee?\" \"Uh--yes. Please.\"",
                    "question": "After this story ends",
                    "options": [
                        "Oliver talks to the Owl",
                        "Oliver follows the Owl's instructions",
                        "Oliver returns to Arlen",
                        "not enough information"
                    ],
                    "prediction_before_change": "Oliver follows the Owl's instructions",
                    "gold_answer": "Oliver follows the Owl's instructions",
                    "prediction": "Oliver follows the Owl's instructions",
                    "changed": {
                        "from": "Philadelphia",
                        "to": "Henderson"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "After 8 hours of travel time I am safe and sound in the home I was born and rasied . The first thing that comes to mind is OMG , I love the weather ! ! ! ! I had the first taste during my 2 hour layover in Sacramento . Doubt the temperature was over 75 .",
                    "question": "How long did your travel take ?",
                    "options": [
                        "I had an awful layover in Chicago for 8 hours , overall it took 15 hours .",
                        "My flights took an entire day .",
                        "My flights took a third of a day .",
                        "None of the above choices ."
                    ],
                    "prediction_before_change": "My flights took a third of a day .",
                    "gold_answer": "My flights took a third of a day .",
                    "prediction": "My flights took a third of a day .",
                    "changed": {
                        "from": "Chicago",
                        "to": "Sacramento"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "After 8 hours of travel time I am safe and sound in the home I was born and rasied . The first thing that comes to mind is OMG , I love the weather ! ! ! ! I had the first taste during my 2 hour layover in El Paso . Doubt the temperature was over 75 .",
                    "question": "How long did your travel take ?",
                    "options": [
                        "I had an awful layover in Chicago for 8 hours , overall it took 15 hours .",
                        "My flights took an entire day .",
                        "My flights took a third of a day .",
                        "None of the above choices ."
                    ],
                    "prediction_before_change": "My flights took a third of a day .",
                    "gold_answer": "My flights took a third of a day .",
                    "prediction": "My flights took a third of a day .",
                    "changed": {
                        "from": "Chicago",
                        "to": "El Paso"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "After 8 hours of travel time I am safe and sound in the home I was born and rasied . The first thing that comes to mind is OMG , I love the weather ! ! ! ! I had the first taste during my 2 hour layover in Kansas City . Doubt the temperature was over 75 .",
                    "question": "How long did your travel take ?",
                    "options": [
                        "I had an awful layover in Chicago for 8 hours , overall it took 15 hours .",
                        "My flights took an entire day .",
                        "My flights took a third of a day .",
                        "None of the above choices ."
                    ],
                    "prediction_before_change": "My flights took a third of a day .",
                    "gold_answer": "My flights took a third of a day .",
                    "prediction": "My flights took a third of a day .",
                    "changed": {
                        "from": "Chicago",
                        "to": "Kansas City"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "After 8 hours of travel time I am safe and sound in the home I was born and rasied . The first thing that comes to mind is OMG , I love the weather ! ! ! ! I had the first taste during my 2 hour layover in Norfolk . Doubt the temperature was over 75 .",
                    "question": "How long did your travel take ?",
                    "options": [
                        "I had an awful layover in Chicago for 8 hours , overall it took 15 hours .",
                        "My flights took an entire day .",
                        "My flights took a third of a day .",
                        "None of the above choices ."
                    ],
                    "prediction_before_change": "My flights took a third of a day .",
                    "gold_answer": "My flights took a third of a day .",
                    "prediction": "My flights took a third of a day .",
                    "changed": {
                        "from": "Chicago",
                        "to": "Norfolk"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "After 8 hours of travel time I am safe and sound in the home I was born and rasied . The first thing that comes to mind is OMG , I love the weather ! ! ! ! I had the first taste during my 2 hour layover in Las Vegas . Doubt the temperature was over 75 .",
                    "question": "How long did your travel take ?",
                    "options": [
                        "I had an awful layover in Chicago for 8 hours , overall it took 15 hours .",
                        "My flights took an entire day .",
                        "My flights took a third of a day .",
                        "None of the above choices ."
                    ],
                    "prediction_before_change": "My flights took a third of a day .",
                    "gold_answer": "My flights took a third of a day .",
                    "prediction": "My flights took a third of a day .",
                    "changed": {
                        "from": "Chicago",
                        "to": "Las Vegas"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "After 8 hours of travel time I am safe and sound in the home I was born and rasied . The first thing that comes to mind is OMG , I love the weather ! ! ! ! I had the first taste during my 2 hour layover in Dallas . Doubt the temperature was over 75 .",
                    "question": "How long did your travel take ?",
                    "options": [
                        "I had an awful layover in Chicago for 8 hours , overall it took 15 hours .",
                        "My flights took an entire day .",
                        "My flights took a third of a day .",
                        "None of the above choices ."
                    ],
                    "prediction_before_change": "My flights took a third of a day .",
                    "gold_answer": "My flights took a third of a day .",
                    "prediction": "My flights took a third of a day .",
                    "changed": {
                        "from": "Chicago",
                        "to": "Dallas"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "After 8 hours of travel time I am safe and sound in the home I was born and rasied . The first thing that comes to mind is OMG , I love the weather ! ! ! ! I had the first taste during my 2 hour layover in Miami . Doubt the temperature was over 75 .",
                    "question": "How long did your travel take ?",
                    "options": [
                        "I had an awful layover in Chicago for 8 hours , overall it took 15 hours .",
                        "My flights took an entire day .",
                        "My flights took a third of a day .",
                        "None of the above choices ."
                    ],
                    "prediction_before_change": "My flights took a third of a day .",
                    "gold_answer": "My flights took a third of a day .",
                    "prediction": "My flights took a third of a day .",
                    "changed": {
                        "from": "Chicago",
                        "to": "Miami"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "After 8 hours of travel time I am safe and sound in the home I was born and rasied . The first thing that comes to mind is OMG , I love the weather ! ! ! ! I had the first taste during my 2 hour layover in Tucson . Doubt the temperature was over 75 .",
                    "question": "How long did your travel take ?",
                    "options": [
                        "I had an awful layover in Chicago for 8 hours , overall it took 15 hours .",
                        "My flights took an entire day .",
                        "My flights took a third of a day .",
                        "None of the above choices ."
                    ],
                    "prediction_before_change": "My flights took a third of a day .",
                    "gold_answer": "My flights took a third of a day .",
                    "prediction": "My flights took a third of a day .",
                    "changed": {
                        "from": "Chicago",
                        "to": "Tucson"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "After 8 hours of travel time I am safe and sound in the home I was born and rasied . The first thing that comes to mind is OMG , I love the weather ! ! ! ! I had the first taste during my 2 hour layover in Sacramento . Doubt the temperature was over 75 .",
                    "question": "How long did your travel take ?",
                    "options": [
                        "I had an awful layover in Chicago for 8 hours , overall it took 15 hours .",
                        "My flights took an entire day .",
                        "My flights took a third of a day .",
                        "None of the above choices ."
                    ],
                    "prediction_before_change": "My flights took a third of a day .",
                    "gold_answer": "My flights took a third of a day .",
                    "prediction": "My flights took a third of a day .",
                    "changed": {
                        "from": "Chicago",
                        "to": "Sacramento"
                    },
                    "success_failed": "success"
                },
                {
                    "context": "After 8 hours of travel time I am safe and sound in the home I was born and rasied . The first thing that comes to mind is OMG , I love the weather ! ! ! ! I had the first taste during my 2 hour layover in Detroit . Doubt the temperature was over 75 .",
                    "question": "How long did your travel take ?",
                    "options": [
                        "I had an awful layover in Chicago for 8 hours , overall it took 15 hours .",
                        "My flights took an entire day .",
                        "My flights took a third of a day .",
                        "None of the above choices ."
                    ],
                    "prediction_before_change": "My flights took a third of a day .",
                    "gold_answer": "My flights took a third of a day .",
                    "prediction": "My flights took a third of a day .",
                    "changed": {
                        "from": "Chicago",
                        "to": "Detroit"
                    },
                    "success_failed": "success"
                }
            ],
            "total_cases": 50,
            "failed_cases": 6,
            "success_cases": 44,
            "failure_rate": 12.0,
            "success_rate": 88.0
        },
        {
            "test_type": "MFT",
            "capability": "Temporal",
            "test_name": "There was a change in profession",
            "test_name_description": "Test's model's ability to understand changes in profession over time.",
            "test_type_description": "MFT stands for Minimum Functionality Test. This testing type is inspired from unit testing of software engineering. For this type of testing precise and small testing datasets are created and the models are tested on that particular test set. MFTs are useful particularly for detecting when models use alternative approaches to handle complicated inputs without actually knowing the inside out of the capability. For MFT test cases, labeled test set is required.",
            "capability_description": "This capability test's a model's ability to understand order of events.",
            "test_cases": [
                {
                    "context": "Both Jim and Jane were attorneys, but there was a change in Jim, who is now an activist.",
                    "question": "Who is an activist?",
                    "options": [
                        "Jim",
                        "Jane",
                        "None"
                    ],
                    "answer": "Jim",
                    "prediction": "Jim",
                    "success_failed": "success"
                },
                {
                    "context": "Both Jane and Jim were attorneys, but there was a change in Jim, who is now an activist.",
                    "question": "Who is an activist?",
                    "options": [
                        "Jim",
                        "Jane",
                        "None"
                    ],
                    "answer": "Jim",
                    "prediction": "Jim",
                    "success_failed": "success"
                },
                {
                    "context": "Both Ed and Lauren were auditors, but there was a change in Ed, who is now an administrator.",
                    "question": "Who is an administrator?",
                    "options": [
                        "Ed",
                        "Lauren",
                        "None"
                    ],
                    "answer": "Ed",
                    "prediction": "Ed",
                    "success_failed": "success"
                },
                {
                    "context": "Both Lauren and Ed were auditors, but there was a change in Ed, who is now an administrator.",
                    "question": "Who is an administrator?",
                    "options": [
                        "Ed",
                        "Lauren",
                        "None"
                    ],
                    "answer": "Ed",
                    "prediction": "Ed",
                    "success_failed": "success"
                },
                {
                    "context": "Both Francis and Marie were ushers, but there was a change in Francis, who is now an employee.",
                    "question": "Who is an employee?",
                    "options": [
                        "Francis",
                        "Marie",
                        "None"
                    ],
                    "answer": "Francis",
                    "prediction": "Francis",
                    "success_failed": "success"
                },
                {
                    "context": "Both Marie and Francis were ushers, but there was a change in Francis, who is now an employee.",
                    "question": "Who is an employee?",
                    "options": [
                        "Francis",
                        "Marie",
                        "None"
                    ],
                    "answer": "Francis",
                    "prediction": "Francis",
                    "success_failed": "success"
                },
                {
                    "context": "Both Wendy and Jessica were inventors, but there was a change in Wendy, who is now an auditor.",
                    "question": "Who is an auditor?",
                    "options": [
                        "Wendy",
                        "Jessica",
                        "None"
                    ],
                    "answer": "Wendy",
                    "prediction": "Wendy",
                    "success_failed": "success"
                },
                {
                    "context": "Both Jessica and Wendy were inventors, but there was a change in Wendy, who is now an auditor.",
                    "question": "Who is an auditor?",
                    "options": [
                        "Wendy",
                        "Jessica",
                        "None"
                    ],
                    "answer": "Wendy",
                    "prediction": "Wendy",
                    "success_failed": "success"
                },
                {
                    "context": "Both Benjamin and George were ushers, but there was a change in Benjamin, who is now an assistant.",
                    "question": "Who is an assistant?",
                    "options": [
                        "Benjamin",
                        "George",
                        "None"
                    ],
                    "answer": "Benjamin",
                    "prediction": "Benjamin",
                    "success_failed": "success"
                },
                {
                    "context": "Both George and Benjamin were ushers, but there was a change in Benjamin, who is now an assistant.",
                    "question": "Who is an assistant?",
                    "options": [
                        "Benjamin",
                        "George",
                        "None"
                    ],
                    "answer": "Benjamin",
                    "prediction": "Benjamin",
                    "success_failed": "success"
                }
            ],
            "total_cases": 10,
            "failed_cases": 0,
            "success_cases": 10,
            "failure_rate": 0.0,
            "success_rate": 100.0
        },
        {
            "test_type": "MFT",
            "capability": "Temporal",
            "test_name": "Understanding before / after -> first / last.",
            "test_name_description": "Test's model's ability to understand changes before, after, first and last.",
            "test_type_description": "MFT stands for Minimum Functionality Test. This testing type is inspired from unit testing of software engineering. For this type of testing precise and small testing datasets are created and the models are tested on that particular test set. MFTs are useful particularly for detecting when models use alternative approaches to handle complicated inputs without actually knowing the inside out of the capability. For MFT test cases, labeled test set is required.",
            "capability_description": "This capability test's a model's ability to understand order of events.",
            "test_cases": [
                {
                    "context": "Sandra became a educator before Martha did.",
                    "question": "Who became a educator first?",
                    "options": [
                        "Sandra",
                        "Martha",
                        "None"
                    ],
                    "answer": "Sandra",
                    "prediction": "Sandra",
                    "success_failed": "success"
                },
                {
                    "context": "Sandra became a educator before Martha did.",
                    "question": "Who became a educator last?",
                    "options": [
                        "Sandra",
                        "Martha",
                        "None"
                    ],
                    "answer": "Martha",
                    "prediction": "Sandra",
                    "success_failed": "failed"
                },
                {
                    "context": "Martha became a educator after Sandra did.",
                    "question": "Who became a educator first?",
                    "options": [
                        "Sandra",
                        "Martha",
                        "None"
                    ],
                    "answer": "Sandra",
                    "prediction": "Martha",
                    "success_failed": "failed"
                },
                {
                    "context": "Martha became a educator after Sandra did.",
                    "question": "Who became a educator last?",
                    "options": [
                        "Sandra",
                        "Martha",
                        "None"
                    ],
                    "answer": "Martha",
                    "prediction": "Martha",
                    "success_failed": "success"
                },
                {
                    "context": "Frederick became a actress before Elizabeth did.",
                    "question": "Who became a actress first?",
                    "options": [
                        "Frederick",
                        "Elizabeth",
                        "None"
                    ],
                    "answer": "Frederick",
                    "prediction": "Frederick",
                    "success_failed": "success"
                },
                {
                    "context": "Frederick became a actress before Elizabeth did.",
                    "question": "Who became a actress last?",
                    "options": [
                        "Frederick",
                        "Elizabeth",
                        "None"
                    ],
                    "answer": "Elizabeth",
                    "prediction": "Frederick",
                    "success_failed": "failed"
                },
                {
                    "context": "Elizabeth became a actress after Frederick did.",
                    "question": "Who became a actress first?",
                    "options": [
                        "Frederick",
                        "Elizabeth",
                        "None"
                    ],
                    "answer": "Frederick",
                    "prediction": "Elizabeth",
                    "success_failed": "failed"
                },
                {
                    "context": "Elizabeth became a actress after Frederick did.",
                    "question": "Who became a actress last?",
                    "options": [
                        "Frederick",
                        "Elizabeth",
                        "None"
                    ],
                    "answer": "Elizabeth",
                    "prediction": "Elizabeth",
                    "success_failed": "success"
                },
                {
                    "context": "Stephanie became a orderly before Harold did.",
                    "question": "Who became a orderly first?",
                    "options": [
                        "Stephanie",
                        "Harold",
                        "None"
                    ],
                    "answer": "Stephanie",
                    "prediction": "Stephanie",
                    "success_failed": "success"
                },
                {
                    "context": "Stephanie became a orderly before Harold did.",
                    "question": "Who became a orderly last?",
                    "options": [
                        "Stephanie",
                        "Harold",
                        "None"
                    ],
                    "answer": "Harold",
                    "prediction": "Stephanie",
                    "success_failed": "failed"
                },
                {
                    "context": "Harold became a orderly after Stephanie did.",
                    "question": "Who became a orderly first?",
                    "options": [
                        "Stephanie",
                        "Harold",
                        "None"
                    ],
                    "answer": "Stephanie",
                    "prediction": "Harold",
                    "success_failed": "failed"
                },
                {
                    "context": "Harold became a orderly after Stephanie did.",
                    "question": "Who became a orderly last?",
                    "options": [
                        "Stephanie",
                        "Harold",
                        "None"
                    ],
                    "answer": "Harold",
                    "prediction": "Harold",
                    "success_failed": "success"
                },
                {
                    "context": "Alan became a academic before David did.",
                    "question": "Who became a academic first?",
                    "options": [
                        "Alan",
                        "David",
                        "None"
                    ],
                    "answer": "Alan",
                    "prediction": "Alan",
                    "success_failed": "success"
                },
                {
                    "context": "Alan became a academic before David did.",
                    "question": "Who became a academic last?",
                    "options": [
                        "Alan",
                        "David",
                        "None"
                    ],
                    "answer": "David",
                    "prediction": "Alan",
                    "success_failed": "failed"
                },
                {
                    "context": "David became a academic after Alan did.",
                    "question": "Who became a academic first?",
                    "options": [
                        "Alan",
                        "David",
                        "None"
                    ],
                    "answer": "Alan",
                    "prediction": "David",
                    "success_failed": "failed"
                },
                {
                    "context": "David became a academic after Alan did.",
                    "question": "Who became a academic last?",
                    "options": [
                        "Alan",
                        "David",
                        "None"
                    ],
                    "answer": "David",
                    "prediction": "David",
                    "success_failed": "success"
                },
                {
                    "context": "Heather became a engineer before Robert did.",
                    "question": "Who became a engineer first?",
                    "options": [
                        "Heather",
                        "Robert",
                        "None"
                    ],
                    "answer": "Heather",
                    "prediction": "Heather",
                    "success_failed": "success"
                },
                {
                    "context": "Heather became a engineer before Robert did.",
                    "question": "Who became a engineer last?",
                    "options": [
                        "Heather",
                        "Robert",
                        "None"
                    ],
                    "answer": "Robert",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Robert became a engineer after Heather did.",
                    "question": "Who became a engineer first?",
                    "options": [
                        "Heather",
                        "Robert",
                        "None"
                    ],
                    "answer": "Heather",
                    "prediction": "Robert",
                    "success_failed": "failed"
                },
                {
                    "context": "Robert became a engineer after Heather did.",
                    "question": "Who became a engineer last?",
                    "options": [
                        "Heather",
                        "Robert",
                        "None"
                    ],
                    "answer": "Robert",
                    "prediction": "Robert",
                    "success_failed": "success"
                }
            ],
            "total_cases": 20,
            "failed_cases": 10,
            "success_cases": 10,
            "failure_rate": 50.0,
            "success_rate": 50.0
        },
        {
            "test_type": "MFT",
            "capability": "Negation",
            "test_name": "Negation in context, may or may not be in question",
            "test_name_description": "Test's model's capability to understand negation in both context and question.",
            "test_type_description": "MFT stands for Minimum Functionality Test. This testing type is inspired from unit testing of software engineering. For this type of testing precise and small testing datasets are created and the models are tested on that particular test set. MFTs are useful particularly for detecting when models use alternative approaches to handle complicated inputs without actually knowing the inside out of the capability. For MFT test cases, labeled test set is required.",
            "capability_description": "This capability test's a model's ability to handle negation",
            "test_cases": [
                {
                    "context": "Robin is not an administrator. Ann is.",
                    "question": "Who is an administrator?",
                    "options": [
                        "Ann",
                        "Robin",
                        "None"
                    ],
                    "answer": "Ann",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Robin is not an administrator. Ann is.",
                    "question": "Who is not an administrator?",
                    "options": [
                        "Ann",
                        "Robin",
                        "None"
                    ],
                    "answer": "Robin",
                    "prediction": "Ann",
                    "success_failed": "failed"
                },
                {
                    "context": "Ann is an administrator. Robin is not.",
                    "question": "Who is an administrator?",
                    "options": [
                        "Ann",
                        "Robin",
                        "None"
                    ],
                    "answer": "Ann",
                    "prediction": "Ann",
                    "success_failed": "success"
                },
                {
                    "context": "Ann is an administrator. Robin is not.",
                    "question": "Who is not an administrator?",
                    "options": [
                        "Ann",
                        "Robin",
                        "None"
                    ],
                    "answer": "Robin",
                    "prediction": "Ann",
                    "success_failed": "failed"
                },
                {
                    "context": "Keith is not an editor. Al is.",
                    "question": "Who is an editor?",
                    "options": [
                        "Al",
                        "Keith",
                        "None"
                    ],
                    "answer": "Al",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Keith is not an editor. Al is.",
                    "question": "Who is not an editor?",
                    "options": [
                        "Al",
                        "Keith",
                        "None"
                    ],
                    "answer": "Keith",
                    "prediction": "Keith",
                    "success_failed": "success"
                },
                {
                    "context": "Al is an editor. Keith is not.",
                    "question": "Who is an editor?",
                    "options": [
                        "Al",
                        "Keith",
                        "None"
                    ],
                    "answer": "Al",
                    "prediction": "Al",
                    "success_failed": "success"
                },
                {
                    "context": "Al is an editor. Keith is not.",
                    "question": "Who is not an editor?",
                    "options": [
                        "Al",
                        "Keith",
                        "None"
                    ],
                    "answer": "Keith",
                    "prediction": "Al",
                    "success_failed": "failed"
                },
                {
                    "context": "Nicole is not an academic. Amanda is.",
                    "question": "Who is an academic?",
                    "options": [
                        "Amanda",
                        "Nicole",
                        "None"
                    ],
                    "answer": "Amanda",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Nicole is not an academic. Amanda is.",
                    "question": "Who is not an academic?",
                    "options": [
                        "Amanda",
                        "Nicole",
                        "None"
                    ],
                    "answer": "Nicole",
                    "prediction": "Nicole",
                    "success_failed": "success"
                },
                {
                    "context": "Amanda is an academic. Nicole is not.",
                    "question": "Who is an academic?",
                    "options": [
                        "Amanda",
                        "Nicole",
                        "None"
                    ],
                    "answer": "Amanda",
                    "prediction": "Amanda",
                    "success_failed": "success"
                },
                {
                    "context": "Amanda is an academic. Nicole is not.",
                    "question": "Who is not an academic?",
                    "options": [
                        "Amanda",
                        "Nicole",
                        "None"
                    ],
                    "answer": "Nicole",
                    "prediction": "Amanda",
                    "success_failed": "failed"
                },
                {
                    "context": "Linda is not an assassin. Ron is.",
                    "question": "Who is an assassin?",
                    "options": [
                        "Ron",
                        "Linda",
                        "None"
                    ],
                    "answer": "Ron",
                    "prediction": "Linda",
                    "success_failed": "failed"
                },
                {
                    "context": "Linda is not an assassin. Ron is.",
                    "question": "Who is not an assassin?",
                    "options": [
                        "Ron",
                        "Linda",
                        "None"
                    ],
                    "answer": "Linda",
                    "prediction": "Linda",
                    "success_failed": "success"
                },
                {
                    "context": "Ron is an assassin. Linda is not.",
                    "question": "Who is an assassin?",
                    "options": [
                        "Ron",
                        "Linda",
                        "None"
                    ],
                    "answer": "Ron",
                    "prediction": "Ron",
                    "success_failed": "success"
                },
                {
                    "context": "Ron is an assassin. Linda is not.",
                    "question": "Who is not an assassin?",
                    "options": [
                        "Ron",
                        "Linda",
                        "None"
                    ],
                    "answer": "Linda",
                    "prediction": "Ron",
                    "success_failed": "failed"
                },
                {
                    "context": "Eleanor is not an economist. Jennifer is.",
                    "question": "Who is an economist?",
                    "options": [
                        "Jennifer",
                        "Eleanor",
                        "None"
                    ],
                    "answer": "Jennifer",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Eleanor is not an economist. Jennifer is.",
                    "question": "Who is not an economist?",
                    "options": [
                        "Jennifer",
                        "Eleanor",
                        "None"
                    ],
                    "answer": "Eleanor",
                    "prediction": "Eleanor",
                    "success_failed": "success"
                },
                {
                    "context": "Jennifer is an economist. Eleanor is not.",
                    "question": "Who is an economist?",
                    "options": [
                        "Jennifer",
                        "Eleanor",
                        "None"
                    ],
                    "answer": "Jennifer",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Jennifer is an economist. Eleanor is not.",
                    "question": "Who is not an economist?",
                    "options": [
                        "Jennifer",
                        "Eleanor",
                        "None"
                    ],
                    "answer": "Eleanor",
                    "prediction": "Eleanor",
                    "success_failed": "success"
                }
            ],
            "total_cases": 20,
            "failed_cases": 11,
            "success_cases": 9,
            "failure_rate": 55.0,
            "success_rate": 45.0
        },
        {
            "test_type": "MFT",
            "capability": "Negation",
            "test_name": "Negation in question only.",
            "test_name_description": "Test's model's capability to understand negation in question.",
            "test_type_description": "MFT stands for Minimum Functionality Test. This testing type is inspired from unit testing of software engineering. For this type of testing precise and small testing datasets are created and the models are tested on that particular test set. MFTs are useful particularly for detecting when models use alternative approaches to handle complicated inputs without actually knowing the inside out of the capability. For MFT test cases, labeled test set is required.",
            "capability_description": "This capability test's a model's ability to handle negation",
            "test_cases": [
                {
                    "context": "William is an activist. Lucy is a model.",
                    "question": "Who is not an activist?",
                    "options": [
                        "Lucy",
                        "William",
                        "None"
                    ],
                    "answer": "Lucy",
                    "prediction": "William",
                    "success_failed": "failed"
                },
                {
                    "context": "William is an activist. Lucy is a model.",
                    "question": "Who is not a model?",
                    "options": [
                        "Lucy",
                        "William",
                        "None"
                    ],
                    "answer": "William",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Lucy is a model. William is an activist.",
                    "question": "Who is not an activist?",
                    "options": [
                        "Lucy",
                        "William",
                        "None"
                    ],
                    "answer": "Lucy",
                    "prediction": "William",
                    "success_failed": "failed"
                },
                {
                    "context": "Lucy is a model. William is an activist.",
                    "question": "Who is not a model?",
                    "options": [
                        "Lucy",
                        "William",
                        "None"
                    ],
                    "answer": "William",
                    "prediction": "William",
                    "success_failed": "success"
                },
                {
                    "context": "Walter is a model. Carl is an actor.",
                    "question": "Who is not a model?",
                    "options": [
                        "Carl",
                        "Walter",
                        "None"
                    ],
                    "answer": "Carl",
                    "prediction": "Walter",
                    "success_failed": "failed"
                },
                {
                    "context": "Walter is a model. Carl is an actor.",
                    "question": "Who is not an actor?",
                    "options": [
                        "Carl",
                        "Walter",
                        "None"
                    ],
                    "answer": "Walter",
                    "prediction": "Walter",
                    "success_failed": "success"
                },
                {
                    "context": "Carl is an actor. Walter is a model.",
                    "question": "Who is not a model?",
                    "options": [
                        "Carl",
                        "Walter",
                        "None"
                    ],
                    "answer": "Carl",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Carl is an actor. Walter is a model.",
                    "question": "Who is not an actor?",
                    "options": [
                        "Carl",
                        "Walter",
                        "None"
                    ],
                    "answer": "Walter",
                    "prediction": "Carl",
                    "success_failed": "failed"
                },
                {
                    "context": "Benjamin is a photographer. Joe is an activist.",
                    "question": "Who is not a photographer?",
                    "options": [
                        "Joe",
                        "Benjamin",
                        "None"
                    ],
                    "answer": "Joe",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Benjamin is a photographer. Joe is an activist.",
                    "question": "Who is not an activist?",
                    "options": [
                        "Joe",
                        "Benjamin",
                        "None"
                    ],
                    "answer": "Benjamin",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Joe is an activist. Benjamin is a photographer.",
                    "question": "Who is not a photographer?",
                    "options": [
                        "Joe",
                        "Benjamin",
                        "None"
                    ],
                    "answer": "Joe",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Joe is an activist. Benjamin is a photographer.",
                    "question": "Who is not an activist?",
                    "options": [
                        "Joe",
                        "Benjamin",
                        "None"
                    ],
                    "answer": "Benjamin",
                    "prediction": "Joe",
                    "success_failed": "failed"
                },
                {
                    "context": "Robin is a historian. Nicole is an escort.",
                    "question": "Who is not a historian?",
                    "options": [
                        "Nicole",
                        "Robin",
                        "None"
                    ],
                    "answer": "Nicole",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Robin is a historian. Nicole is an escort.",
                    "question": "Who is not an escort?",
                    "options": [
                        "Nicole",
                        "Robin",
                        "None"
                    ],
                    "answer": "Robin",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Nicole is an escort. Robin is a historian.",
                    "question": "Who is not a historian?",
                    "options": [
                        "Nicole",
                        "Robin",
                        "None"
                    ],
                    "answer": "Nicole",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Nicole is an escort. Robin is a historian.",
                    "question": "Who is not an escort?",
                    "options": [
                        "Nicole",
                        "Robin",
                        "None"
                    ],
                    "answer": "Robin",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Sophie is a DJ. Frank is an analyst.",
                    "question": "Who is not a DJ?",
                    "options": [
                        "Frank",
                        "Sophie",
                        "None"
                    ],
                    "answer": "Frank",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Sophie is a DJ. Frank is an analyst.",
                    "question": "Who is not an analyst?",
                    "options": [
                        "Frank",
                        "Sophie",
                        "None"
                    ],
                    "answer": "Sophie",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Frank is an analyst. Sophie is a DJ.",
                    "question": "Who is not a DJ?",
                    "options": [
                        "Frank",
                        "Sophie",
                        "None"
                    ],
                    "answer": "Frank",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Frank is an analyst. Sophie is a DJ.",
                    "question": "Who is not an analyst?",
                    "options": [
                        "Frank",
                        "Sophie",
                        "None"
                    ],
                    "answer": "Sophie",
                    "prediction": "None",
                    "success_failed": "failed"
                }
            ],
            "total_cases": 20,
            "failed_cases": 18,
            "success_cases": 2,
            "failure_rate": 90.0,
            "success_rate": 10.0
        },
        {
            "test_type": "MFT",
            "capability": "Fairness",
            "test_name": "M/F failure rates should be similar for different professions",
            "test_name_description": "Test's model's capability to understand negation in question.",
            "test_type_description": "MFT stands for Minimum Functionality Test. This testing type is inspired from unit testing of software engineering. For this type of testing precise and small testing datasets are created and the models are tested on that particular test set. MFTs are useful particularly for detecting when models use alternative approaches to handle complicated inputs without actually knowing the inside out of the capability. For MFT test cases, labeled test set is required.",
            "capability_description": "This capability test's a model's ability to handle negation",
            "test_cases": [
                {
                    "context": "Robert is not a secretary, Alice is.",
                    "question": "Who is a secretary?",
                    "options": [
                        "Alice",
                        "Robert",
                        "None"
                    ],
                    "answer": "Alice",
                    "prediction": "Robert",
                    "success_failed": "failed"
                },
                {
                    "context": "Alice is not a secretary, Robert is.",
                    "question": "Who is a secretary?",
                    "options": [
                        "Alice",
                        "Robert",
                        "None"
                    ],
                    "answer": "Robert",
                    "prediction": "Robert",
                    "success_failed": "success"
                },
                {
                    "context": "Daniel is not a CEO, Katherine is.",
                    "question": "Who is a CEO?",
                    "options": [
                        "Katherine",
                        "Daniel",
                        "None"
                    ],
                    "answer": "Katherine",
                    "prediction": "Daniel",
                    "success_failed": "failed"
                },
                {
                    "context": "Katherine is not a CEO, Daniel is.",
                    "question": "Who is a CEO?",
                    "options": [
                        "Katherine",
                        "Daniel",
                        "None"
                    ],
                    "answer": "Daniel",
                    "prediction": "Daniel",
                    "success_failed": "success"
                },
                {
                    "context": "Ryan is not a CEO, Sandra is.",
                    "question": "Who is a CEO?",
                    "options": [
                        "Sandra",
                        "Ryan",
                        "None"
                    ],
                    "answer": "Sandra",
                    "prediction": "Ryan",
                    "success_failed": "failed"
                },
                {
                    "context": "Sandra is not a CEO, Ryan is.",
                    "question": "Who is a CEO?",
                    "options": [
                        "Sandra",
                        "Ryan",
                        "None"
                    ],
                    "answer": "Ryan",
                    "prediction": "Ryan",
                    "success_failed": "success"
                },
                {
                    "context": "Edwin is not a nurse, Michelle is.",
                    "question": "Who is a nurse?",
                    "options": [
                        "Michelle",
                        "Edwin",
                        "None"
                    ],
                    "answer": "Michelle",
                    "prediction": "Michelle",
                    "success_failed": "success"
                },
                {
                    "context": "Michelle is not a nurse, Edwin is.",
                    "question": "Who is a nurse?",
                    "options": [
                        "Michelle",
                        "Edwin",
                        "None"
                    ],
                    "answer": "Edwin",
                    "prediction": "Edwin",
                    "success_failed": "success"
                },
                {
                    "context": "Dick is not a CEO, Martha is.",
                    "question": "Who is a CEO?",
                    "options": [
                        "Martha",
                        "Dick",
                        "None"
                    ],
                    "answer": "Martha",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Martha is not a CEO, Dick is.",
                    "question": "Who is a CEO?",
                    "options": [
                        "Martha",
                        "Dick",
                        "None"
                    ],
                    "answer": "Dick",
                    "prediction": "None",
                    "success_failed": "failed"
                }
            ],
            "total_cases": 10,
            "failed_cases": 5,
            "success_cases": 5,
            "failure_rate": 50.0,
            "success_rate": 50.0
        },
        {
            "test_type": "MFT",
            "capability": "Coref",
            "test_name": "Basic coref, he / she",
            "test_name_description": "Test's model's capability to understand he or she",
            "test_type_description": "MFT stands for Minimum Functionality Test. This testing type is inspired from unit testing of software engineering. For this type of testing precise and small testing datasets are created and the models are tested on that particular test set. MFTs are useful particularly for detecting when models use alternative approaches to handle complicated inputs without actually knowing the inside out of the capability. For MFT test cases, labeled test set is required.",
            "capability_description": "Coref (Coreference) Test's model's ability to appropriately understand he / she.",
            "test_cases": [
                {
                    "context": "Andrew and Kathryn are friends. He is an educator, and she is an artist.",
                    "question": "Who is an educator?",
                    "options": [
                        "Andrew",
                        "Kathryn",
                        "None"
                    ],
                    "answer": "Andrew",
                    "prediction": "Andrew",
                    "success_failed": "success"
                },
                {
                    "context": "Andrew and Kathryn are friends. He is an educator, and she is an artist.",
                    "question": "Who is an artist?",
                    "options": [
                        "Andrew",
                        "Kathryn",
                        "None"
                    ],
                    "answer": "Kathryn",
                    "prediction": "Andrew",
                    "success_failed": "failed"
                },
                {
                    "context": "Kathryn and Andrew are friends. He is an educator, and she is an artist.",
                    "question": "Who is an educator?",
                    "options": [
                        "Andrew",
                        "Kathryn",
                        "None"
                    ],
                    "answer": "Andrew",
                    "prediction": "Andrew",
                    "success_failed": "success"
                },
                {
                    "context": "Kathryn and Andrew are friends. He is an educator, and she is an artist.",
                    "question": "Who is an artist?",
                    "options": [
                        "Andrew",
                        "Kathryn",
                        "None"
                    ],
                    "answer": "Kathryn",
                    "prediction": "Andrew",
                    "success_failed": "failed"
                },
                {
                    "context": "Andrew and Kathryn are friends. She is an artist, and he is an educator.",
                    "question": "Who is an educator?",
                    "options": [
                        "Andrew",
                        "Kathryn",
                        "None"
                    ],
                    "answer": "Andrew",
                    "prediction": "Andrew",
                    "success_failed": "success"
                },
                {
                    "context": "Andrew and Kathryn are friends. She is an artist, and he is an educator.",
                    "question": "Who is an artist?",
                    "options": [
                        "Andrew",
                        "Kathryn",
                        "None"
                    ],
                    "answer": "Kathryn",
                    "prediction": "Andrew",
                    "success_failed": "failed"
                },
                {
                    "context": "Kathryn and Andrew are friends. She is an artist, and he is an educator.",
                    "question": "Who is an educator?",
                    "options": [
                        "Andrew",
                        "Kathryn",
                        "None"
                    ],
                    "answer": "Andrew",
                    "prediction": "Andrew",
                    "success_failed": "success"
                },
                {
                    "context": "Kathryn and Andrew are friends. She is an artist, and he is an educator.",
                    "question": "Who is an artist?",
                    "options": [
                        "Andrew",
                        "Kathryn",
                        "None"
                    ],
                    "answer": "Kathryn",
                    "prediction": "Kathryn",
                    "success_failed": "success"
                },
                {
                    "context": "Keith and Jane are friends. He is an agent, and she is an analyst.",
                    "question": "Who is an agent?",
                    "options": [
                        "Keith",
                        "Jane",
                        "None"
                    ],
                    "answer": "Keith",
                    "prediction": "Keith",
                    "success_failed": "success"
                },
                {
                    "context": "Keith and Jane are friends. He is an agent, and she is an analyst.",
                    "question": "Who is an analyst?",
                    "options": [
                        "Keith",
                        "Jane",
                        "None"
                    ],
                    "answer": "Jane",
                    "prediction": "Keith",
                    "success_failed": "failed"
                },
                {
                    "context": "Jane and Keith are friends. He is an agent, and she is an analyst.",
                    "question": "Who is an agent?",
                    "options": [
                        "Keith",
                        "Jane",
                        "None"
                    ],
                    "answer": "Keith",
                    "prediction": "Keith",
                    "success_failed": "success"
                },
                {
                    "context": "Jane and Keith are friends. He is an agent, and she is an analyst.",
                    "question": "Who is an analyst?",
                    "options": [
                        "Keith",
                        "Jane",
                        "None"
                    ],
                    "answer": "Jane",
                    "prediction": "Keith",
                    "success_failed": "failed"
                },
                {
                    "context": "Keith and Jane are friends. She is an analyst, and he is an agent.",
                    "question": "Who is an agent?",
                    "options": [
                        "Keith",
                        "Jane",
                        "None"
                    ],
                    "answer": "Keith",
                    "prediction": "Keith",
                    "success_failed": "success"
                },
                {
                    "context": "Keith and Jane are friends. She is an analyst, and he is an agent.",
                    "question": "Who is an analyst?",
                    "options": [
                        "Keith",
                        "Jane",
                        "None"
                    ],
                    "answer": "Jane",
                    "prediction": "Keith",
                    "success_failed": "failed"
                },
                {
                    "context": "Jane and Keith are friends. She is an analyst, and he is an agent.",
                    "question": "Who is an agent?",
                    "options": [
                        "Keith",
                        "Jane",
                        "None"
                    ],
                    "answer": "Keith",
                    "prediction": "Keith",
                    "success_failed": "success"
                },
                {
                    "context": "Jane and Keith are friends. She is an analyst, and he is an agent.",
                    "question": "Who is an analyst?",
                    "options": [
                        "Keith",
                        "Jane",
                        "None"
                    ],
                    "answer": "Jane",
                    "prediction": "Jane",
                    "success_failed": "success"
                },
                {
                    "context": "Richard and Sarah are friends. He is an administrator, and she is a historian.",
                    "question": "Who is an administrator?",
                    "options": [
                        "Richard",
                        "Sarah",
                        "None"
                    ],
                    "answer": "Richard",
                    "prediction": "Richard",
                    "success_failed": "success"
                },
                {
                    "context": "Richard and Sarah are friends. He is an administrator, and she is a historian.",
                    "question": "Who is a historian?",
                    "options": [
                        "Richard",
                        "Sarah",
                        "None"
                    ],
                    "answer": "Sarah",
                    "prediction": "Richard",
                    "success_failed": "failed"
                },
                {
                    "context": "Sarah and Richard are friends. He is an administrator, and she is a historian.",
                    "question": "Who is an administrator?",
                    "options": [
                        "Richard",
                        "Sarah",
                        "None"
                    ],
                    "answer": "Richard",
                    "prediction": "Richard",
                    "success_failed": "success"
                },
                {
                    "context": "Sarah and Richard are friends. He is an administrator, and she is a historian.",
                    "question": "Who is a historian?",
                    "options": [
                        "Richard",
                        "Sarah",
                        "None"
                    ],
                    "answer": "Sarah",
                    "prediction": "Richard",
                    "success_failed": "failed"
                },
                {
                    "context": "Richard and Sarah are friends. She is a historian, and he is an administrator.",
                    "question": "Who is an administrator?",
                    "options": [
                        "Richard",
                        "Sarah",
                        "None"
                    ],
                    "answer": "Richard",
                    "prediction": "Richard",
                    "success_failed": "success"
                },
                {
                    "context": "Richard and Sarah are friends. She is a historian, and he is an administrator.",
                    "question": "Who is a historian?",
                    "options": [
                        "Richard",
                        "Sarah",
                        "None"
                    ],
                    "answer": "Sarah",
                    "prediction": "Richard",
                    "success_failed": "failed"
                },
                {
                    "context": "Sarah and Richard are friends. She is a historian, and he is an administrator.",
                    "question": "Who is an administrator?",
                    "options": [
                        "Richard",
                        "Sarah",
                        "None"
                    ],
                    "answer": "Richard",
                    "prediction": "Richard",
                    "success_failed": "success"
                },
                {
                    "context": "Sarah and Richard are friends. She is a historian, and he is an administrator.",
                    "question": "Who is a historian?",
                    "options": [
                        "Richard",
                        "Sarah",
                        "None"
                    ],
                    "answer": "Sarah",
                    "prediction": "Richard",
                    "success_failed": "failed"
                },
                {
                    "context": "Dick and Judy are friends. He is an investor, and she is an interpreter.",
                    "question": "Who is an investor?",
                    "options": [
                        "Dick",
                        "Judy",
                        "None"
                    ],
                    "answer": "Dick",
                    "prediction": "Dick",
                    "success_failed": "success"
                },
                {
                    "context": "Dick and Judy are friends. He is an investor, and she is an interpreter.",
                    "question": "Who is an interpreter?",
                    "options": [
                        "Dick",
                        "Judy",
                        "None"
                    ],
                    "answer": "Judy",
                    "prediction": "Dick",
                    "success_failed": "failed"
                },
                {
                    "context": "Judy and Dick are friends. He is an investor, and she is an interpreter.",
                    "question": "Who is an investor?",
                    "options": [
                        "Dick",
                        "Judy",
                        "None"
                    ],
                    "answer": "Dick",
                    "prediction": "Dick",
                    "success_failed": "success"
                },
                {
                    "context": "Judy and Dick are friends. He is an investor, and she is an interpreter.",
                    "question": "Who is an interpreter?",
                    "options": [
                        "Dick",
                        "Judy",
                        "None"
                    ],
                    "answer": "Judy",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Dick and Judy are friends. She is an interpreter, and he is an investor.",
                    "question": "Who is an investor?",
                    "options": [
                        "Dick",
                        "Judy",
                        "None"
                    ],
                    "answer": "Dick",
                    "prediction": "Dick",
                    "success_failed": "success"
                },
                {
                    "context": "Dick and Judy are friends. She is an interpreter, and he is an investor.",
                    "question": "Who is an interpreter?",
                    "options": [
                        "Dick",
                        "Judy",
                        "None"
                    ],
                    "answer": "Judy",
                    "prediction": "Dick",
                    "success_failed": "failed"
                },
                {
                    "context": "Judy and Dick are friends. She is an interpreter, and he is an investor.",
                    "question": "Who is an investor?",
                    "options": [
                        "Dick",
                        "Judy",
                        "None"
                    ],
                    "answer": "Dick",
                    "prediction": "Dick",
                    "success_failed": "success"
                },
                {
                    "context": "Judy and Dick are friends. She is an interpreter, and he is an investor.",
                    "question": "Who is an interpreter?",
                    "options": [
                        "Dick",
                        "Judy",
                        "None"
                    ],
                    "answer": "Judy",
                    "prediction": "Judy",
                    "success_failed": "success"
                },
                {
                    "context": "Hugh and Ann are friends. He is an activist, and she is a waitress.",
                    "question": "Who is an activist?",
                    "options": [
                        "Hugh",
                        "Ann",
                        "None"
                    ],
                    "answer": "Hugh",
                    "prediction": "Hugh",
                    "success_failed": "success"
                },
                {
                    "context": "Hugh and Ann are friends. He is an activist, and she is a waitress.",
                    "question": "Who is a waitress?",
                    "options": [
                        "Hugh",
                        "Ann",
                        "None"
                    ],
                    "answer": "Ann",
                    "prediction": "Hugh",
                    "success_failed": "failed"
                },
                {
                    "context": "Ann and Hugh are friends. He is an activist, and she is a waitress.",
                    "question": "Who is an activist?",
                    "options": [
                        "Hugh",
                        "Ann",
                        "None"
                    ],
                    "answer": "Hugh",
                    "prediction": "Hugh",
                    "success_failed": "success"
                },
                {
                    "context": "Ann and Hugh are friends. He is an activist, and she is a waitress.",
                    "question": "Who is a waitress?",
                    "options": [
                        "Hugh",
                        "Ann",
                        "None"
                    ],
                    "answer": "Ann",
                    "prediction": "Hugh",
                    "success_failed": "failed"
                },
                {
                    "context": "Hugh and Ann are friends. She is a waitress, and he is an activist.",
                    "question": "Who is an activist?",
                    "options": [
                        "Hugh",
                        "Ann",
                        "None"
                    ],
                    "answer": "Hugh",
                    "prediction": "Hugh",
                    "success_failed": "success"
                },
                {
                    "context": "Hugh and Ann are friends. She is a waitress, and he is an activist.",
                    "question": "Who is a waitress?",
                    "options": [
                        "Hugh",
                        "Ann",
                        "None"
                    ],
                    "answer": "Ann",
                    "prediction": "Hugh",
                    "success_failed": "failed"
                },
                {
                    "context": "Ann and Hugh are friends. She is a waitress, and he is an activist.",
                    "question": "Who is an activist?",
                    "options": [
                        "Hugh",
                        "Ann",
                        "None"
                    ],
                    "answer": "Hugh",
                    "prediction": "Hugh",
                    "success_failed": "success"
                },
                {
                    "context": "Ann and Hugh are friends. She is a waitress, and he is an activist.",
                    "question": "Who is a waitress?",
                    "options": [
                        "Hugh",
                        "Ann",
                        "None"
                    ],
                    "answer": "Ann",
                    "prediction": "Ann",
                    "success_failed": "success"
                }
            ],
            "total_cases": 40,
            "failed_cases": 16,
            "success_cases": 24,
            "failure_rate": 40.0,
            "success_rate": 60.0
        },
        {
            "test_type": "MFT",
            "capability": "Coref",
            "test_name": "Basic coref, his / her",
            "test_name_description": "Test's model's capability to understand his or her.",
            "test_type_description": "MFT stands for Minimum Functionality Test. This testing type is inspired from unit testing of software engineering. For this type of testing precise and small testing datasets are created and the models are tested on that particular test set. MFTs are useful particularly for detecting when models use alternative approaches to handle complicated inputs without actually knowing the inside out of the capability. For MFT test cases, labeled test set is required.",
            "capability_description": "Coref (Coreference) Test's model's ability to appropriately understand he / she.",
            "test_cases": [
                {
                    "context": "Sam and Kim are friends. His mom is an actor.",
                    "question": "Whose mom is an actor?",
                    "options": [
                        "Sam",
                        "Kim",
                        "None"
                    ],
                    "answer": "Sam",
                    "prediction": "Kim",
                    "success_failed": "failed"
                },
                {
                    "context": "Kim and Sam are friends. His mom is an actor.",
                    "question": "Whose mom is an actor?",
                    "options": [
                        "Sam",
                        "Kim",
                        "None"
                    ],
                    "answer": "Sam",
                    "prediction": "Kim",
                    "success_failed": "failed"
                },
                {
                    "context": "Tom and Diane are friends. His mom is an employee.",
                    "question": "Whose mom is an employee?",
                    "options": [
                        "Tom",
                        "Diane",
                        "None"
                    ],
                    "answer": "Tom",
                    "prediction": "Tom",
                    "success_failed": "success"
                },
                {
                    "context": "Diane and Tom are friends. His mom is an employee.",
                    "question": "Whose mom is an employee?",
                    "options": [
                        "Tom",
                        "Diane",
                        "None"
                    ],
                    "answer": "Tom",
                    "prediction": "Tom",
                    "success_failed": "success"
                },
                {
                    "context": "Colin and Kathryn are friends. His mom is an intern.",
                    "question": "Whose mom is an intern?",
                    "options": [
                        "Colin",
                        "Kathryn",
                        "None"
                    ],
                    "answer": "Colin",
                    "prediction": "Kathryn",
                    "success_failed": "failed"
                },
                {
                    "context": "Kathryn and Colin are friends. His mom is an intern.",
                    "question": "Whose mom is an intern?",
                    "options": [
                        "Colin",
                        "Kathryn",
                        "None"
                    ],
                    "answer": "Colin",
                    "prediction": "Kathryn",
                    "success_failed": "failed"
                },
                {
                    "context": "Jack and Anne are friends. His mom is an interpreter.",
                    "question": "Whose mom is an interpreter?",
                    "options": [
                        "Jack",
                        "Anne",
                        "None"
                    ],
                    "answer": "Jack",
                    "prediction": "Anne",
                    "success_failed": "failed"
                },
                {
                    "context": "Anne and Jack are friends. His mom is an interpreter.",
                    "question": "Whose mom is an interpreter?",
                    "options": [
                        "Jack",
                        "Anne",
                        "None"
                    ],
                    "answer": "Jack",
                    "prediction": "Anne",
                    "success_failed": "failed"
                },
                {
                    "context": "Gary and Emma are friends. His mom is an actor.",
                    "question": "Whose mom is an actor?",
                    "options": [
                        "Gary",
                        "Emma",
                        "None"
                    ],
                    "answer": "Gary",
                    "prediction": "Emma",
                    "success_failed": "failed"
                },
                {
                    "context": "Emma and Gary are friends. His mom is an actor.",
                    "question": "Whose mom is an actor?",
                    "options": [
                        "Gary",
                        "Emma",
                        "None"
                    ],
                    "answer": "Gary",
                    "prediction": "Emma",
                    "success_failed": "failed"
                },
                {
                    "context": "Larry and Alexandra are friends. Her mom is an employee.",
                    "question": "Whose mom is an employee?",
                    "options": [
                        "Larry",
                        "Alexandra",
                        "None"
                    ],
                    "answer": "Alexandra",
                    "prediction": "Alexandra",
                    "success_failed": "success"
                },
                {
                    "context": "Alexandra and Larry are friends. Her mom is an employee.",
                    "question": "Whose mom is an employee?",
                    "options": [
                        "Larry",
                        "Alexandra",
                        "None"
                    ],
                    "answer": "Alexandra",
                    "prediction": "Alexandra",
                    "success_failed": "success"
                },
                {
                    "context": "Scott and Kelly are friends. Her mom is an administrator.",
                    "question": "Whose mom is an administrator?",
                    "options": [
                        "Scott",
                        "Kelly",
                        "None"
                    ],
                    "answer": "Kelly",
                    "prediction": "Kelly",
                    "success_failed": "success"
                },
                {
                    "context": "Kelly and Scott are friends. Her mom is an administrator.",
                    "question": "Whose mom is an administrator?",
                    "options": [
                        "Scott",
                        "Kelly",
                        "None"
                    ],
                    "answer": "Kelly",
                    "prediction": "Kelly",
                    "success_failed": "success"
                },
                {
                    "context": "Ray and Caroline are friends. Her mom is an editor.",
                    "question": "Whose mom is an editor?",
                    "options": [
                        "Ray",
                        "Caroline",
                        "None"
                    ],
                    "answer": "Caroline",
                    "prediction": "Ray",
                    "success_failed": "failed"
                },
                {
                    "context": "Caroline and Ray are friends. Her mom is an editor.",
                    "question": "Whose mom is an editor?",
                    "options": [
                        "Ray",
                        "Caroline",
                        "None"
                    ],
                    "answer": "Caroline",
                    "prediction": "Caroline",
                    "success_failed": "success"
                },
                {
                    "context": "Martin and Nicole are friends. Her mom is a historian.",
                    "question": "Whose mom is a historian?",
                    "options": [
                        "Martin",
                        "Nicole",
                        "None"
                    ],
                    "answer": "Nicole",
                    "prediction": "Nicole",
                    "success_failed": "success"
                },
                {
                    "context": "Nicole and Martin are friends. Her mom is a historian.",
                    "question": "Whose mom is a historian?",
                    "options": [
                        "Martin",
                        "Nicole",
                        "None"
                    ],
                    "answer": "Nicole",
                    "prediction": "Nicole",
                    "success_failed": "success"
                },
                {
                    "context": "Matt and Jane are friends. Her mom is a secretary.",
                    "question": "Whose mom is a secretary?",
                    "options": [
                        "Matt",
                        "Jane",
                        "None"
                    ],
                    "answer": "Jane",
                    "prediction": "Jane",
                    "success_failed": "success"
                },
                {
                    "context": "Jane and Matt are friends. Her mom is a secretary.",
                    "question": "Whose mom is a secretary?",
                    "options": [
                        "Matt",
                        "Jane",
                        "None"
                    ],
                    "answer": "Jane",
                    "prediction": "Jane",
                    "success_failed": "success"
                }
            ],
            "total_cases": 20,
            "failed_cases": 9,
            "success_cases": 11,
            "failure_rate": 45.0,
            "success_rate": 55.0
        },
        {
            "test_type": "MFT",
            "capability": "Coref",
            "test_name": "Former / Latter",
            "test_name_description": "Test's model's capability to understand former and latter.",
            "test_type_description": "MFT stands for Minimum Functionality Test. This testing type is inspired from unit testing of software engineering. For this type of testing precise and small testing datasets are created and the models are tested on that particular test set. MFTs are useful particularly for detecting when models use alternative approaches to handle complicated inputs without actually knowing the inside out of the capability. For MFT test cases, labeled test set is required.",
            "capability_description": "Coref (Coreference) Test's model's ability to appropriately understand he / she.",
            "test_cases": [
                {
                    "context": "Nick and Charlie are friends. The former is an engineer.",
                    "question": "Who is an engineer?",
                    "options": [
                        "Nick",
                        "None"
                    ],
                    "answer": "Nick",
                    "prediction": "Nick",
                    "success_failed": "success"
                },
                {
                    "context": "Charlie and Nick are friends. The latter is an engineer.",
                    "question": "Who is an engineer?",
                    "options": [
                        "Nick",
                        "None"
                    ],
                    "answer": "Nick",
                    "prediction": "Nick",
                    "success_failed": "success"
                },
                {
                    "context": "Nick and Charlie are friends. The former is an engineer and the latter is a cop.",
                    "question": "Who is an engineer?",
                    "options": [
                        "Nick",
                        "None"
                    ],
                    "answer": "Nick",
                    "prediction": "Nick",
                    "success_failed": "success"
                },
                {
                    "context": "Charlie and Nick are friends. The former is a cop and the latter is an engineer.",
                    "question": "Who is an engineer?",
                    "options": [
                        "Nick",
                        "None"
                    ],
                    "answer": "Nick",
                    "prediction": "Nick",
                    "success_failed": "success"
                },
                {
                    "context": "Edwin and Sally are friends. The former is an investor.",
                    "question": "Who is an investor?",
                    "options": [
                        "Edwin",
                        "None"
                    ],
                    "answer": "Edwin",
                    "prediction": "Edwin",
                    "success_failed": "success"
                },
                {
                    "context": "Sally and Edwin are friends. The latter is an investor.",
                    "question": "Who is an investor?",
                    "options": [
                        "Edwin",
                        "None"
                    ],
                    "answer": "Edwin",
                    "prediction": "Edwin",
                    "success_failed": "success"
                },
                {
                    "context": "Edwin and Sally are friends. The former is an investor and the latter is an analyst.",
                    "question": "Who is an investor?",
                    "options": [
                        "Edwin",
                        "None"
                    ],
                    "answer": "Edwin",
                    "prediction": "Edwin",
                    "success_failed": "success"
                },
                {
                    "context": "Sally and Edwin are friends. The former is an analyst and the latter is an investor.",
                    "question": "Who is an investor?",
                    "options": [
                        "Edwin",
                        "None"
                    ],
                    "answer": "Edwin",
                    "prediction": "Edwin",
                    "success_failed": "success"
                },
                {
                    "context": "Fred and Steve are friends. The former is an inventor.",
                    "question": "Who is an inventor?",
                    "options": [
                        "Fred",
                        "None"
                    ],
                    "answer": "Fred",
                    "prediction": "Fred",
                    "success_failed": "success"
                },
                {
                    "context": "Steve and Fred are friends. The latter is an inventor.",
                    "question": "Who is an inventor?",
                    "options": [
                        "Fred",
                        "None"
                    ],
                    "answer": "Fred",
                    "prediction": "Fred",
                    "success_failed": "success"
                },
                {
                    "context": "Fred and Steve are friends. The former is an inventor and the latter is an orderly.",
                    "question": "Who is an inventor?",
                    "options": [
                        "Fred",
                        "None"
                    ],
                    "answer": "Fred",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Steve and Fred are friends. The former is an orderly and the latter is an inventor.",
                    "question": "Who is an inventor?",
                    "options": [
                        "Fred",
                        "None"
                    ],
                    "answer": "Fred",
                    "prediction": "Fred",
                    "success_failed": "success"
                },
                {
                    "context": "Catherine and Linda are friends. The former is an interpreter.",
                    "question": "Who is an interpreter?",
                    "options": [
                        "Catherine",
                        "None"
                    ],
                    "answer": "Catherine",
                    "prediction": "Catherine",
                    "success_failed": "success"
                },
                {
                    "context": "Linda and Catherine are friends. The latter is an interpreter.",
                    "question": "Who is an interpreter?",
                    "options": [
                        "Catherine",
                        "None"
                    ],
                    "answer": "Catherine",
                    "prediction": "Catherine",
                    "success_failed": "success"
                },
                {
                    "context": "Catherine and Linda are friends. The former is an interpreter and the latter is an artist.",
                    "question": "Who is an interpreter?",
                    "options": [
                        "Catherine",
                        "None"
                    ],
                    "answer": "Catherine",
                    "prediction": "Catherine",
                    "success_failed": "success"
                },
                {
                    "context": "Linda and Catherine are friends. The former is an artist and the latter is an interpreter.",
                    "question": "Who is an interpreter?",
                    "options": [
                        "Catherine",
                        "None"
                    ],
                    "answer": "Catherine",
                    "prediction": "Catherine",
                    "success_failed": "success"
                },
                {
                    "context": "Dick and Evelyn are friends. The former is an agent.",
                    "question": "Who is an agent?",
                    "options": [
                        "Dick",
                        "None"
                    ],
                    "answer": "Dick",
                    "prediction": "Dick",
                    "success_failed": "success"
                },
                {
                    "context": "Evelyn and Dick are friends. The latter is an agent.",
                    "question": "Who is an agent?",
                    "options": [
                        "Dick",
                        "None"
                    ],
                    "answer": "Dick",
                    "prediction": "Dick",
                    "success_failed": "success"
                },
                {
                    "context": "Dick and Evelyn are friends. The former is an agent and the latter is an attorney.",
                    "question": "Who is an agent?",
                    "options": [
                        "Dick",
                        "None"
                    ],
                    "answer": "Dick",
                    "prediction": "Dick",
                    "success_failed": "success"
                },
                {
                    "context": "Evelyn and Dick are friends. The former is an attorney and the latter is an agent.",
                    "question": "Who is an agent?",
                    "options": [
                        "Dick",
                        "None"
                    ],
                    "answer": "Dick",
                    "prediction": "Dick",
                    "success_failed": "success"
                }
            ],
            "total_cases": 20,
            "failed_cases": 1,
            "success_cases": 19,
            "failure_rate": 5.0,
            "success_rate": 95.0
        },
        {
            "test_type": "MFT",
            "capability": "SRL",
            "test_name": "Agent / object distinction",
            "test_name_description": "Test's model's ability to understand distiction between agent and object.",
            "test_type_description": "MFT stands for Minimum Functionality Test. This testing type is inspired from unit testing of software engineering. For this type of testing precise and small testing datasets are created and the models are tested on that particular test set. MFTs are useful particularly for detecting when models use alternative approaches to handle complicated inputs without actually knowing the inside out of the capability. For MFT test cases, labeled test set is required.",
            "capability_description": "SRL (Semantic Role Labeling) Test's model's capability to understand different roles such as agents and objects.",
            "test_cases": [
                {
                    "context": "Don recognizes Ralph.",
                    "question": "Who recognizes?",
                    "options": [
                        "Don",
                        "Ralph",
                        "None"
                    ],
                    "answer": "Don",
                    "prediction": "Ralph",
                    "success_failed": "failed"
                },
                {
                    "context": "Don recognizes Ralph.",
                    "question": "Who is recognized?",
                    "options": [
                        "Don",
                        "Ralph",
                        "None"
                    ],
                    "answer": "Ralph",
                    "prediction": "Ralph",
                    "success_failed": "success"
                },
                {
                    "context": "Ralph is recognized by Don.",
                    "question": "Who recognizes?",
                    "options": [
                        "Don",
                        "Ralph",
                        "None"
                    ],
                    "answer": "Don",
                    "prediction": "Ralph",
                    "success_failed": "failed"
                },
                {
                    "context": "Ralph is recognized by Don.",
                    "question": "Who is recognized?",
                    "options": [
                        "Don",
                        "Ralph",
                        "None"
                    ],
                    "answer": "Ralph",
                    "prediction": "Ralph",
                    "success_failed": "success"
                },
                {
                    "context": "Benjamin believes Ken.",
                    "question": "Who believes?",
                    "options": [
                        "Benjamin",
                        "Ken",
                        "None"
                    ],
                    "answer": "Benjamin",
                    "prediction": "Benjamin",
                    "success_failed": "success"
                },
                {
                    "context": "Benjamin believes Ken.",
                    "question": "Who is believed?",
                    "options": [
                        "Benjamin",
                        "Ken",
                        "None"
                    ],
                    "answer": "Ken",
                    "prediction": "Ken",
                    "success_failed": "success"
                },
                {
                    "context": "Ken is believed by Benjamin.",
                    "question": "Who believes?",
                    "options": [
                        "Benjamin",
                        "Ken",
                        "None"
                    ],
                    "answer": "Benjamin",
                    "prediction": "Ken",
                    "success_failed": "failed"
                },
                {
                    "context": "Ken is believed by Benjamin.",
                    "question": "Who is believed?",
                    "options": [
                        "Benjamin",
                        "Ken",
                        "None"
                    ],
                    "answer": "Ken",
                    "prediction": "Ken",
                    "success_failed": "success"
                },
                {
                    "context": "Louise bothers Amy.",
                    "question": "Who bothers?",
                    "options": [
                        "Louise",
                        "Amy",
                        "None"
                    ],
                    "answer": "Louise",
                    "prediction": "Louise",
                    "success_failed": "success"
                },
                {
                    "context": "Louise bothers Amy.",
                    "question": "Who is bothered?",
                    "options": [
                        "Louise",
                        "Amy",
                        "None"
                    ],
                    "answer": "Amy",
                    "prediction": "Amy",
                    "success_failed": "success"
                },
                {
                    "context": "Amy is bothered by Louise.",
                    "question": "Who bothers?",
                    "options": [
                        "Louise",
                        "Amy",
                        "None"
                    ],
                    "answer": "Louise",
                    "prediction": "Amy",
                    "success_failed": "failed"
                },
                {
                    "context": "Amy is bothered by Louise.",
                    "question": "Who is bothered?",
                    "options": [
                        "Louise",
                        "Amy",
                        "None"
                    ],
                    "answer": "Amy",
                    "prediction": "Amy",
                    "success_failed": "success"
                },
                {
                    "context": "Greg recognizes Melissa.",
                    "question": "Who recognizes?",
                    "options": [
                        "Greg",
                        "Melissa",
                        "None"
                    ],
                    "answer": "Greg",
                    "prediction": "Melissa",
                    "success_failed": "failed"
                },
                {
                    "context": "Greg recognizes Melissa.",
                    "question": "Who is recognized?",
                    "options": [
                        "Greg",
                        "Melissa",
                        "None"
                    ],
                    "answer": "Melissa",
                    "prediction": "Melissa",
                    "success_failed": "success"
                },
                {
                    "context": "Melissa is recognized by Greg.",
                    "question": "Who recognizes?",
                    "options": [
                        "Greg",
                        "Melissa",
                        "None"
                    ],
                    "answer": "Greg",
                    "prediction": "Melissa",
                    "success_failed": "failed"
                },
                {
                    "context": "Melissa is recognized by Greg.",
                    "question": "Who is recognized?",
                    "options": [
                        "Greg",
                        "Melissa",
                        "None"
                    ],
                    "answer": "Melissa",
                    "prediction": "Melissa",
                    "success_failed": "success"
                },
                {
                    "context": "Janet hurts Roger.",
                    "question": "Who hurts?",
                    "options": [
                        "Janet",
                        "Roger",
                        "None"
                    ],
                    "answer": "Janet",
                    "prediction": "Janet",
                    "success_failed": "success"
                },
                {
                    "context": "Janet hurts Roger.",
                    "question": "Who is hurt?",
                    "options": [
                        "Janet",
                        "Roger",
                        "None"
                    ],
                    "answer": "Roger",
                    "prediction": "Janet",
                    "success_failed": "failed"
                },
                {
                    "context": "Roger is hurt by Janet.",
                    "question": "Who hurts?",
                    "options": [
                        "Janet",
                        "Roger",
                        "None"
                    ],
                    "answer": "Janet",
                    "prediction": "Roger",
                    "success_failed": "failed"
                },
                {
                    "context": "Roger is hurt by Janet.",
                    "question": "Who is hurt?",
                    "options": [
                        "Janet",
                        "Roger",
                        "None"
                    ],
                    "answer": "Roger",
                    "prediction": "Roger",
                    "success_failed": "success"
                }
            ],
            "total_cases": 20,
            "failed_cases": 8,
            "success_cases": 12,
            "failure_rate": 40.0,
            "success_rate": 60.0
        },
        {
            "test_type": "MFT",
            "capability": "SRL",
            "test_name": "Agent / object distinction with 3 agents",
            "test_name_description": "Test's model's capability to understand agents or object in case of three agents.",
            "test_type_description": "MFT stands for Minimum Functionality Test. This testing type is inspired from unit testing of software engineering. For this type of testing precise and small testing datasets are created and the models are tested on that particular test set. MFTs are useful particularly for detecting when models use alternative approaches to handle complicated inputs without actually knowing the inside out of the capability. For MFT test cases, labeled test set is required.",
            "capability_description": "SRL (Semantic Role Labeling) Test's model's capability to understand different roles such as agents and objects.",
            "test_cases": [
                {
                    "context": "Anthony dislikes Jimmy. Jimmy dislikes Albert.",
                    "question": "Who dislikes Jimmy?",
                    "options": [
                        "Anthony",
                        "Jimmy",
                        "Albert",
                        "None"
                    ],
                    "answer": "Anthony",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Anthony dislikes Jimmy. Jimmy dislikes Albert.",
                    "question": "Who dislikes Albert?",
                    "options": [
                        "Anthony",
                        "Jimmy",
                        "Albert",
                        "None"
                    ],
                    "answer": "Jimmy",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Anthony dislikes Jimmy. Jimmy dislikes Albert.",
                    "question": "Who is disliked by Anthony?",
                    "options": [
                        "Anthony",
                        "Jimmy",
                        "Albert",
                        "None"
                    ],
                    "answer": "Jimmy",
                    "prediction": "Anthony",
                    "success_failed": "failed"
                },
                {
                    "context": "Anthony dislikes Jimmy. Jimmy dislikes Albert.",
                    "question": "Who is disliked by Jimmy?",
                    "options": [
                        "Anthony",
                        "Jimmy",
                        "Albert",
                        "None"
                    ],
                    "answer": "Albert",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Anthony dislikes Jimmy. Albert is disliked by Jimmy.",
                    "question": "Who dislikes Jimmy?",
                    "options": [
                        "Anthony",
                        "Jimmy",
                        "Albert",
                        "None"
                    ],
                    "answer": "Anthony",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Anthony dislikes Jimmy. Albert is disliked by Jimmy.",
                    "question": "Who dislikes Albert?",
                    "options": [
                        "Anthony",
                        "Jimmy",
                        "Albert",
                        "None"
                    ],
                    "answer": "Jimmy",
                    "prediction": "Anthony",
                    "success_failed": "failed"
                },
                {
                    "context": "Anthony dislikes Jimmy. Albert is disliked by Jimmy.",
                    "question": "Who is disliked by Anthony?",
                    "options": [
                        "Anthony",
                        "Jimmy",
                        "Albert",
                        "None"
                    ],
                    "answer": "Jimmy",
                    "prediction": "Anthony",
                    "success_failed": "failed"
                },
                {
                    "context": "Anthony dislikes Jimmy. Albert is disliked by Jimmy.",
                    "question": "Who is disliked by Jimmy?",
                    "options": [
                        "Anthony",
                        "Jimmy",
                        "Albert",
                        "None"
                    ],
                    "answer": "Albert",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Jimmy is disliked by Anthony. Jimmy dislikes Albert.",
                    "question": "Who dislikes Jimmy?",
                    "options": [
                        "Anthony",
                        "Jimmy",
                        "Albert",
                        "None"
                    ],
                    "answer": "Anthony",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Jimmy is disliked by Anthony. Jimmy dislikes Albert.",
                    "question": "Who dislikes Albert?",
                    "options": [
                        "Anthony",
                        "Jimmy",
                        "Albert",
                        "None"
                    ],
                    "answer": "Jimmy",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Jimmy is disliked by Anthony. Jimmy dislikes Albert.",
                    "question": "Who is disliked by Anthony?",
                    "options": [
                        "Anthony",
                        "Jimmy",
                        "Albert",
                        "None"
                    ],
                    "answer": "Jimmy",
                    "prediction": "Jimmy",
                    "success_failed": "success"
                },
                {
                    "context": "Jimmy is disliked by Anthony. Jimmy dislikes Albert.",
                    "question": "Who is disliked by Jimmy?",
                    "options": [
                        "Anthony",
                        "Jimmy",
                        "Albert",
                        "None"
                    ],
                    "answer": "Albert",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Jimmy is disliked by Anthony. Albert is disliked by Jimmy.",
                    "question": "Who dislikes Jimmy?",
                    "options": [
                        "Anthony",
                        "Jimmy",
                        "Albert",
                        "None"
                    ],
                    "answer": "Anthony",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Jimmy is disliked by Anthony. Albert is disliked by Jimmy.",
                    "question": "Who dislikes Albert?",
                    "options": [
                        "Anthony",
                        "Jimmy",
                        "Albert",
                        "None"
                    ],
                    "answer": "Jimmy",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Jimmy is disliked by Anthony. Albert is disliked by Jimmy.",
                    "question": "Who is disliked by Anthony?",
                    "options": [
                        "Anthony",
                        "Jimmy",
                        "Albert",
                        "None"
                    ],
                    "answer": "Jimmy",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Jimmy is disliked by Anthony. Albert is disliked by Jimmy.",
                    "question": "Who is disliked by Jimmy?",
                    "options": [
                        "Anthony",
                        "Jimmy",
                        "Albert",
                        "None"
                    ],
                    "answer": "Albert",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Heather attacks Ray. Ray attacks Paul.",
                    "question": "Who attacks Ray?",
                    "options": [
                        "Heather",
                        "Ray",
                        "Paul",
                        "None"
                    ],
                    "answer": "Heather",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Heather attacks Ray. Ray attacks Paul.",
                    "question": "Who attacks Paul?",
                    "options": [
                        "Heather",
                        "Ray",
                        "Paul",
                        "None"
                    ],
                    "answer": "Ray",
                    "prediction": "Ray",
                    "success_failed": "success"
                },
                {
                    "context": "Heather attacks Ray. Ray attacks Paul.",
                    "question": "Who is attacked by Heather?",
                    "options": [
                        "Heather",
                        "Ray",
                        "Paul",
                        "None"
                    ],
                    "answer": "Ray",
                    "prediction": "Heather",
                    "success_failed": "failed"
                },
                {
                    "context": "Heather attacks Ray. Ray attacks Paul.",
                    "question": "Who is attacked by Ray?",
                    "options": [
                        "Heather",
                        "Ray",
                        "Paul",
                        "None"
                    ],
                    "answer": "Paul",
                    "prediction": "Ray",
                    "success_failed": "failed"
                },
                {
                    "context": "Heather attacks Ray. Paul is attacked by Ray.",
                    "question": "Who attacks Ray?",
                    "options": [
                        "Heather",
                        "Ray",
                        "Paul",
                        "None"
                    ],
                    "answer": "Heather",
                    "prediction": "Ray",
                    "success_failed": "failed"
                },
                {
                    "context": "Heather attacks Ray. Paul is attacked by Ray.",
                    "question": "Who attacks Paul?",
                    "options": [
                        "Heather",
                        "Ray",
                        "Paul",
                        "None"
                    ],
                    "answer": "Ray",
                    "prediction": "Ray",
                    "success_failed": "success"
                },
                {
                    "context": "Heather attacks Ray. Paul is attacked by Ray.",
                    "question": "Who is attacked by Heather?",
                    "options": [
                        "Heather",
                        "Ray",
                        "Paul",
                        "None"
                    ],
                    "answer": "Ray",
                    "prediction": "Paul",
                    "success_failed": "failed"
                },
                {
                    "context": "Heather attacks Ray. Paul is attacked by Ray.",
                    "question": "Who is attacked by Ray?",
                    "options": [
                        "Heather",
                        "Ray",
                        "Paul",
                        "None"
                    ],
                    "answer": "Paul",
                    "prediction": "Paul",
                    "success_failed": "success"
                },
                {
                    "context": "Ray is attacked by Heather. Ray attacks Paul.",
                    "question": "Who attacks Ray?",
                    "options": [
                        "Heather",
                        "Ray",
                        "Paul",
                        "None"
                    ],
                    "answer": "Heather",
                    "prediction": "Ray",
                    "success_failed": "failed"
                },
                {
                    "context": "Ray is attacked by Heather. Ray attacks Paul.",
                    "question": "Who attacks Paul?",
                    "options": [
                        "Heather",
                        "Ray",
                        "Paul",
                        "None"
                    ],
                    "answer": "Ray",
                    "prediction": "Ray",
                    "success_failed": "success"
                },
                {
                    "context": "Ray is attacked by Heather. Ray attacks Paul.",
                    "question": "Who is attacked by Heather?",
                    "options": [
                        "Heather",
                        "Ray",
                        "Paul",
                        "None"
                    ],
                    "answer": "Ray",
                    "prediction": "Ray",
                    "success_failed": "success"
                },
                {
                    "context": "Ray is attacked by Heather. Ray attacks Paul.",
                    "question": "Who is attacked by Ray?",
                    "options": [
                        "Heather",
                        "Ray",
                        "Paul",
                        "None"
                    ],
                    "answer": "Paul",
                    "prediction": "Ray",
                    "success_failed": "failed"
                },
                {
                    "context": "Ray is attacked by Heather. Paul is attacked by Ray.",
                    "question": "Who attacks Ray?",
                    "options": [
                        "Heather",
                        "Ray",
                        "Paul",
                        "None"
                    ],
                    "answer": "Heather",
                    "prediction": "Heather",
                    "success_failed": "success"
                },
                {
                    "context": "Ray is attacked by Heather. Paul is attacked by Ray.",
                    "question": "Who attacks Paul?",
                    "options": [
                        "Heather",
                        "Ray",
                        "Paul",
                        "None"
                    ],
                    "answer": "Ray",
                    "prediction": "Ray",
                    "success_failed": "success"
                },
                {
                    "context": "Ray is attacked by Heather. Paul is attacked by Ray.",
                    "question": "Who is attacked by Heather?",
                    "options": [
                        "Heather",
                        "Ray",
                        "Paul",
                        "None"
                    ],
                    "answer": "Ray",
                    "prediction": "Ray",
                    "success_failed": "success"
                },
                {
                    "context": "Ray is attacked by Heather. Paul is attacked by Ray.",
                    "question": "Who is attacked by Ray?",
                    "options": [
                        "Heather",
                        "Ray",
                        "Paul",
                        "None"
                    ],
                    "answer": "Paul",
                    "prediction": "Heather",
                    "success_failed": "failed"
                },
                {
                    "context": "Sara understands Alfred. Alfred understands Marie.",
                    "question": "Who understands Alfred?",
                    "options": [
                        "Sara",
                        "Alfred",
                        "Marie",
                        "None"
                    ],
                    "answer": "Sara",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Sara understands Alfred. Alfred understands Marie.",
                    "question": "Who understands Marie?",
                    "options": [
                        "Sara",
                        "Alfred",
                        "Marie",
                        "None"
                    ],
                    "answer": "Alfred",
                    "prediction": "Alfred",
                    "success_failed": "success"
                },
                {
                    "context": "Sara understands Alfred. Alfred understands Marie.",
                    "question": "Who is understood by Sara?",
                    "options": [
                        "Sara",
                        "Alfred",
                        "Marie",
                        "None"
                    ],
                    "answer": "Alfred",
                    "prediction": "Alfred",
                    "success_failed": "success"
                },
                {
                    "context": "Sara understands Alfred. Alfred understands Marie.",
                    "question": "Who is understood by Alfred?",
                    "options": [
                        "Sara",
                        "Alfred",
                        "Marie",
                        "None"
                    ],
                    "answer": "Marie",
                    "prediction": "Alfred",
                    "success_failed": "failed"
                },
                {
                    "context": "Sara understands Alfred. Marie is understood by Alfred.",
                    "question": "Who understands Alfred?",
                    "options": [
                        "Sara",
                        "Alfred",
                        "Marie",
                        "None"
                    ],
                    "answer": "Sara",
                    "prediction": "Marie",
                    "success_failed": "failed"
                },
                {
                    "context": "Sara understands Alfred. Marie is understood by Alfred.",
                    "question": "Who understands Marie?",
                    "options": [
                        "Sara",
                        "Alfred",
                        "Marie",
                        "None"
                    ],
                    "answer": "Alfred",
                    "prediction": "Marie",
                    "success_failed": "failed"
                },
                {
                    "context": "Sara understands Alfred. Marie is understood by Alfred.",
                    "question": "Who is understood by Sara?",
                    "options": [
                        "Sara",
                        "Alfred",
                        "Marie",
                        "None"
                    ],
                    "answer": "Alfred",
                    "prediction": "Marie",
                    "success_failed": "failed"
                },
                {
                    "context": "Sara understands Alfred. Marie is understood by Alfred.",
                    "question": "Who is understood by Alfred?",
                    "options": [
                        "Sara",
                        "Alfred",
                        "Marie",
                        "None"
                    ],
                    "answer": "Marie",
                    "prediction": "Marie",
                    "success_failed": "success"
                },
                {
                    "context": "Alfred is understood by Sara. Alfred understands Marie.",
                    "question": "Who understands Alfred?",
                    "options": [
                        "Sara",
                        "Alfred",
                        "Marie",
                        "None"
                    ],
                    "answer": "Sara",
                    "prediction": "Alfred",
                    "success_failed": "failed"
                },
                {
                    "context": "Alfred is understood by Sara. Alfred understands Marie.",
                    "question": "Who understands Marie?",
                    "options": [
                        "Sara",
                        "Alfred",
                        "Marie",
                        "None"
                    ],
                    "answer": "Alfred",
                    "prediction": "Alfred",
                    "success_failed": "success"
                },
                {
                    "context": "Alfred is understood by Sara. Alfred understands Marie.",
                    "question": "Who is understood by Sara?",
                    "options": [
                        "Sara",
                        "Alfred",
                        "Marie",
                        "None"
                    ],
                    "answer": "Alfred",
                    "prediction": "Alfred",
                    "success_failed": "success"
                },
                {
                    "context": "Alfred is understood by Sara. Alfred understands Marie.",
                    "question": "Who is understood by Alfred?",
                    "options": [
                        "Sara",
                        "Alfred",
                        "Marie",
                        "None"
                    ],
                    "answer": "Marie",
                    "prediction": "Alfred",
                    "success_failed": "failed"
                },
                {
                    "context": "Alfred is understood by Sara. Marie is understood by Alfred.",
                    "question": "Who understands Alfred?",
                    "options": [
                        "Sara",
                        "Alfred",
                        "Marie",
                        "None"
                    ],
                    "answer": "Sara",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Alfred is understood by Sara. Marie is understood by Alfred.",
                    "question": "Who understands Marie?",
                    "options": [
                        "Sara",
                        "Alfred",
                        "Marie",
                        "None"
                    ],
                    "answer": "Alfred",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Alfred is understood by Sara. Marie is understood by Alfred.",
                    "question": "Who is understood by Sara?",
                    "options": [
                        "Sara",
                        "Alfred",
                        "Marie",
                        "None"
                    ],
                    "answer": "Alfred",
                    "prediction": "Alfred",
                    "success_failed": "success"
                },
                {
                    "context": "Alfred is understood by Sara. Marie is understood by Alfred.",
                    "question": "Who is understood by Alfred?",
                    "options": [
                        "Sara",
                        "Alfred",
                        "Marie",
                        "None"
                    ],
                    "answer": "Marie",
                    "prediction": "Marie",
                    "success_failed": "success"
                },
                {
                    "context": "Pamela blames Mary. Mary blames Sophie.",
                    "question": "Who blames Mary?",
                    "options": [
                        "Pamela",
                        "Mary",
                        "Sophie",
                        "None"
                    ],
                    "answer": "Pamela",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Pamela blames Mary. Mary blames Sophie.",
                    "question": "Who blames Sophie?",
                    "options": [
                        "Pamela",
                        "Mary",
                        "Sophie",
                        "None"
                    ],
                    "answer": "Mary",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Pamela blames Mary. Mary blames Sophie.",
                    "question": "Who is blamed by Pamela?",
                    "options": [
                        "Pamela",
                        "Mary",
                        "Sophie",
                        "None"
                    ],
                    "answer": "Mary",
                    "prediction": "Pamela",
                    "success_failed": "failed"
                },
                {
                    "context": "Pamela blames Mary. Mary blames Sophie.",
                    "question": "Who is blamed by Mary?",
                    "options": [
                        "Pamela",
                        "Mary",
                        "Sophie",
                        "None"
                    ],
                    "answer": "Sophie",
                    "prediction": "Mary",
                    "success_failed": "failed"
                },
                {
                    "context": "Pamela blames Mary. Sophie is blamed by Mary.",
                    "question": "Who blames Mary?",
                    "options": [
                        "Pamela",
                        "Mary",
                        "Sophie",
                        "None"
                    ],
                    "answer": "Pamela",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Pamela blames Mary. Sophie is blamed by Mary.",
                    "question": "Who blames Sophie?",
                    "options": [
                        "Pamela",
                        "Mary",
                        "Sophie",
                        "None"
                    ],
                    "answer": "Mary",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Pamela blames Mary. Sophie is blamed by Mary.",
                    "question": "Who is blamed by Pamela?",
                    "options": [
                        "Pamela",
                        "Mary",
                        "Sophie",
                        "None"
                    ],
                    "answer": "Mary",
                    "prediction": "Pamela",
                    "success_failed": "failed"
                },
                {
                    "context": "Pamela blames Mary. Sophie is blamed by Mary.",
                    "question": "Who is blamed by Mary?",
                    "options": [
                        "Pamela",
                        "Mary",
                        "Sophie",
                        "None"
                    ],
                    "answer": "Sophie",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Mary is blamed by Pamela. Mary blames Sophie.",
                    "question": "Who blames Mary?",
                    "options": [
                        "Pamela",
                        "Mary",
                        "Sophie",
                        "None"
                    ],
                    "answer": "Pamela",
                    "prediction": "Mary",
                    "success_failed": "failed"
                },
                {
                    "context": "Mary is blamed by Pamela. Mary blames Sophie.",
                    "question": "Who blames Sophie?",
                    "options": [
                        "Pamela",
                        "Mary",
                        "Sophie",
                        "None"
                    ],
                    "answer": "Mary",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Mary is blamed by Pamela. Mary blames Sophie.",
                    "question": "Who is blamed by Pamela?",
                    "options": [
                        "Pamela",
                        "Mary",
                        "Sophie",
                        "None"
                    ],
                    "answer": "Mary",
                    "prediction": "Mary",
                    "success_failed": "success"
                },
                {
                    "context": "Mary is blamed by Pamela. Mary blames Sophie.",
                    "question": "Who is blamed by Mary?",
                    "options": [
                        "Pamela",
                        "Mary",
                        "Sophie",
                        "None"
                    ],
                    "answer": "Sophie",
                    "prediction": "Mary",
                    "success_failed": "failed"
                },
                {
                    "context": "Mary is blamed by Pamela. Sophie is blamed by Mary.",
                    "question": "Who blames Mary?",
                    "options": [
                        "Pamela",
                        "Mary",
                        "Sophie",
                        "None"
                    ],
                    "answer": "Pamela",
                    "prediction": "Mary",
                    "success_failed": "failed"
                },
                {
                    "context": "Mary is blamed by Pamela. Sophie is blamed by Mary.",
                    "question": "Who blames Sophie?",
                    "options": [
                        "Pamela",
                        "Mary",
                        "Sophie",
                        "None"
                    ],
                    "answer": "Mary",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Mary is blamed by Pamela. Sophie is blamed by Mary.",
                    "question": "Who is blamed by Pamela?",
                    "options": [
                        "Pamela",
                        "Mary",
                        "Sophie",
                        "None"
                    ],
                    "answer": "Mary",
                    "prediction": "Mary",
                    "success_failed": "success"
                },
                {
                    "context": "Mary is blamed by Pamela. Sophie is blamed by Mary.",
                    "question": "Who is blamed by Mary?",
                    "options": [
                        "Pamela",
                        "Mary",
                        "Sophie",
                        "None"
                    ],
                    "answer": "Sophie",
                    "prediction": "Mary",
                    "success_failed": "failed"
                },
                {
                    "context": "Lynn recognizes Mary. Mary recognizes Kathy.",
                    "question": "Who recognizes Mary?",
                    "options": [
                        "Lynn",
                        "Mary",
                        "Kathy",
                        "None"
                    ],
                    "answer": "Lynn",
                    "prediction": "Lynn",
                    "success_failed": "success"
                },
                {
                    "context": "Lynn recognizes Mary. Mary recognizes Kathy.",
                    "question": "Who recognizes Kathy?",
                    "options": [
                        "Lynn",
                        "Mary",
                        "Kathy",
                        "None"
                    ],
                    "answer": "Mary",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Lynn recognizes Mary. Mary recognizes Kathy.",
                    "question": "Who is recognized by Lynn?",
                    "options": [
                        "Lynn",
                        "Mary",
                        "Kathy",
                        "None"
                    ],
                    "answer": "Mary",
                    "prediction": "Lynn",
                    "success_failed": "failed"
                },
                {
                    "context": "Lynn recognizes Mary. Mary recognizes Kathy.",
                    "question": "Who is recognized by Mary?",
                    "options": [
                        "Lynn",
                        "Mary",
                        "Kathy",
                        "None"
                    ],
                    "answer": "Kathy",
                    "prediction": "Lynn",
                    "success_failed": "failed"
                },
                {
                    "context": "Lynn recognizes Mary. Kathy is recognized by Mary.",
                    "question": "Who recognizes Mary?",
                    "options": [
                        "Lynn",
                        "Mary",
                        "Kathy",
                        "None"
                    ],
                    "answer": "Lynn",
                    "prediction": "Mary",
                    "success_failed": "failed"
                },
                {
                    "context": "Lynn recognizes Mary. Kathy is recognized by Mary.",
                    "question": "Who recognizes Kathy?",
                    "options": [
                        "Lynn",
                        "Mary",
                        "Kathy",
                        "None"
                    ],
                    "answer": "Mary",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Lynn recognizes Mary. Kathy is recognized by Mary.",
                    "question": "Who is recognized by Lynn?",
                    "options": [
                        "Lynn",
                        "Mary",
                        "Kathy",
                        "None"
                    ],
                    "answer": "Mary",
                    "prediction": "Mary",
                    "success_failed": "success"
                },
                {
                    "context": "Lynn recognizes Mary. Kathy is recognized by Mary.",
                    "question": "Who is recognized by Mary?",
                    "options": [
                        "Lynn",
                        "Mary",
                        "Kathy",
                        "None"
                    ],
                    "answer": "Kathy",
                    "prediction": "Kathy",
                    "success_failed": "success"
                },
                {
                    "context": "Mary is recognized by Lynn. Mary recognizes Kathy.",
                    "question": "Who recognizes Mary?",
                    "options": [
                        "Lynn",
                        "Mary",
                        "Kathy",
                        "None"
                    ],
                    "answer": "Lynn",
                    "prediction": "Mary",
                    "success_failed": "failed"
                },
                {
                    "context": "Mary is recognized by Lynn. Mary recognizes Kathy.",
                    "question": "Who recognizes Kathy?",
                    "options": [
                        "Lynn",
                        "Mary",
                        "Kathy",
                        "None"
                    ],
                    "answer": "Mary",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Mary is recognized by Lynn. Mary recognizes Kathy.",
                    "question": "Who is recognized by Lynn?",
                    "options": [
                        "Lynn",
                        "Mary",
                        "Kathy",
                        "None"
                    ],
                    "answer": "Mary",
                    "prediction": "Mary",
                    "success_failed": "success"
                },
                {
                    "context": "Mary is recognized by Lynn. Mary recognizes Kathy.",
                    "question": "Who is recognized by Mary?",
                    "options": [
                        "Lynn",
                        "Mary",
                        "Kathy",
                        "None"
                    ],
                    "answer": "Kathy",
                    "prediction": "Mary",
                    "success_failed": "failed"
                },
                {
                    "context": "Mary is recognized by Lynn. Kathy is recognized by Mary.",
                    "question": "Who recognizes Mary?",
                    "options": [
                        "Lynn",
                        "Mary",
                        "Kathy",
                        "None"
                    ],
                    "answer": "Lynn",
                    "prediction": "Lynn",
                    "success_failed": "success"
                },
                {
                    "context": "Mary is recognized by Lynn. Kathy is recognized by Mary.",
                    "question": "Who recognizes Kathy?",
                    "options": [
                        "Lynn",
                        "Mary",
                        "Kathy",
                        "None"
                    ],
                    "answer": "Mary",
                    "prediction": "None",
                    "success_failed": "failed"
                },
                {
                    "context": "Mary is recognized by Lynn. Kathy is recognized by Mary.",
                    "question": "Who is recognized by Lynn?",
                    "options": [
                        "Lynn",
                        "Mary",
                        "Kathy",
                        "None"
                    ],
                    "answer": "Mary",
                    "prediction": "Mary",
                    "success_failed": "success"
                },
                {
                    "context": "Mary is recognized by Lynn. Kathy is recognized by Mary.",
                    "question": "Who is recognized by Mary?",
                    "options": [
                        "Lynn",
                        "Mary",
                        "Kathy",
                        "None"
                    ],
                    "answer": "Kathy",
                    "prediction": "Kathy",
                    "success_failed": "success"
                }
            ],
            "total_cases": 80,
            "failed_cases": 55,
            "success_cases": 25,
            "failure_rate": 68.75,
            "success_rate": 31.25
        }
    ]
}