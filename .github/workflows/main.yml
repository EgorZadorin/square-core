# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    
    env:
      BUILD_CACHE: /home/runner/.docker/buildkit

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      - name: Prepare
        id: prep
        run: |
          TAG=$(echo $GITHUB_SHA | head -c7)
          IMAGE="hub.docker.com/repository/docker/ukpsquare/square-backend"
          echo ::set-output name=tagged_image::${IMAGE}:${TAG} 
          echo ::set-output name=tag::${TAG}
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master
        with:
          install: true

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-multi-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-multi-buildx
            
      - name: Build test image
        uses: docker/build-push-action@v2
        with:
          context: ./square-backend
          builder: ${{ steps.buildx.outputs.name }}
          file: ./square-backend/Dockerfile
          target: test
          push: false
          tags: ${{ steps.prep.outputs.tagged_image }}-test
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new

      - name: Retrieve Test Report
        uses: docker://${{ steps.prep.outputs.tagged_image }}-test
        run: cp -r /app/pytest.existcode ./square-backend/pytest.existcode
        run: cp -r /app/test-reports ./square-backend/test-reports
