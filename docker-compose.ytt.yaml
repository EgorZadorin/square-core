#@ load("@ytt:data", "data")
#@ load("@ytt:template", "template")
---
#@ def skill_image_name(skill):
#@ return "ukpsquare/skills-" + skill.name + ":" + data.values.tag
#@ end

#@ def skill_build(skill):
#@ return {"dockerfile": "./skills/" + skill.name + ".Dockerfile", "context": "./skills"}
#@ end

#@ def skill_environment(skill):
WEB_CONCURRENCY: #@ str(data.values.web_concurrency)
VERIFY_SSL: #@ str(data.values.verify_ssl[data.values.environment])
SQUARE_API_URL: #@ data.values.square_api_url[data.values.environment]
KEYCLOAK_BASE_URL: #@ data.values.keycloak_base_url_https[data.values.environment]
REALM:  #@ data.values.realm
CLIENT_ID: #@ skill.author + "-" + skill.name
#@ end

#@ def skill_env_file(skill):
#@ return ["./skills/" + skill.name + "/.env"]
#@ end

#@ def traefik_tls(service):
#@ return [
#@  "traefik.http.routers." + service + ".entrypoints=websecure", 
#@  "traefik.http.routers." + service + ".tls=true", 
#@  "traefik.http.routers." + service + ".tls.certresolver=le"
#@ ]
#@ end

#@ def traefik_prefix(service):
#@ return [
#@  "traefik.http.routers." + service + ".rule=PathPrefix(`/api/" + service + "`)", 
#@  "traefik.http.routers." + service + ".middlewares=" + service + "-stripprefix," + service + "-addprefix", 
#@  "traefik.http.middlewares." + service + "-stripprefix.stripprefix.prefixes=/api/" + service, 
#@  "traefik.http.middlewares." + service + "-addprefix.addPrefix.prefix=/api"
#@  ]
#@ end

version: "3.4"

services:
  traefik:
    image: traefik:v2.6.1
    container_name: traefik
    command:
      - --api.insecure=true
      - --api.dashboard=true
      - --log.level=DEBUG
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --accesslog=true
      - --accesslog.format=json
      - --accesslog.filepath=/var/log/traefik/access.log.json
      - --certificatesresolvers.le.acme.tlschallenge=true
      - --certificatesresolvers.le.acme.storage=/certificates/acme.json
      - #@ "--certificatesresolvers.le.acme.email=" + data.values.email
      #@ if/end data.values.environment == "local":
      - --certificatesresolvers.le.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory
    labels:
      - "traefik.enable=true"
      #! Global redirect to https
      - "traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.entrypoints=web"
      - "traefik.http.routers.http-catchall.middlewares=https-redirect"

      #! Middleware redirect from HTTP to HTTPS
      - "traefik.http.middlewares.https-redirect.redirectscheme.scheme=https"
      - "traefik.http.middlewares.https-redirect.redirectscheme.permanent=true"
    ports:
      - "80:80" 
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-public-certificates:/certificates

  keycloak:
    image: jboss/keycloak:16.1.1
    environment:
      KEYCLOAK_USER: admin
      DB_VENDOR: postgres
      DB_ADDR: db
      DB_PORT: 5432
      DB_USER: square
      DB_SCHEMA: public
      DB_DATABASE: keycloak
      PROXY_ADDRESS_FORWARDING: "true"
      KEYCLOAK_HOSTNAME: #@ data.values.keycloak_base_url[data.values.environment]
      KEYCLOAK_FRONTEND_URL: #@ data.values.keycloak_base_url[data.values.environment] + "/auth"
    env_file:
      - ./keycloak/.env
    depends_on:
      - db
    labels:
      - "traefik.enable=true"
      - #@ "traefik.http.routers.keycloak.rule=Host(`" + data.values.keycloak_base_url[data.values.environment] + "`) && PathPrefix(`/auth`)" 
      - #@ template.replace(traefik_tls("keycloak"))

  db:
    image: postgres:13.6
    restart: always
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: square
      POSTGRES_DB: square
    env_file:
      - ./postgres/.env
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d/

  frontend:
    build: ./square-frontend
    image: #@ "ukpsquare/square-frontend:" + data.values.tag
    restart: always
    expose:
      - 80
      - 443
    labels:
      - "traefik.enable=true"
      #@ if/end data.values.environment == "local":
      - "traefik.http.routers.frontend.rule=Host(`square.ukp-lab.local`)"
      #@ if/end data.values.environment == "prod":
      - "traefik.http.routers.frontend.rule=Host(`square.ukp-lab.de`)"
      - "traefik.http.routers.frontend.priority=1"
      - #@ template.replace(traefik_tls("frontend"))

  documentation:
    image: #@ "ukpsquare/square-docs:" + data.values.tag
    build: ./docs
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      WEB_CONCURRENCY: #@ str(data.values.web_concurrency)
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.documentation.rule=PathPrefix(`/docs/`)"
      - #@ template.replace(traefik_tls("documentation"))

  skill_manager:
    image: #@ "ukpsquare/skill-manager:" + data.values.tag
    build: 
      context: ./skill-manager
      target: build
    ports:
      - 8000:8000
    expose:
      - 8000
    env_file:
      - ./skill-manager/.env
    environment:
      WEB_CONCURRENCY: #@ str(data.values.web_concurrency)
      KEYCLOAK_BASE_URL: #@ data.values.keycloak_base_url_https[data.values.environment]
      REALM: #@ data.values.realm
      CLIENT_ID: skill-manager
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_HOST: skill_manager_mongo
      MONGO_PORT: 27017
    depends_on:
      - skill_manager_mongo
    labels:
      - "traefik.enable=true"
      - #@ template.replace(traefik_tls("skill-manager"))
      - #@ template.replace(traefik_prefix("skill-manager"))

  skill_manager_mongo:
    image: mongo:5.0.4
    restart: always
    volumes:
      - skill-manager-mongo-data:/data/db
      - skill-manager-mongo-dumps:/dumps
    expose:
      - 27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_HOST: skill_manager_mongo
      MONGO_PORT: 27017
    env_file:
      - ./skill-manager/.env

  maintaining:
    image: #@ "ukpsquare/square-model-management:" + data.values.tag
    build: 
      context: ./square-model-inference-api/management_server
      target: build
    ports:
      - 9001:9001
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    env_file:
      - ./square-model-inference-api/management_server/.env
    environment:
      WEB_CONCURRENCY: #@ str(data.values.web_concurrency)
      VERIFY_SSL: #@ str(data.values.verify_ssl[data.values.environment])
      KEYCLOAK_BASE_URL: #@ data.values.keycloak_base_url_https[data.values.environment]
      DOCKER_HOST_URL: #@ data.values.docker_host_url[data.values.os]
      MODEL_API_image: #@ "ukpsquare/square-model-api-v1:" + data.values.tag
      ONNX_VOLUME: square-model-inference-api_onnx-models
      REALM: #@ data.values.realm
      CLIENT_ID: models
    labels:
      - "traefik.enable=true"
      - #@ template.replace(traefik_tls("maintaining"))
      - "traefik.http.routers.maintaining.rule=PathPrefix(`/api/models`)"
      - "traefik.http.routers.maintaining.middlewares=maintaining-stripprefix,maintaining-addprefix"
      - "traefik.http.middlewares.maintaining-stripprefix.stripPrefixRegex.regex=/api/[a-zA-Z0-9_-]+"
      - "traefik.http.middlewares.maintaining-addprefix.addPrefix.prefix=/api"
  
  model_bert_adapter:
    image: #@ "ukpsquare/square-model-api-v1:" + data.values.tag
    build: 
      context: ./square-model-inference-api/inference_server
      target: build
    env_file:
      - ./square-model-inference-api/inference_server/.env.bert_adapter
    environment:
      WEB_CONCURRENCY: #@ str(data.values.web_concurrency)
      KEYCLOAK_BASE_URL: #@  data.values.keycloak_base_url[data.values.environment]
    volumes:
      - ./.cache/:/etc/huggingface/.cache/
    labels:
      - "traefik.enable=true"
      - #@ template.replace(traefik_tls("bert-base-uncased"))
      - #@ template.replace(traefik_prefix("bert-base-uncased"))
  
  model_roberta_adapter:
    image: #@ "ukpsquare/square-model-api-v1:" + data.values.tag
    build: 
      context: ./square-model-inference-api/inference_server
      target: build
    env_file:
      - ./square-model-inference-api/inference_server/.env.roberta_adapter
    environment:
      WEB_CONCURRENCY: #@ str(data.values.web_concurrency)
      KEYCLOAK_BASE_URL: #@  data.values.keycloak_base_url[data.values.environment]
    volumes:
      - ./.cache/:/etc/huggingface/.cache/
    labels:
      - "traefik.enable=true"
      - #@ template.replace(traefik_tls("roberta-base"))
      - #@ template.replace(traefik_prefix("roberta-base"))
      
  model_dpr:
    image: #@ "ukpsquare/square-model-api-v1:" + data.values.tag
    build: 
      context: ./square-model-inference-api/inference_server
      target: build
    env_file:
      - ./square-model-inference-api/inference_server/.env.dpr
    environment:
      WEB_CONCURRENCY: #@ str(data.values.web_concurrency)
      KEYCLOAK_BASE_URL: #@ data.values.keycloak_base_url_https[data.values.environment]
    volumes:
      - ./.cache/:/etc/huggingface/.cache/
    labels:
      - "traefik.enable=true"
      - #@ template.replace(traefik_tls("dpr"))
      - traefik.http.routers.dpr.rule=PathPrefix(`/api/facebook-dpr-question_encoder-single-nq-base`)
      - traefik.http.routers.dpr.middlewares=dpr-stripprefix,dpr-addprefix
      - traefik.http.middlewares.dpr-stripprefix.stripprefix.prefixes=/api/facebook-dpr-question_encoder-single-nq-base
      - traefik.http.middlewares.dpr-addprefix.addPrefix.prefix=/api

  model_distilbert_st:
    image: #@ "ukpsquare/square-model-api-v1:" + data.values.tag
    build: 
      context: ./square-model-inference-api/inference_server
      target: build
    env_file:
      - ./square-model-inference-api/inference_server/.env.distilbert_sentence_transformer
    environment:
      WEB_CONCURRENCY: #@ str(data.values.web_concurrency)
      KEYCLOAK_BASE_URL: #@ data.values.keycloak_base_url_https[data.values.environment]
    volumes:
      - ./.cache/:/etc/sentence-transformers/.cache/
    labels:
      - "traefik.enable=true"
      - #@ template.replace(traefik_tls("distilbert"))
      - traefik.http.routers.distilbert.rule=PathPrefix(`/api/msmarco-distilbert-base-tas-b`)
      - traefik.http.routers.distilbert.middlewares=distilbert-stripprefix,distilbert-addprefix
      - traefik.http.middlewares.distilbert-stripprefix.stripprefix.prefixes=/api/msmarco-distilbert-base-tas-b
      - traefik.http.middlewares.distilbert-addprefix.addPrefix.prefix=/api

  model_bert_onnx:
    image: #@ "ukpsquare/square-model-api-v1:" + data.values.tag
    build: 
      context: ./square-model-inference-api/inference_server
      target: build
    env_file:
      - ./square-model-inference-api/inference_server/.env.bert_onnx
    environment:
      WEB_CONCURRENCY: #@ str(data.values.web_concurrency)
      KEYCLOAK_BASE_URL: #@ data.values.keycloak_base_url_https[data.values.environment]
    volumes:
      - ./.cache/:/etc/onnx/.cache/
      - onnx-models:/onnx_models
    labels:
      - "traefik.enable=true"
      - #@ template.replace(traefik_tls("bert-onnx"))
      - #@ template.replace(traefik_prefix("bert-onnx"))

  datastore_api:
    privileged: true
    image: #@ "ukpsquare/square-datastore-api:" + data.values.tag
    build: 
      context: ./datastore-api
      target: build
    depends_on:
      - datastore_es
    ports:
      - "7000:7000"
    env_file:
      - ./datastore-api/.env
    environment:
      WEB_CONCURRENCY: #@ str(data.values.web_concurrency)
      FAISS_URL: #@ data.values.faiss_url[data.values.environment]
      MODEL_API_URL: #@ data.values.model_url[data.values.environment]
      ES_URL: http://datastore_es:9200
      KEYCLOAK_BASE_URL: #@ data.values.keycloak_base_url[data.values.environment]
      CLIENT_ID: datastores-to-internal-services
    labels:
      - "traefik.enable=true"
      - #@ template.replace(traefik_tls("datastores"))
      - "traefik.http.routers.datastores.rule=PathPrefix(`/api/datastores`)"
      - "traefik.http.routers.datastores.middlewares=datastores-stripprefix,datastores-addprefix"
      - "traefik.http.middlewares.datastores-stripprefix.stripPrefixRegex.regex=/api/[a-zA-Z0-9_-]+"
      - "traefik.http.middlewares.datastores-addprefix.addPrefix.prefix=/datastores"

  datastore_es:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.16.1
    container_name: datastore_es01
    environment:
      - discovery.type=single-node
    volumes:
      - datastore-api-es:/usr/share/elasticsearch/data
    ports:
      - 7200:9200

  faiss-nq-dpr:
    image: kwang2049/faiss-instant:latest
    volumes:
      - datastore-api-faiss-nq-dpr:/opt/faiss-instant/resources
    labels:
      - "traefik.enable=true"
      - #@ template.replace(traefik_tls("datastores-faiss-dpr"))
      - "traefik.http.routers.datastores-faiss-dpr.rule=PathPrefix(`/api/nq/dpr`)"
      - "traefik.http.routers.datastores-faiss-dpr.middlewares=datastores-faiss-dpr-stripprefix"
      - "traefik.http.middlewares.datastores-faiss-dpr-stripprefix.stripprefix.prefixes=/api/nq/dpr"

  faiss-msmarco-distilbert:
    image: kwang2049/faiss-instant:latest
    volumes:
      - datastore-api-faiss-msmarco-distilbert:/opt/faiss-instant/resources
    labels:
      - "traefik.enable=true"
      - #@ template.replace(traefik_tls("datastores-faiss-distilbert"))
      - "traefik.http.routers.datastores-faiss-distilbert.rule=PathPrefix(`/api/msmarco/distilbert`)"
      - "traefik.http.routers.datastores-faiss-distilbert.middlewares=datastores-faiss-distilbert-stripprefix"
      - "traefik.http.middlewares.datastores-faiss-distilbert-stripprefix.stripprefix.prefixes=/api/msmarco/distilbert"
  
  faiss-bioasq-distilbert:
    image: kwang2049/faiss-instant:latest
    volumes:
      - datastore-api-faiss-bioasq-distilbert:/opt/faiss-instant/resources
    labels:
      - "traefik.enable=true"
      - #@ template.replace(traefik_tls("datastores-faiss-bioasq-distilbert"))
      - "traefik.http.routers.datastores-faiss-bioasq-distilbert.rule=PathPrefix(`/api/bioasq/distilbert`)"
      - "traefik.http.routers.datastores-faiss-bioasq-distilbert.middlewares=datastores-faiss-bioasq-distilbert-stripprefix"
      - "traefik.http.middlewares.datastores-faiss-bioasq-distilbert-stripprefix.stripprefix.prefixes=/api/bioasq/distilbert"

  #@yaml/text-templated-strings
  #@ for skill in data.values.skills:
  (@= skill.name @):
    image: #@ skill_image_name(skill)
    build: #@ skill_build(skill)
    env_file: #@ skill_env_file(skill)
    environment: #@ skill_environment(skill)
  #@ end

volumes:
  traefik-public-certificates:
  db-data:
    driver: local
  migrations-data:
    driver: local
  skill-manager-mongo-data:
    driver: local
  skill-manager-mongo-dumps:
    driver: local
  datastore-api-es:
    driver: local
  datastore-api-faiss-nq-dpr:
    driver: local
  datastore-api-faiss-msmarco-distilbert:
    driver: local
  datastore-api-faiss-bioasq-distilbert:
    driver: local

  onnx-models:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: /home/sterz/onnx_models
